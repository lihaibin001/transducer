
transducer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  080000c4  080000c4  000100c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08003fa4  08003fa4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08003fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000458  20000028  08003fd4  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000480  08003fd4  00020480  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_line   00004ac1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000ba37  00000000  00000000  00024b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002c88  00000000  00000000  00030548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000348  00000000  00000000  000331d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00033518  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000649e  00000000  00000000  000335b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004c74  00000000  00000000  00039a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e6ca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025bc  00000000  00000000  0003e748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c4 <__do_global_dtors_aux>:
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4c06      	ldr	r4, [pc, #24]	; (80000e0 <__do_global_dtors_aux+0x1c>)
 80000c8:	7823      	ldrb	r3, [r4, #0]
 80000ca:	2b00      	cmp	r3, #0
 80000cc:	d107      	bne.n	80000de <__do_global_dtors_aux+0x1a>
 80000ce:	4b05      	ldr	r3, [pc, #20]	; (80000e4 <__do_global_dtors_aux+0x20>)
 80000d0:	2b00      	cmp	r3, #0
 80000d2:	d002      	beq.n	80000da <__do_global_dtors_aux+0x16>
 80000d4:	4804      	ldr	r0, [pc, #16]	; (80000e8 <__do_global_dtors_aux+0x24>)
 80000d6:	e000      	b.n	80000da <__do_global_dtors_aux+0x16>
 80000d8:	bf00      	nop
 80000da:	2301      	movs	r3, #1
 80000dc:	7023      	strb	r3, [r4, #0]
 80000de:	bd10      	pop	{r4, pc}
 80000e0:	20000028 	.word	0x20000028
 80000e4:	00000000 	.word	0x00000000
 80000e8:	08003f88 	.word	0x08003f88

080000ec <frame_dummy>:
 80000ec:	4b04      	ldr	r3, [pc, #16]	; (8000100 <frame_dummy+0x14>)
 80000ee:	b510      	push	{r4, lr}
 80000f0:	2b00      	cmp	r3, #0
 80000f2:	d003      	beq.n	80000fc <frame_dummy+0x10>
 80000f4:	4903      	ldr	r1, [pc, #12]	; (8000104 <frame_dummy+0x18>)
 80000f6:	4804      	ldr	r0, [pc, #16]	; (8000108 <frame_dummy+0x1c>)
 80000f8:	e000      	b.n	80000fc <frame_dummy+0x10>
 80000fa:	bf00      	nop
 80000fc:	bd10      	pop	{r4, pc}
 80000fe:	46c0      	nop			; (mov r8, r8)
 8000100:	00000000 	.word	0x00000000
 8000104:	2000002c 	.word	0x2000002c
 8000108:	08003f88 	.word	0x08003f88
 800010c:	08003fac 	.word	0x08003fac
 8000110:	20000000 	.word	0x20000000
 8000114:	20000028 	.word	0x20000028
 8000118:	20000028 	.word	0x20000028
 800011c:	20000480 	.word	0x20000480

08000120 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000120:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000122:	2001      	movs	r0, #1

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000124:	240f      	movs	r4, #15
  RCC->CR |= (uint32_t)0x00000001;
 8000126:	4b35      	ldr	r3, [pc, #212]	; (80001fc <SystemInit+0xdc>)
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000128:	4935      	ldr	r1, [pc, #212]	; (8000200 <SystemInit+0xe0>)
  RCC->CR |= (uint32_t)0x00000001;
 800012a:	681a      	ldr	r2, [r3, #0]
 800012c:	4302      	orrs	r2, r0
 800012e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000130:	685a      	ldr	r2, [r3, #4]
 8000132:	400a      	ands	r2, r1
 8000134:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000136:	681a      	ldr	r2, [r3, #0]
 8000138:	4932      	ldr	r1, [pc, #200]	; (8000204 <SystemInit+0xe4>)
 800013a:	400a      	ands	r2, r1
 800013c:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800013e:	681a      	ldr	r2, [r3, #0]
 8000140:	4931      	ldr	r1, [pc, #196]	; (8000208 <SystemInit+0xe8>)
 8000142:	400a      	ands	r2, r1
 8000144:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000146:	6859      	ldr	r1, [r3, #4]
 8000148:	4a30      	ldr	r2, [pc, #192]	; (800020c <SystemInit+0xec>)
 800014a:	4011      	ands	r1, r2
 800014c:	6059      	str	r1, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800014e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000150:	43a1      	bics	r1, r4
 8000152:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000154:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000156:	4c2e      	ldr	r4, [pc, #184]	; (8000210 <SystemInit+0xf0>)
 8000158:	4021      	ands	r1, r4
 800015a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800015c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800015e:	0014      	movs	r4, r2
 8000160:	4381      	bics	r1, r0
 8000162:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000164:	2100      	movs	r1, #0
 8000166:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000168:	9100      	str	r1, [sp, #0]
 800016a:	9101      	str	r1, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800016c:	2180      	movs	r1, #128	; 0x80
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800016e:	2280      	movs	r2, #128	; 0x80
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000170:	6818      	ldr	r0, [r3, #0]
 8000172:	0249      	lsls	r1, r1, #9
 8000174:	4301      	orrs	r1, r0
 8000176:	6019      	str	r1, [r3, #0]
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000178:	0292      	lsls	r2, r2, #10
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800017a:	21a0      	movs	r1, #160	; 0xa0
 800017c:	0015      	movs	r5, r2
 800017e:	01c9      	lsls	r1, r1, #7
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000180:	6818      	ldr	r0, [r3, #0]
 8000182:	4010      	ands	r0, r2
 8000184:	9001      	str	r0, [sp, #4]
    StartUpCounter++;  
 8000186:	9800      	ldr	r0, [sp, #0]
 8000188:	3001      	adds	r0, #1
 800018a:	9000      	str	r0, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800018c:	9801      	ldr	r0, [sp, #4]
 800018e:	2800      	cmp	r0, #0
 8000190:	d102      	bne.n	8000198 <SystemInit+0x78>
 8000192:	9800      	ldr	r0, [sp, #0]
 8000194:	4288      	cmp	r0, r1
 8000196:	d1f3      	bne.n	8000180 <SystemInit+0x60>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000198:	6819      	ldr	r1, [r3, #0]
 800019a:	4029      	ands	r1, r5
 800019c:	d02b      	beq.n	80001f6 <SystemInit+0xd6>
  {
    HSEStatus = (uint32_t)0x01;
 800019e:	2201      	movs	r2, #1
 80001a0:	9201      	str	r2, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001a2:	9a01      	ldr	r2, [sp, #4]
 80001a4:	2a01      	cmp	r2, #1
 80001a6:	d125      	bne.n	80001f4 <SystemInit+0xd4>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80001a8:	2111      	movs	r1, #17
 80001aa:	4a1a      	ldr	r2, [pc, #104]	; (8000214 <SystemInit+0xf4>)
 80001ac:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001ae:	685a      	ldr	r2, [r3, #4]
 80001b0:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80001b2:	685a      	ldr	r2, [r3, #4]
 80001b4:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80001b6:	685a      	ldr	r2, [r3, #4]
 80001b8:	4022      	ands	r2, r4
 80001ba:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 80001bc:	2288      	movs	r2, #136	; 0x88
 80001be:	6859      	ldr	r1, [r3, #4]
 80001c0:	0352      	lsls	r2, r2, #13
 80001c2:	430a      	orrs	r2, r1
 80001c4:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80001c6:	2280      	movs	r2, #128	; 0x80
 80001c8:	6819      	ldr	r1, [r3, #0]
 80001ca:	0452      	lsls	r2, r2, #17
 80001cc:	430a      	orrs	r2, r1
 80001ce:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80001d0:	2280      	movs	r2, #128	; 0x80
 80001d2:	0492      	lsls	r2, r2, #18
 80001d4:	6819      	ldr	r1, [r3, #0]
 80001d6:	4211      	tst	r1, r2
 80001d8:	d0fc      	beq.n	80001d4 <SystemInit+0xb4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80001da:	2103      	movs	r1, #3
 80001dc:	685a      	ldr	r2, [r3, #4]
 80001de:	438a      	bics	r2, r1
 80001e0:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80001e2:	2202      	movs	r2, #2
 80001e4:	6859      	ldr	r1, [r3, #4]
 80001e6:	430a      	orrs	r2, r1

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80001e8:	210c      	movs	r1, #12
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80001ea:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80001ec:	685a      	ldr	r2, [r3, #4]
 80001ee:	400a      	ands	r2, r1
 80001f0:	2a08      	cmp	r2, #8
 80001f2:	d1fb      	bne.n	80001ec <SystemInit+0xcc>
}
 80001f4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    HSEStatus = (uint32_t)0x00;
 80001f6:	9101      	str	r1, [sp, #4]
 80001f8:	e7d3      	b.n	80001a2 <SystemInit+0x82>
 80001fa:	46c0      	nop			; (mov r8, r8)
 80001fc:	40021000 	.word	0x40021000
 8000200:	f8ffb80c 	.word	0xf8ffb80c
 8000204:	fef6ffff 	.word	0xfef6ffff
 8000208:	fffbffff 	.word	0xfffbffff
 800020c:	ffc0ffff 	.word	0xffc0ffff
 8000210:	fffffeac 	.word	0xfffffeac
 8000214:	40022000 	.word	0x40022000

08000218 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000218:	220c      	movs	r2, #12
{
 800021a:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800021c:	4e12      	ldr	r6, [pc, #72]	; (8000268 <SystemCoreClockUpdate+0x50>)
 800021e:	4d13      	ldr	r5, [pc, #76]	; (800026c <SystemCoreClockUpdate+0x54>)
 8000220:	6873      	ldr	r3, [r6, #4]
 8000222:	4013      	ands	r3, r2
  switch (tmp)
 8000224:	2b04      	cmp	r3, #4
 8000226:	d001      	beq.n	800022c <SystemCoreClockUpdate+0x14>
 8000228:	2b08      	cmp	r3, #8
 800022a:	d00a      	beq.n	8000242 <SystemCoreClockUpdate+0x2a>
      SystemCoreClock = HSE_VALUE;
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <SystemCoreClockUpdate+0x58>)
 800022e:	602b      	str	r3, [r5, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000230:	6873      	ldr	r3, [r6, #4]
  SystemCoreClock >>= tmp;  
 8000232:	682a      	ldr	r2, [r5, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000234:	061b      	lsls	r3, r3, #24
 8000236:	0f1b      	lsrs	r3, r3, #28
 8000238:	18eb      	adds	r3, r5, r3
 800023a:	791b      	ldrb	r3, [r3, #4]
  SystemCoreClock >>= tmp;  
 800023c:	40da      	lsrs	r2, r3
 800023e:	602a      	str	r2, [r5, #0]
}
 8000240:	bd70      	pop	{r4, r5, r6, pc}
      pllmull = ( pllmull >> 18) + 2;
 8000242:	230f      	movs	r3, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000244:	6874      	ldr	r4, [r6, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000246:	6872      	ldr	r2, [r6, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000248:	0ca4      	lsrs	r4, r4, #18
 800024a:	401c      	ands	r4, r3
 800024c:	3402      	adds	r4, #2
      if (pllsource == 0x00)
 800024e:	03d2      	lsls	r2, r2, #15
 8000250:	d403      	bmi.n	800025a <SystemCoreClockUpdate+0x42>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000252:	4808      	ldr	r0, [pc, #32]	; (8000274 <SystemCoreClockUpdate+0x5c>)
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000254:	4344      	muls	r4, r0
 8000256:	602c      	str	r4, [r5, #0]
 8000258:	e7ea      	b.n	8000230 <SystemCoreClockUpdate+0x18>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800025a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <SystemCoreClockUpdate+0x58>)
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800025e:	4019      	ands	r1, r3
 8000260:	3101      	adds	r1, #1
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000262:	f003 fdb7 	bl	8003dd4 <__udivsi3>
 8000266:	e7f5      	b.n	8000254 <SystemCoreClockUpdate+0x3c>
 8000268:	40021000 	.word	0x40021000
 800026c:	20000004 	.word	0x20000004
 8000270:	007a1200 	.word	0x007a1200
 8000274:	003d0900 	.word	0x003d0900

08000278 <ADC_DeInit>:
void ADC_DeInit(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <ADC_DeInit+0x20>)
{
 800027a:	b510      	push	{r4, lr}
  if(ADCx == ADC1)
 800027c:	4298      	cmp	r0, r3
 800027e:	d109      	bne.n	8000294 <ADC_DeInit+0x1c>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000280:	2080      	movs	r0, #128	; 0x80
 8000282:	2101      	movs	r1, #1
 8000284:	0080      	lsls	r0, r0, #2
 8000286:	f001 fd0b 	bl	8001ca0 <RCC_APB2PeriphResetCmd>

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 800028a:	2080      	movs	r0, #128	; 0x80
 800028c:	2100      	movs	r1, #0
 800028e:	0080      	lsls	r0, r0, #2
 8000290:	f001 fd06 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
  }
}
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	40012400 	.word	0x40012400

0800029c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800029c:	b510      	push	{r4, lr}
 800029e:	680b      	ldr	r3, [r1, #0]
 80002a0:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 80002a2:	68c2      	ldr	r2, [r0, #12]
 80002a4:	4323      	orrs	r3, r4
 80002a6:	68cc      	ldr	r4, [r1, #12]
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
}
 80002a8:	4323      	orrs	r3, r4
 80002aa:	690c      	ldr	r4, [r1, #16]
 80002ac:	4323      	orrs	r3, r4
 80002ae:	694c      	ldr	r4, [r1, #20]
 80002b0:	4323      	orrs	r3, r4
  tmpreg &= CFGR1_CLEAR_MASK;
 80002b2:	4c04      	ldr	r4, [pc, #16]	; (80002c4 <ADC_Init+0x28>)
 80002b4:	4022      	ands	r2, r4
 80002b6:	4313      	orrs	r3, r2
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80002b8:	790a      	ldrb	r2, [r1, #4]
 80002ba:	0352      	lsls	r2, r2, #13
 80002bc:	4313      	orrs	r3, r2
  ADCx->CFGR1 = tmpreg;
 80002be:	60c3      	str	r3, [r0, #12]
}
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	ffffd203 	.word	0xffffd203

080002c8 <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80002c8:	2300      	movs	r3, #0
 80002ca:	6003      	str	r3, [r0, #0]

   /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80002cc:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80002ce:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO;
 80002d0:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80002d2:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_ScanDirection member */
  ADC_InitStruct->ADC_ScanDirection = ADC_ScanDirection_Upward;
 80002d4:	6143      	str	r3, [r0, #20]
}
 80002d6:	4770      	bx	lr

080002d8 <ADC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 80002d8:	6882      	ldr	r2, [r0, #8]
 80002da:	2301      	movs	r3, #1
  if (NewState != DISABLE)
 80002dc:	2900      	cmp	r1, #0
 80002de:	d100      	bne.n	80002e2 <ADC_Cmd+0xa>
  }
  else
  {
    /* Set the ADDIS to Disable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
 80002e0:	2302      	movs	r3, #2
 80002e2:	4313      	orrs	r3, r2
 80002e4:	6083      	str	r3, [r0, #8]
  }
}
 80002e6:	4770      	bx	lr

080002e8 <ADC_JitterCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Disable Jitter */
    ADCx->CFGR2 |= (uint32_t)ADC_JitterOff;
 80002e8:	6903      	ldr	r3, [r0, #16]
  if (NewState != DISABLE)
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	d002      	beq.n	80002f4 <ADC_JitterCmd+0xc>
    ADCx->CFGR2 |= (uint32_t)ADC_JitterOff;
 80002ee:	4319      	orrs	r1, r3
 80002f0:	6101      	str	r1, [r0, #16]
  else
  {
    /* Enable Jitter */
    ADCx->CFGR2 &= (uint32_t)(~ADC_JitterOff);
  }
}
 80002f2:	4770      	bx	lr
    ADCx->CFGR2 &= (uint32_t)(~ADC_JitterOff);
 80002f4:	438b      	bics	r3, r1
 80002f6:	6103      	str	r3, [r0, #16]
}
 80002f8:	e7fb      	b.n	80002f2 <ADC_JitterCmd+0xa>

080002fa <ADC_AutoPowerOffCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d005      	beq.n	800030a <ADC_AutoPowerOffCmd+0x10>
  {
    /* Enable the ADC Automatic Power-Off */
    ADCx->CFGR1 |= ADC_CFGR1_AUTOFF;
 80002fe:	2380      	movs	r3, #128	; 0x80
 8000300:	68c2      	ldr	r2, [r0, #12]
 8000302:	021b      	lsls	r3, r3, #8
 8000304:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the ADC Automatic Power-Off */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AUTOFF;
 8000306:	60c3      	str	r3, [r0, #12]
  }
}
 8000308:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AUTOFF;
 800030a:	68c3      	ldr	r3, [r0, #12]
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <ADC_AutoPowerOffCmd+0x1a>)
 800030e:	4013      	ands	r3, r2
 8000310:	e7f9      	b.n	8000306 <ADC_AutoPowerOffCmd+0xc>
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	ffff7fff 	.word	0xffff7fff

08000318 <ADC_WaitModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000318:	2900      	cmp	r1, #0
 800031a:	d005      	beq.n	8000328 <ADC_WaitModeCmd+0x10>
  {
    /* Enable the ADC Automatic Delayed conversion */
    ADCx->CFGR1 |= ADC_CFGR1_WAIT;
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	68c2      	ldr	r2, [r0, #12]
 8000320:	01db      	lsls	r3, r3, #7
 8000322:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the ADC Automatic Delayed conversion */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_WAIT;
 8000324:	60c3      	str	r3, [r0, #12]
  }
}
 8000326:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_WAIT;
 8000328:	68c3      	ldr	r3, [r0, #12]
 800032a:	4a01      	ldr	r2, [pc, #4]	; (8000330 <ADC_WaitModeCmd+0x18>)
 800032c:	4013      	ands	r3, r2
 800032e:	e7f9      	b.n	8000324 <ADC_WaitModeCmd+0xc>
 8000330:	ffffbfff 	.word	0xffffbfff

08000334 <ADC_AnalogWatchdogCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000334:	2900      	cmp	r1, #0
 8000336:	d005      	beq.n	8000344 <ADC_AnalogWatchdogCmd+0x10>
  {
    /* Enable the ADC Analog Watchdog */
    ADCx->CFGR1 |= ADC_CFGR1_AWDEN;
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	68c2      	ldr	r2, [r0, #12]
 800033c:	041b      	lsls	r3, r3, #16
 800033e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the ADC Analog Watchdog */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDEN;
 8000340:	60c3      	str	r3, [r0, #12]
  }
}
 8000342:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDEN;
 8000344:	68c3      	ldr	r3, [r0, #12]
 8000346:	4a01      	ldr	r2, [pc, #4]	; (800034c <ADC_AnalogWatchdogCmd+0x18>)
 8000348:	4013      	ands	r3, r2
 800034a:	e7f9      	b.n	8000340 <ADC_AnalogWatchdogCmd+0xc>
 800034c:	ff7fffff 	.word	0xff7fffff

08000350 <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));

  /* Set the ADCx high and low threshold */
  ADCx->TR = LowThreshold | ((uint32_t)HighThreshold << 16);
 8000350:	0409      	lsls	r1, r1, #16
 8000352:	430a      	orrs	r2, r1
 8000354:	6202      	str	r2, [r0, #32]

}
 8000356:	4770      	bx	lr

08000358 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG_CHANNEL(ADC_AnalogWatchdog_Channel));

  /* Get the old register value */
  tmpreg = ADCx->CFGR1;
 8000358:	68c3      	ldr	r3, [r0, #12]

  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~ADC_CFGR1_AWDCH;
 800035a:	4a02      	ldr	r2, [pc, #8]	; (8000364 <ADC_AnalogWatchdogSingleChannelConfig+0xc>)
 800035c:	4013      	ands	r3, r2

  /* Set the Analog watchdog channel */
  tmpreg |= ADC_AnalogWatchdog_Channel;
 800035e:	4319      	orrs	r1, r3

  /* Store the new register value */
  ADCx->CFGR1 = tmpreg;
 8000360:	60c1      	str	r1, [r0, #12]
}
 8000362:	4770      	bx	lr
 8000364:	83ffffff 	.word	0x83ffffff

08000368 <ADC_AnalogWatchdogSingleChannelCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000368:	2900      	cmp	r1, #0
 800036a:	d005      	beq.n	8000378 <ADC_AnalogWatchdogSingleChannelCmd+0x10>
  {
    /* Enable the ADC Analog Watchdog Single Channel */
    ADCx->CFGR1 |= ADC_CFGR1_AWDSGL;
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	68c2      	ldr	r2, [r0, #12]
 8000370:	03db      	lsls	r3, r3, #15
 8000372:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the ADC Analog Watchdog Single Channel */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDSGL;
 8000374:	60c3      	str	r3, [r0, #12]
  }
}
 8000376:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDSGL;
 8000378:	68c3      	ldr	r3, [r0, #12]
 800037a:	4a01      	ldr	r2, [pc, #4]	; (8000380 <ADC_AnalogWatchdogSingleChannelCmd+0x18>)
 800037c:	4013      	ands	r3, r2
 800037e:	e7f9      	b.n	8000374 <ADC_AnalogWatchdogSingleChannelCmd+0xc>
 8000380:	ffbfffff 	.word	0xffbfffff

08000384 <ADC_TempSensorCmd>:
  * @param  NewState: new state of the temperature sensor input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorCmd(FunctionalState NewState)
{
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <ADC_TempSensorCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000386:	2800      	cmp	r0, #0
 8000388:	d005      	beq.n	8000396 <ADC_TempSensorCmd+0x12>
  {
    /* Enable the temperature sensor channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
 800038a:	2280      	movs	r2, #128	; 0x80
 800038c:	6819      	ldr	r1, [r3, #0]
 800038e:	0412      	lsls	r2, r2, #16
 8000390:	430a      	orrs	r2, r1
  }
  else
  {
    /* Disable the temperature sensor channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSEN);
 8000392:	601a      	str	r2, [r3, #0]
  }
}
 8000394:	4770      	bx	lr
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSEN);
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4902      	ldr	r1, [pc, #8]	; (80003a4 <ADC_TempSensorCmd+0x20>)
 800039a:	400a      	ands	r2, r1
 800039c:	e7f9      	b.n	8000392 <ADC_TempSensorCmd+0xe>
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	40012708 	.word	0x40012708
 80003a4:	ff7fffff 	.word	0xff7fffff

080003a8 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vref input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(FunctionalState NewState)
{
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <ADC_VrefintCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d005      	beq.n	80003ba <ADC_VrefintCmd+0x12>
  {
    /* Enable the Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VREFEN;
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	03d2      	lsls	r2, r2, #15
 80003b4:	430a      	orrs	r2, r1
  }
  else
  {
    /* Disable the Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VREFEN);
 80003b6:	601a      	str	r2, [r3, #0]
  }
}
 80003b8:	4770      	bx	lr
    ADC->CCR &= (uint32_t)(~ADC_CCR_VREFEN);
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4902      	ldr	r1, [pc, #8]	; (80003c8 <ADC_VrefintCmd+0x20>)
 80003be:	400a      	ands	r2, r1
 80003c0:	e7f9      	b.n	80003b6 <ADC_VrefintCmd+0xe>
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40012708 	.word	0x40012708
 80003c8:	ffbfffff 	.word	0xffbfffff

080003cc <ADC_VbatCmd>:
  * @param  NewState: new state of the Vbat input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VbatCmd(FunctionalState NewState)
{
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <ADC_VbatCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003ce:	2800      	cmp	r0, #0
 80003d0:	d005      	beq.n	80003de <ADC_VbatCmd+0x12>
  {
    /* Enable the Vbat channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATEN;
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	6819      	ldr	r1, [r3, #0]
 80003d6:	0452      	lsls	r2, r2, #17
 80003d8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Disable the Vbat channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATEN);
 80003da:	601a      	str	r2, [r3, #0]
  }
}
 80003dc:	4770      	bx	lr
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATEN);
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4902      	ldr	r1, [pc, #8]	; (80003ec <ADC_VbatCmd+0x20>)
 80003e2:	400a      	ands	r2, r1
 80003e4:	e7f9      	b.n	80003da <ADC_VbatCmd+0xe>
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	40012708 	.word	0x40012708
 80003ec:	feffffff 	.word	0xfeffffff

080003f0 <ADC_ChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Configure the ADC Channel */
  ADCx->CHSELR |= (uint32_t)ADC_Channel;
 80003f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80003f2:	4319      	orrs	r1, r3
 80003f4:	6281      	str	r1, [r0, #40]	; 0x28

  /* Set the ADC Sampling Time register */
  tmpreg |= (uint32_t)ADC_SampleTime;

  /* Configure the ADC Sample time register */
  ADCx->SMPR = tmpreg ;
 80003f6:	6142      	str	r2, [r0, #20]
}
 80003f8:	4770      	bx	lr

080003fa <ADC_ContinuousModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d005      	beq.n	800040a <ADC_ContinuousModeCmd+0x10>
  {
    /* Enable the Continuous mode*/
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_CONT;
 80003fe:	2380      	movs	r3, #128	; 0x80
 8000400:	68c2      	ldr	r2, [r0, #12]
 8000402:	019b      	lsls	r3, r3, #6
 8000404:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the Continuous mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_CONT);
 8000406:	60c3      	str	r3, [r0, #12]
  }
}
 8000408:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_CONT);
 800040a:	68c3      	ldr	r3, [r0, #12]
 800040c:	4a01      	ldr	r2, [pc, #4]	; (8000414 <ADC_ContinuousModeCmd+0x1a>)
 800040e:	4013      	ands	r3, r2
 8000410:	e7f9      	b.n	8000406 <ADC_ContinuousModeCmd+0xc>
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffdfff 	.word	0xffffdfff

08000418 <ADC_DiscModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 8000418:	2900      	cmp	r1, #0
 800041a:	d005      	beq.n	8000428 <ADC_DiscModeCmd+0x10>
  {
    /* Enable the Discontinuous mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DISCEN;
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	68c2      	ldr	r2, [r0, #12]
 8000420:	025b      	lsls	r3, r3, #9
 8000422:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the Discontinuous mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DISCEN);
 8000424:	60c3      	str	r3, [r0, #12]
  }
}
 8000426:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DISCEN);
 8000428:	68c3      	ldr	r3, [r0, #12]
 800042a:	4a01      	ldr	r2, [pc, #4]	; (8000430 <ADC_DiscModeCmd+0x18>)
 800042c:	4013      	ands	r3, r2
 800042e:	e7f9      	b.n	8000424 <ADC_DiscModeCmd+0xc>
 8000430:	fffeffff 	.word	0xfffeffff

08000434 <ADC_OverrunModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 8000434:	2900      	cmp	r1, #0
 8000436:	d005      	beq.n	8000444 <ADC_OverrunModeCmd+0x10>
  {
    /* Enable the Overrun mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_OVRMOD;
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	68c2      	ldr	r2, [r0, #12]
 800043c:	015b      	lsls	r3, r3, #5
 800043e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the Overrun mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_OVRMOD);
 8000440:	60c3      	str	r3, [r0, #12]
  }
}
 8000442:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_OVRMOD);
 8000444:	68c3      	ldr	r3, [r0, #12]
 8000446:	4a01      	ldr	r2, [pc, #4]	; (800044c <ADC_OverrunModeCmd+0x18>)
 8000448:	4013      	ands	r3, r2
 800044a:	e7f9      	b.n	8000440 <ADC_OverrunModeCmd+0xc>
 800044c:	ffffefff 	.word	0xffffefff

08000450 <ADC_GetCalibrationFactor>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	6881      	ldr	r1, [r0, #8]
 8000454:	0612      	lsls	r2, r2, #24
 8000456:	430a      	orrs	r2, r1
 8000458:	6082      	str	r2, [r0, #8]
 800045a:	22f0      	movs	r2, #240	; 0xf0
{
 800045c:	0003      	movs	r3, r0
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 800045e:	0212      	lsls	r2, r2, #8
 8000460:	3a01      	subs	r2, #1
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 8000462:	6899      	ldr	r1, [r3, #8]
    calibrationcounter++;  
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8000464:	2a00      	cmp	r2, #0
 8000466:	d001      	beq.n	800046c <ADC_GetCalibrationFactor+0x1c>
 8000468:	2900      	cmp	r1, #0
 800046a:	dbf9      	blt.n	8000460 <ADC_GetCalibrationFactor+0x10>
    tmpreg = ADCx->DR;
  }
  else
  {
    /* Error factor */
    tmpreg = 0x00000000;
 800046c:	2000      	movs	r0, #0
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 800046e:	689a      	ldr	r2, [r3, #8]
 8000470:	4282      	cmp	r2, r0
 8000472:	db00      	blt.n	8000476 <ADC_GetCalibrationFactor+0x26>
    tmpreg = ADCx->DR;
 8000474:	6c18      	ldr	r0, [r3, #64]	; 0x40
  }
  return tmpreg;
}
 8000476:	4770      	bx	lr

08000478 <ADC_StopOfConversion>:
void ADC_StopOfConversion(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTP;
 8000478:	2310      	movs	r3, #16
 800047a:	6882      	ldr	r2, [r0, #8]
 800047c:	4313      	orrs	r3, r2
 800047e:	6083      	str	r3, [r0, #8]
}
 8000480:	4770      	bx	lr

08000482 <ADC_StartOfConversion>:
void ADC_StartOfConversion(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTART;
 8000482:	2304      	movs	r3, #4
 8000484:	6882      	ldr	r2, [r0, #8]
 8000486:	4313      	orrs	r3, r2
 8000488:	6083      	str	r3, [r0, #8]
}
 800048a:	4770      	bx	lr

0800048c <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800048c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800048e:	b280      	uxth	r0, r0
}
 8000490:	4770      	bx	lr

08000492 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000492:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 8000494:	68c2      	ldr	r2, [r0, #12]
  if (NewState != DISABLE)
 8000496:	2900      	cmp	r1, #0
 8000498:	d002      	beq.n	80004a0 <ADC_DMACmd+0xe>
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 800049a:	4313      	orrs	r3, r2
 800049c:	60c3      	str	r3, [r0, #12]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
  }
}
 800049e:	4770      	bx	lr
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
 80004a0:	439a      	bics	r2, r3
 80004a2:	60c2      	str	r2, [r0, #12]
}
 80004a4:	e7fb      	b.n	800049e <ADC_DMACmd+0xc>

080004a6 <ADC_DMARequestModeConfig>:
void ADC_DMARequestModeConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMARequestMode)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_DMACFG;
 80004a6:	2202      	movs	r2, #2
 80004a8:	68c3      	ldr	r3, [r0, #12]
 80004aa:	4393      	bics	r3, r2
 80004ac:	60c3      	str	r3, [r0, #12]
  ADCx->CFGR1 |= (uint32_t)ADC_DMARequestMode;
 80004ae:	68c3      	ldr	r3, [r0, #12]
 80004b0:	4319      	orrs	r1, r3
 80004b2:	60c1      	str	r1, [r0, #12]
}
 80004b4:	4770      	bx	lr

080004b6 <ADC_ITConfig>:
  assert_param(IS_ADC_CONFIG_IT(ADC_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 80004b6:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d002      	beq.n	80004c2 <ADC_ITConfig+0xc>
    ADCx->IER |= ADC_IT;
 80004bc:	4319      	orrs	r1, r3
 80004be:	6041      	str	r1, [r0, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->IER &= (~(uint32_t)ADC_IT);
  }
}
 80004c0:	4770      	bx	lr
    ADCx->IER &= (~(uint32_t)ADC_IT);
 80004c2:	438b      	bics	r3, r1
 80004c4:	6043      	str	r3, [r0, #4]
}
 80004c6:	e7fb      	b.n	80004c0 <ADC_ITConfig+0xa>

080004c8 <ADC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  if((uint32_t)(ADC_FLAG & 0x01000000))
 80004c8:	01cb      	lsls	r3, r1, #7
 80004ca:	d507      	bpl.n	80004dc <ADC_GetFlagStatus+0x14>
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
 80004cc:	6880      	ldr	r0, [r0, #8]
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <ADC_GetFlagStatus+0x18>)
 80004d0:	4018      	ands	r0, r3
  {
    tmpreg = ADCx->ISR;
  }
  
  /* Check the status of the specified ADC flag */
  if ((tmpreg & ADC_FLAG) != (uint32_t)RESET)
 80004d2:	4001      	ands	r1, r0
 80004d4:	1e48      	subs	r0, r1, #1
 80004d6:	4181      	sbcs	r1, r0
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004d8:	b2c8      	uxtb	r0, r1
}
 80004da:	4770      	bx	lr
    tmpreg = ADCx->ISR;
 80004dc:	6800      	ldr	r0, [r0, #0]
 80004de:	e7f8      	b.n	80004d2 <ADC_GetFlagStatus+0xa>
 80004e0:	feffffff 	.word	0xfeffffff

080004e4 <ADC_ClearFlag>:
 80004e4:	6001      	str	r1, [r0, #0]
 80004e6:	4770      	bx	lr

080004e8 <ADC_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));

  /* Get the ADC_IT enable bit status */
  enablestatus = (uint32_t)(ADCx->IER & ADC_IT); 
 80004e8:	6843      	ldr	r3, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->ISR & ADC_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80004ea:	6802      	ldr	r2, [r0, #0]
 80004ec:	2000      	movs	r0, #0
 80004ee:	420a      	tst	r2, r1
 80004f0:	d003      	beq.n	80004fa <ADC_GetITStatus+0x12>
  enablestatus = (uint32_t)(ADCx->IER & ADC_IT); 
 80004f2:	4019      	ands	r1, r3
  if (((uint32_t)(ADCx->ISR & ADC_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80004f4:	1e48      	subs	r0, r1, #1
 80004f6:	4181      	sbcs	r1, r0
 80004f8:	b2c8      	uxtb	r0, r1
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 80004fa:	4770      	bx	lr

080004fc <ADC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_IT(ADC_IT));

  /* Clear the selected ADC interrupt pending bits */
  ADCx->ISR = (uint32_t)ADC_IT; 
 80004fc:	6001      	str	r1, [r0, #0]
}
 80004fe:	4770      	bx	lr

08000500 <CEC_DeInit>:
  * @brief  Deinitializes the CEC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void CEC_DeInit(void)
{
 8000500:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);
 8000502:	2480      	movs	r4, #128	; 0x80
 8000504:	05e4      	lsls	r4, r4, #23
 8000506:	0020      	movs	r0, r4
 8000508:	2101      	movs	r1, #1
 800050a:	f001 fbd5 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE);
 800050e:	2100      	movs	r1, #0
 8000510:	0020      	movs	r0, r4
 8000512:	f001 fbd1 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
}
 8000516:	bd10      	pop	{r4, pc}

08000518 <CEC_Init>:
  * @param  CEC_InitStruct: pointer to an CEC_InitTypeDef structure that contains
  *         the configuration information for the specified CEC peripheral.
  * @retval None
  */
void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
{
 8000518:	b510      	push	{r4, lr}
  assert_param(IS_CEC_LONG_BIT_PERIOD_ERROR(CEC_InitStruct->CEC_LongBitPeriodError));
  assert_param(IS_CEC_BDR_NO_GEN_ERROR(CEC_InitStruct->CEC_BRDNoGen));
  assert_param(IS_CEC_SFT_OPTION(CEC_InitStruct->CEC_SFTOption));

  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <CEC_Init+0x2c>)

  /* Clear CFGR bits */
  tmpreg &= CFGR_CLEAR_MASK;

  /* Configure the CEC peripheral */
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
 800051c:	6844      	ldr	r4, [r0, #4]
 800051e:	6803      	ldr	r3, [r0, #0]
  tmpreg = CEC->CFGR;
 8000520:	6851      	ldr	r1, [r2, #4]
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
 8000522:	4323      	orrs	r3, r4
  tmpreg &= CFGR_CLEAR_MASK;
 8000524:	4c08      	ldr	r4, [pc, #32]	; (8000548 <CEC_Init+0x30>)
 8000526:	4021      	ands	r1, r4
 8000528:	430b      	orrs	r3, r1
 800052a:	6881      	ldr	r1, [r0, #8]
 800052c:	430b      	orrs	r3, r1
 800052e:	68c1      	ldr	r1, [r0, #12]
 8000530:	430b      	orrs	r3, r1
 8000532:	6901      	ldr	r1, [r0, #16]
 8000534:	430b      	orrs	r3, r1
 8000536:	6941      	ldr	r1, [r0, #20]
 8000538:	430b      	orrs	r3, r1
  tmpreg |= (CEC_InitStruct->CEC_SignalFreeTime | CEC_InitStruct->CEC_RxTolerance |
 800053a:	6981      	ldr	r1, [r0, #24]
 800053c:	430b      	orrs	r3, r1
             CEC_InitStruct->CEC_StopReception  | CEC_InitStruct->CEC_BitRisingError |
             CEC_InitStruct->CEC_LongBitPeriodError| CEC_InitStruct->CEC_BRDNoGen |
             CEC_InitStruct->CEC_SFTOption);

  /* Write to CEC CFGR  register */
  CEC->CFGR = tmpreg;
 800053e:	6053      	str	r3, [r2, #4]
}
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40007800 	.word	0x40007800
 8000548:	7000fe00 	.word	0x7000fe00

0800054c <CEC_StructInit>:
  *         be initialized.
  * @retval None
  */
void CEC_StructInit(CEC_InitTypeDef* CEC_InitStruct)
{
  CEC_InitStruct->CEC_SignalFreeTime = CEC_SignalFreeTime_Standard;
 800054c:	2300      	movs	r3, #0
 800054e:	6003      	str	r3, [r0, #0]
  CEC_InitStruct->CEC_RxTolerance = CEC_RxTolerance_Standard;
 8000550:	6043      	str	r3, [r0, #4]
  CEC_InitStruct->CEC_StopReception = CEC_StopReception_Off;
 8000552:	6083      	str	r3, [r0, #8]
  CEC_InitStruct->CEC_BitRisingError = CEC_BitRisingError_Off;
 8000554:	60c3      	str	r3, [r0, #12]
  CEC_InitStruct->CEC_LongBitPeriodError = CEC_LongBitPeriodError_Off;
 8000556:	6103      	str	r3, [r0, #16]
  CEC_InitStruct->CEC_BRDNoGen = CEC_BRDNoGen_Off;
 8000558:	6143      	str	r3, [r0, #20]
  CEC_InitStruct->CEC_SFTOption = CEC_SFTOption_Off;
 800055a:	6183      	str	r3, [r0, #24]
}
 800055c:	4770      	bx	lr

0800055e <CEC_Cmd>:
  * @param  NewState: new state of the CEC peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CEC_Cmd(FunctionalState NewState)
{
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <CEC_Cmd+0x16>)
 8000560:	2201      	movs	r2, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the CEC peripheral */
    CEC->CR |= CEC_CR_CECEN;
 8000562:	6819      	ldr	r1, [r3, #0]
  if (NewState != DISABLE)
 8000564:	2800      	cmp	r0, #0
 8000566:	d002      	beq.n	800056e <CEC_Cmd+0x10>
    CEC->CR |= CEC_CR_CECEN;
 8000568:	430a      	orrs	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the CEC peripheral */
    CEC->CR &= ~CEC_CR_CECEN;
  }
}
 800056c:	4770      	bx	lr
    CEC->CR &= ~CEC_CR_CECEN;
 800056e:	4391      	bics	r1, r2
 8000570:	6019      	str	r1, [r3, #0]
}
 8000572:	e7fb      	b.n	800056c <CEC_Cmd+0xe>
 8000574:	40007800 	.word	0x40007800

08000578 <CEC_ListenModeCmd>:
  * @param  NewState: new state of the Listen Mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CEC_ListenModeCmd(FunctionalState NewState)
{
 8000578:	4a06      	ldr	r2, [pc, #24]	; (8000594 <CEC_ListenModeCmd+0x1c>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800057a:	2800      	cmp	r0, #0
 800057c:	d005      	beq.n	800058a <CEC_ListenModeCmd+0x12>
  {
    /* Enable the Listen Mode */
    CEC->CFGR |= CEC_CFGR_LSTN;
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	6851      	ldr	r1, [r2, #4]
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	430b      	orrs	r3, r1
  }
  else
  {
    /* Disable the Listen Mode */
    CEC->CFGR &= ~CEC_CFGR_LSTN;
 8000586:	6053      	str	r3, [r2, #4]
  }
}
 8000588:	4770      	bx	lr
    CEC->CFGR &= ~CEC_CFGR_LSTN;
 800058a:	6853      	ldr	r3, [r2, #4]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	085b      	lsrs	r3, r3, #1
 8000590:	e7f9      	b.n	8000586 <CEC_ListenModeCmd+0xe>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40007800 	.word	0x40007800

08000598 <CEC_OwnAddressConfig>:
void CEC_OwnAddressConfig(uint8_t CEC_OwnAddress)
{
  uint32_t tmp =0x00;
  /* Check the parameters */
  assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));
  tmp = 1 <<(CEC_OwnAddress + 16);
 8000598:	2301      	movs	r3, #1
 800059a:	3010      	adds	r0, #16
 800059c:	4083      	lsls	r3, r0
  /* Set the CEC own address */
  CEC->CFGR |= tmp;
 800059e:	4a02      	ldr	r2, [pc, #8]	; (80005a8 <CEC_OwnAddressConfig+0x10>)
 80005a0:	6851      	ldr	r1, [r2, #4]
 80005a2:	430b      	orrs	r3, r1
 80005a4:	6053      	str	r3, [r2, #4]
}
 80005a6:	4770      	bx	lr
 80005a8:	40007800 	.word	0x40007800

080005ac <CEC_OwnAddressClear>:
  * @retval None
  */
void CEC_OwnAddressClear(void)
{
  /* Set the CEC own address */
  CEC->CFGR = 0x0;
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <CEC_OwnAddressClear+0x8>)
 80005b0:	605a      	str	r2, [r3, #4]
}
 80005b2:	4770      	bx	lr
 80005b4:	40007800 	.word	0x40007800

080005b8 <CEC_SendData>:
  * @retval None
  */
void CEC_SendData(uint8_t Data)
{
  /* Transmit Data */
  CEC->TXDR = Data;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <CEC_SendData+0x8>)
 80005ba:	6098      	str	r0, [r3, #8]
}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40007800 	.word	0x40007800

080005c4 <CEC_ReceiveData>:
  * @retval The received data.
  */
uint8_t CEC_ReceiveData(void)
{
  /* Receive Data */
  return (uint8_t)(CEC->RXDR);
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <CEC_ReceiveData+0x8>)
 80005c6:	68d8      	ldr	r0, [r3, #12]
 80005c8:	b2c0      	uxtb	r0, r0
}
 80005ca:	4770      	bx	lr
 80005cc:	40007800 	.word	0x40007800

080005d0 <CEC_StartOfMessage>:
  * @retval None
  */
void CEC_StartOfMessage(void)
{
  /* Starts of new message */
  CEC->CR |= CEC_CR_TXSOM; 
 80005d0:	2302      	movs	r3, #2
 80005d2:	4a02      	ldr	r2, [pc, #8]	; (80005dc <CEC_StartOfMessage+0xc>)
 80005d4:	6811      	ldr	r1, [r2, #0]
 80005d6:	430b      	orrs	r3, r1
 80005d8:	6013      	str	r3, [r2, #0]
}
 80005da:	4770      	bx	lr
 80005dc:	40007800 	.word	0x40007800

080005e0 <CEC_EndOfMessage>:
  * @retval None
  */
void CEC_EndOfMessage(void)
{
  /* The data byte will be transmitted with an EOM bit */
  CEC->CR |= CEC_CR_TXEOM;
 80005e0:	2304      	movs	r3, #4
 80005e2:	4a02      	ldr	r2, [pc, #8]	; (80005ec <CEC_EndOfMessage+0xc>)
 80005e4:	6811      	ldr	r1, [r2, #0]
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6013      	str	r3, [r2, #0]
}
 80005ea:	4770      	bx	lr
 80005ec:	40007800 	.word	0x40007800

080005f0 <CEC_ITConfig>:
  * @param  NewState: new state of the selected CEC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CEC_ITConfig(uint16_t CEC_IT, FunctionalState NewState)
{
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <CEC_ITConfig+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_CEC_IT(CEC_IT));

  if (NewState != DISABLE)
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d003      	beq.n	80005fe <CEC_ITConfig+0xe>
  {
    /* Enable the selected CEC interrupt */
    CEC->IER |= CEC_IT;
 80005f6:	6953      	ldr	r3, [r2, #20]
 80005f8:	4318      	orrs	r0, r3
  }
  else
  {
    CEC_IT =~CEC_IT;
    /* Disable the selected CEC interrupt */
    CEC->IER &= CEC_IT;
 80005fa:	6150      	str	r0, [r2, #20]
  }
}
 80005fc:	4770      	bx	lr
    CEC_IT =~CEC_IT;
 80005fe:	43c0      	mvns	r0, r0
    CEC->IER &= CEC_IT;
 8000600:	6951      	ldr	r1, [r2, #20]
 8000602:	b280      	uxth	r0, r0
 8000604:	4008      	ands	r0, r1
 8000606:	e7f8      	b.n	80005fa <CEC_ITConfig+0xa>
 8000608:	40007800 	.word	0x40007800

0800060c <CEC_GetFlagStatus>:
  *            @arg CEC_FLAG_RXEND: End Of Reception.
  *            @arg CEC_FLAG_RXBR: Rx-Byte Received.
  * @retval The new state of CEC_FLAG (SET or RESET)
  */
FlagStatus CEC_GetFlagStatus(uint16_t CEC_FLAG) 
{
 800060c:	0003      	movs	r3, r0
  FlagStatus bitstatus = RESET;
  
  assert_param(IS_CEC_GET_FLAG(CEC_FLAG));
  
  /* Check the status of the specified CEC flag */
  if ((CEC->ISR & CEC_FLAG) != (uint16_t)RESET)
 800060e:	4a03      	ldr	r2, [pc, #12]	; (800061c <CEC_GetFlagStatus+0x10>)
 8000610:	6910      	ldr	r0, [r2, #16]
 8000612:	4018      	ands	r0, r3
 8000614:	1e43      	subs	r3, r0, #1
 8000616:	4198      	sbcs	r0, r3
    /* CEC flag is reset */
    bitstatus = RESET;
  }

  /* Return the CEC flag status */
  return  bitstatus;
 8000618:	b2c0      	uxtb	r0, r0
}
 800061a:	4770      	bx	lr
 800061c:	40007800 	.word	0x40007800

08000620 <CEC_ClearFlag>:
void CEC_ClearFlag(uint32_t CEC_FLAG)
{
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  /* Clear the selected CEC flag */
  CEC->ISR = CEC_FLAG;
 8000620:	4b01      	ldr	r3, [pc, #4]	; (8000628 <CEC_ClearFlag+0x8>)
 8000622:	6118      	str	r0, [r3, #16]
}
 8000624:	4770      	bx	lr
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40007800 	.word	0x40007800

0800062c <CEC_GetITStatus>:
  *            @arg CEC_IT_RXEND: End Of Reception.
  *            @arg CEC_IT_RXBR: Rx-Byte Received 
  * @retval The new state of CEC_IT (SET or RESET).
  */
ITStatus CEC_GetITStatus(uint16_t CEC_IT)
{
 800062c:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));

  /* Get the CEC IT enable bit status */
  enablestatus = (CEC->IER & CEC_IT);
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <CEC_GetITStatus+0x18>)
 8000630:	2000      	movs	r0, #0
 8000632:	6951      	ldr	r1, [r2, #20]

  /* Check the status of the specified CEC interrupt */
  if (((CEC->ISR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 8000634:	6912      	ldr	r2, [r2, #16]
 8000636:	421a      	tst	r2, r3
 8000638:	d003      	beq.n	8000642 <CEC_GetITStatus+0x16>
  enablestatus = (CEC->IER & CEC_IT);
 800063a:	400b      	ands	r3, r1
  if (((CEC->ISR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 800063c:	1e58      	subs	r0, r3, #1
 800063e:	4183      	sbcs	r3, r0
 8000640:	b2d8      	uxtb	r0, r3
    bitstatus = RESET;
  }

  /* Return the CEC interrupt status */
  return  bitstatus;
}
 8000642:	4770      	bx	lr
 8000644:	40007800 	.word	0x40007800

08000648 <CEC_ClearITPendingBit>:
void CEC_ClearITPendingBit(uint16_t CEC_IT)
{
  assert_param(IS_CEC_IT(CEC_IT));

  /* Clear the selected CEC interrupt pending bits */
  CEC->ISR = CEC_IT;
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <CEC_ClearITPendingBit+0x8>)
 800064a:	6118      	str	r0, [r3, #16]
}
 800064c:	4770      	bx	lr
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40007800 	.word	0x40007800

08000654 <COMP_DeInit>:
  * @param  None
  * @retval None
  */
void COMP_DeInit(void)
{
  COMP->CSR = ((uint32_t)0x00000000);    /*!< Set COMP_CSR register to reset value */
 8000654:	2200      	movs	r2, #0
 8000656:	4b01      	ldr	r3, [pc, #4]	; (800065c <COMP_DeInit+0x8>)
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	4770      	bx	lr
 800065c:	4001001c 	.word	0x4001001c

08000660 <COMP_Init>:
  * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure that contains 
  *         the configuration information for the specified COMP peripheral.
  * @retval None
  */
void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct)
{
 8000660:	b530      	push	{r4, r5, lr}

  /*!< Get the COMP_CSR register value */
  tmpreg = COMP->CSR;

  /*!< Clear the COMP1SW1, COMPx_IN_SEL, COMPx_OUT_TIM_SEL, COMPx_POL, COMPx_HYST and COMPx_PWR_MODE bits */ 
  tmpreg &= (uint32_t) ~(COMP_CSR_CLEAR_MASK<<COMP_Selection);
 8000662:	4d09      	ldr	r5, [pc, #36]	; (8000688 <COMP_Init+0x28>)
  tmpreg = COMP->CSR;
 8000664:	4c09      	ldr	r4, [pc, #36]	; (800068c <COMP_Init+0x2c>)
  tmpreg &= (uint32_t) ~(COMP_CSR_CLEAR_MASK<<COMP_Selection);
 8000666:	4085      	lsls	r5, r0
  tmpreg = COMP->CSR;
 8000668:	6822      	ldr	r2, [r4, #0]
  /*!< Set COMPxINSEL bits according to COMP_InitStruct->COMP_InvertingInput value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */   
  tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
 800066a:	680b      	ldr	r3, [r1, #0]
  tmpreg &= (uint32_t) ~(COMP_CSR_CLEAR_MASK<<COMP_Selection);
 800066c:	43aa      	bics	r2, r5
  tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
 800066e:	684d      	ldr	r5, [r1, #4]
 8000670:	432b      	orrs	r3, r5
 8000672:	688d      	ldr	r5, [r1, #8]
 8000674:	432b      	orrs	r3, r5
                       COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
 8000676:	68cd      	ldr	r5, [r1, #12]
 8000678:	6909      	ldr	r1, [r1, #16]
 800067a:	432b      	orrs	r3, r5
 800067c:	430b      	orrs	r3, r1
                       COMP_InitStruct->COMP_Mode)<<COMP_Selection);
 800067e:	4083      	lsls	r3, r0
  tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
 8000680:	4313      	orrs	r3, r2

  /*!< Write to COMP_CSR register */
  COMP->CSR = tmpreg;  
 8000682:	6023      	str	r3, [r4, #0]
}
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	00003ffe 	.word	0x00003ffe
 800068c:	4001001c 	.word	0x4001001c

08000690 <COMP_StructInit>:
  *         be initialized.
  * @retval None
  */
void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
{
  COMP_InitStruct->COMP_InvertingInput = COMP_InvertingInput_1_4VREFINT;
 8000690:	2300      	movs	r3, #0
 8000692:	6003      	str	r3, [r0, #0]
  COMP_InitStruct->COMP_Output = COMP_Output_None;
 8000694:	6043      	str	r3, [r0, #4]
  COMP_InitStruct->COMP_OutputPol = COMP_OutputPol_NonInverted;
 8000696:	6083      	str	r3, [r0, #8]
  COMP_InitStruct->COMP_Hysteresis = COMP_Hysteresis_No;
 8000698:	60c3      	str	r3, [r0, #12]
  COMP_InitStruct->COMP_Mode = COMP_Mode_UltraLowPower;
 800069a:	330c      	adds	r3, #12
 800069c:	6103      	str	r3, [r0, #16]
}
 800069e:	4770      	bx	lr

080006a0 <COMP_Cmd>:
  * @note   When disabled, the comparator doesn't perform comparison and the 
  *         output level is low.
  * @retval None
  */
void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <COMP_Cmd+0x1c>)
 80006a2:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006a4:	2900      	cmp	r1, #0
 80006a6:	d004      	beq.n	80006b2 <COMP_Cmd+0x12>
  {
    /* Enable the selected COMP peripheral */
    COMP->CSR |= (uint32_t) (1<<COMP_Selection);
 80006a8:	4083      	lsls	r3, r0
 80006aa:	6811      	ldr	r1, [r2, #0]
 80006ac:	430b      	orrs	r3, r1
 80006ae:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the selected COMP peripheral  */
    COMP->CSR &= (uint32_t)(~((uint32_t)1<<COMP_Selection));
  }
}
 80006b0:	4770      	bx	lr
    COMP->CSR &= (uint32_t)(~((uint32_t)1<<COMP_Selection));
 80006b2:	4083      	lsls	r3, r0
 80006b4:	6811      	ldr	r1, [r2, #0]
 80006b6:	4399      	bics	r1, r3
 80006b8:	6011      	str	r1, [r2, #0]
}
 80006ba:	e7f9      	b.n	80006b0 <COMP_Cmd+0x10>
 80006bc:	4001001c 	.word	0x4001001c

080006c0 <COMP_SwitchCmd>:
  * @note   When enabled, the SW1 is closed; PA1 is connected to PA4
  * @note   When disabled, the SW1 switch is open; PA1 is disconnected from PA4
  * @retval None
  */
void COMP_SwitchCmd(FunctionalState NewState)
{
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <COMP_SwitchCmd+0x18>)
 80006c2:	2202      	movs	r2, #2
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Close SW1 switch */
    COMP->CSR |= (uint32_t) (COMP_CSR_COMP1SW1);
 80006c4:	6819      	ldr	r1, [r3, #0]
  if (NewState != DISABLE)
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d002      	beq.n	80006d0 <COMP_SwitchCmd+0x10>
    COMP->CSR |= (uint32_t) (COMP_CSR_COMP1SW1);
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Open SW1 switch */
    COMP->CSR &= (uint32_t)(~COMP_CSR_COMP1SW1);
  }
}
 80006ce:	4770      	bx	lr
    COMP->CSR &= (uint32_t)(~COMP_CSR_COMP1SW1);
 80006d0:	4391      	bics	r1, r2
 80006d2:	6019      	str	r1, [r3, #0]
}
 80006d4:	e7fb      	b.n	80006ce <COMP_SwitchCmd+0xe>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	4001001c 	.word	0x4001001c

080006dc <COMP_GetOutputLevel>:

  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Check if selected comparator output is high */
  if ((COMP->CSR & (COMP_CSR_COMP1OUT<<COMP_Selection)) != 0)
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	01d2      	lsls	r2, r2, #7
 80006e0:	0011      	movs	r1, r2
 80006e2:	4081      	lsls	r1, r0
 80006e4:	0008      	movs	r0, r1
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <COMP_GetOutputLevel+0x18>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4018      	ands	r0, r3
 80006ec:	d000      	beq.n	80006f0 <COMP_GetOutputLevel+0x14>
  {
    compout = COMP_OutputLevel_High;
 80006ee:	0010      	movs	r0, r2
    compout = COMP_OutputLevel_Low;
  }

  /* Return the comparator output level */
  return (uint32_t)(compout);
}
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	4001001c 	.word	0x4001001c

080006f8 <COMP_WindowCmd>:
  *           @arg ENABLE: COMP1 and COMP2 non inverting inputs are connected together.
  *           @arg DISABLE: OMP1 and COMP2 non inverting inputs are disconnected.
  * @retval None
  */
void COMP_WindowCmd(FunctionalState NewState)
{
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <COMP_WindowCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d005      	beq.n	800070a <COMP_WindowCmd+0x12>
  {
    /* Enable the window mode */
    COMP->CSR |= (uint32_t) COMP_CSR_WNDWEN;
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	6819      	ldr	r1, [r3, #0]
 8000702:	0412      	lsls	r2, r2, #16
 8000704:	430a      	orrs	r2, r1
  }
  else
  {
    /* Disable the window mode */
    COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWEN);
 8000706:	601a      	str	r2, [r3, #0]
  }
}
 8000708:	4770      	bx	lr
    COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWEN);
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4902      	ldr	r1, [pc, #8]	; (8000718 <COMP_WindowCmd+0x20>)
 800070e:	400a      	ands	r2, r1
 8000710:	e7f9      	b.n	8000706 <COMP_WindowCmd+0xe>
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	4001001c 	.word	0x4001001c
 8000718:	ff7fffff 	.word	0xff7fffff

0800071c <COMP_LockConfig>:
{
  /* Check the parameter */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Set the lock bit corresponding to selected comparator */
  COMP->CSR |= (uint32_t) (COMP_CSR_COMP1LOCK<<COMP_Selection);
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	4083      	lsls	r3, r0
 8000722:	4a02      	ldr	r2, [pc, #8]	; (800072c <COMP_LockConfig+0x10>)
 8000724:	6811      	ldr	r1, [r2, #0]
 8000726:	430b      	orrs	r3, r1
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	4770      	bx	lr
 800072c:	4001001c 	.word	0x4001001c

08000730 <CRC_DeInit>:
  * @retval None
  */
void CRC_DeInit(void)
{
  /* Set DR register to reset value */
  CRC->DR = 0xFFFFFFFF;
 8000730:	2201      	movs	r2, #1
  /* Reset IDR register */
  CRC->IDR = 0x00;
 8000732:	2100      	movs	r1, #0
  CRC->DR = 0xFFFFFFFF;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <CRC_DeInit+0x14>)
 8000736:	4252      	negs	r2, r2
 8000738:	601a      	str	r2, [r3, #0]
  CRC->IDR = 0x00;
 800073a:	7119      	strb	r1, [r3, #4]
  /* Set INIT register to reset value */
  CRC->INIT = 0xFFFFFFFF;
 800073c:	611a      	str	r2, [r3, #16]
  /* Reset the CRC calculation unit */
  CRC->CR = CRC_CR_RESET;
 800073e:	3202      	adds	r2, #2
 8000740:	609a      	str	r2, [r3, #8]
}
 8000742:	4770      	bx	lr
 8000744:	40023000 	.word	0x40023000

08000748 <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8000748:	2201      	movs	r2, #1
 800074a:	4b01      	ldr	r3, [pc, #4]	; (8000750 <CRC_ResetDR+0x8>)
 800074c:	609a      	str	r2, [r3, #8]
}
 800074e:	4770      	bx	lr
 8000750:	40023000 	.word	0x40023000

08000754 <CRC_ReverseInputDataSelect>:

  /* Get CR register value */
  tmpcr = CRC->CR;

  /* Reset REV_IN bits */
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
 8000754:	2160      	movs	r1, #96	; 0x60
  tmpcr = CRC->CR;
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <CRC_ReverseInputDataSelect+0x10>)
 8000758:	6893      	ldr	r3, [r2, #8]
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
 800075a:	438b      	bics	r3, r1
  /* Set the reverse operation */
  tmpcr |= (uint32_t)CRC_ReverseInputData;
 800075c:	4318      	orrs	r0, r3

  /* Write to CR register */
  CRC->CR = (uint32_t)tmpcr;
 800075e:	6090      	str	r0, [r2, #8]
}
 8000760:	4770      	bx	lr
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40023000 	.word	0x40023000

08000768 <CRC_ReverseOutputDataCmd>:
  * @param  NewState: new state of the reverse operation on output data.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRC_ReverseOutputDataCmd(FunctionalState NewState)
{
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <CRC_ReverseOutputDataCmd+0x18>)
 800076a:	2280      	movs	r2, #128	; 0x80
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable reverse operation on output data */
    CRC->CR |= CRC_CR_REV_OUT;
 800076c:	6899      	ldr	r1, [r3, #8]
  if (NewState != DISABLE)
 800076e:	2800      	cmp	r0, #0
 8000770:	d002      	beq.n	8000778 <CRC_ReverseOutputDataCmd+0x10>
    CRC->CR |= CRC_CR_REV_OUT;
 8000772:	430a      	orrs	r2, r1
 8000774:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable reverse operation on output data */
    CRC->CR &= (uint32_t)~((uint32_t)CRC_CR_REV_OUT);
  }
}
 8000776:	4770      	bx	lr
    CRC->CR &= (uint32_t)~((uint32_t)CRC_CR_REV_OUT);
 8000778:	4391      	bics	r1, r2
 800077a:	6099      	str	r1, [r3, #8]
}
 800077c:	e7fb      	b.n	8000776 <CRC_ReverseOutputDataCmd+0xe>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40023000 	.word	0x40023000

08000784 <CRC_SetInitRegister>:
  * @param  CRC_InitValue: Programmable initial CRC value
  * @retval None
  */
void CRC_SetInitRegister(uint32_t CRC_InitValue)
{
  CRC->INIT = CRC_InitValue;
 8000784:	4b01      	ldr	r3, [pc, #4]	; (800078c <CRC_SetInitRegister+0x8>)
 8000786:	6118      	str	r0, [r3, #16]
}
 8000788:	4770      	bx	lr
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40023000 	.word	0x40023000

08000790 <CRC_CalcCRC>:
  * @param  CRC_Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t CRC_Data)
{
  CRC->DR = CRC_Data;
 8000790:	4b01      	ldr	r3, [pc, #4]	; (8000798 <CRC_CalcCRC+0x8>)
 8000792:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 8000794:	6818      	ldr	r0, [r3, #0]
}
 8000796:	4770      	bx	lr
 8000798:	40023000 	.word	0x40023000

0800079c <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 800079c:	0089      	lsls	r1, r1, #2
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <CRC_CalcBlockCRC+0x14>)
 80007a0:	1841      	adds	r1, r0, r1
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 80007a2:	4288      	cmp	r0, r1
 80007a4:	d101      	bne.n	80007aa <CRC_CalcBlockCRC+0xe>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 80007a6:	6818      	ldr	r0, [r3, #0]
}
 80007a8:	4770      	bx	lr
    CRC->DR = pBuffer[index];
 80007aa:	c804      	ldmia	r0!, {r2}
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	e7f8      	b.n	80007a2 <CRC_CalcBlockCRC+0x6>
 80007b0:	40023000 	.word	0x40023000

080007b4 <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 80007b4:	4b01      	ldr	r3, [pc, #4]	; (80007bc <CRC_GetCRC+0x8>)
 80007b6:	6818      	ldr	r0, [r3, #0]
}
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40023000 	.word	0x40023000

080007c0 <CRC_SetIDRegister>:
  * @param  CRC_IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t CRC_IDValue)
{
  CRC->IDR = CRC_IDValue;
 80007c0:	4b01      	ldr	r3, [pc, #4]	; (80007c8 <CRC_SetIDRegister+0x8>)
 80007c2:	7118      	strb	r0, [r3, #4]
}
 80007c4:	4770      	bx	lr
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40023000 	.word	0x40023000

080007cc <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 80007cc:	4b01      	ldr	r3, [pc, #4]	; (80007d4 <CRC_GetIDRegister+0x8>)
 80007ce:	7918      	ldrb	r0, [r3, #4]
 80007d0:	b2c0      	uxtb	r0, r0
}
 80007d2:	4770      	bx	lr
 80007d4:	40023000 	.word	0x40023000

080007d8 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80007d8:	b510      	push	{r4, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80007da:	2480      	movs	r4, #128	; 0x80
 80007dc:	05a4      	lsls	r4, r4, #22
 80007de:	0020      	movs	r0, r4
 80007e0:	2101      	movs	r1, #1
 80007e2:	f001 fa69 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80007e6:	2100      	movs	r1, #0
 80007e8:	0020      	movs	r0, r4
 80007ea:	f001 fa65 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
}
 80007ee:	bd10      	pop	{r4, pc}

080007f0 <DAC_Init>:
  /*---------------------------- DAC CR Configuration ------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;

  /* Clear BOFFx, TENx, TSELx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80007f0:	223e      	movs	r2, #62	; 0x3e
 80007f2:	4082      	lsls	r2, r0
{
 80007f4:	b510      	push	{r4, lr}
  tmpreg1 = DAC->CR;
 80007f6:	4c05      	ldr	r4, [pc, #20]	; (800080c <DAC_Init+0x1c>)
 80007f8:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80007fa:	4393      	bics	r3, r2
 80007fc:	001a      	movs	r2, r3

  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_OutputBuffer);
 80007fe:	680b      	ldr	r3, [r1, #0]
 8000800:	6849      	ldr	r1, [r1, #4]
 8000802:	430b      	orrs	r3, r1

  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000804:	4083      	lsls	r3, r0
 8000806:	4313      	orrs	r3, r2

  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000808:	6023      	str	r3, [r4, #0]
}
 800080a:	bd10      	pop	{r4, pc}
 800080c:	40007400 	.word	0x40007400

08000810 <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8000810:	2300      	movs	r3, #0
 8000812:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000814:	6043      	str	r3, [r0, #4]
}
 8000816:	4770      	bx	lr

08000818 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <DAC_Cmd+0x1c>)
 800081a:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800081c:	2900      	cmp	r1, #0
 800081e:	d004      	beq.n	800082a <DAC_Cmd+0x12>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000820:	4083      	lsls	r3, r0
 8000822:	6811      	ldr	r1, [r2, #0]
 8000824:	430b      	orrs	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000828:	4770      	bx	lr
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800082a:	4083      	lsls	r3, r0
 800082c:	6811      	ldr	r1, [r2, #0]
 800082e:	4399      	bics	r1, r3
 8000830:	6011      	str	r1, [r2, #0]
}
 8000832:	e7f9      	b.n	8000828 <DAC_Cmd+0x10>
 8000834:	40007400 	.word	0x40007400

08000838 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <DAC_SoftwareTriggerCmd+0x20>)
 800083a:	0900      	lsrs	r0, r0, #4
 800083c:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800083e:	2900      	cmp	r1, #0
 8000840:	d004      	beq.n	800084c <DAC_SoftwareTriggerCmd+0x14>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8000842:	4083      	lsls	r3, r0
 8000844:	6851      	ldr	r1, [r2, #4]
 8000846:	430b      	orrs	r3, r1
 8000848:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 800084a:	4770      	bx	lr
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 800084c:	4083      	lsls	r3, r0
 800084e:	6851      	ldr	r1, [r2, #4]
 8000850:	4399      	bics	r1, r3
 8000852:	6051      	str	r1, [r2, #4]
}
 8000854:	e7f9      	b.n	800084a <DAC_SoftwareTriggerCmd+0x12>
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40007400 	.word	0x40007400

0800085c <DAC_SetChannel1Data>:
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
  __IO uint32_t tmp = 0;
 800085c:	2300      	movs	r3, #0
{  
 800085e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000860:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <DAC_SetChannel1Data+0x1c>)
 8000864:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000866:	9b01      	ldr	r3, [sp, #4]
 8000868:	3308      	adds	r3, #8
 800086a:	1818      	adds	r0, r3, r0
 800086c:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800086e:	9b01      	ldr	r3, [sp, #4]
 8000870:	6019      	str	r1, [r3, #0]
}
 8000872:	b002      	add	sp, #8
 8000874:	4770      	bx	lr
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40007400 	.word	0x40007400

0800087c <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
  __IO uint32_t tmp = 0;
 800087c:	2300      	movs	r3, #0
{
 800087e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000880:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <DAC_GetDataOutputValue+0x20>)
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8000884:	0880      	lsrs	r0, r0, #2
  tmp = (uint32_t) DAC_BASE ;
 8000886:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8000888:	9b01      	ldr	r3, [sp, #4]
 800088a:	332c      	adds	r3, #44	; 0x2c
 800088c:	18c0      	adds	r0, r0, r3
 800088e:	9001      	str	r0, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8000890:	9b01      	ldr	r3, [sp, #4]
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	b280      	uxth	r0, r0
}
 8000896:	b002      	add	sp, #8
 8000898:	4770      	bx	lr
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40007400 	.word	0x40007400

080008a0 <DAC_DMACmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   The DAC channel1 is mapped on DMA1 channel3 which must be already configured. 
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <DAC_DMACmd+0x20>)
 80008a4:	015b      	lsls	r3, r3, #5
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d004      	beq.n	80008b4 <DAC_DMACmd+0x14>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80008aa:	4083      	lsls	r3, r0
 80008ac:	6811      	ldr	r1, [r2, #0]
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 80008b2:	4770      	bx	lr
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80008b4:	4083      	lsls	r3, r0
 80008b6:	6811      	ldr	r1, [r2, #0]
 80008b8:	4399      	bics	r1, r3
 80008ba:	6011      	str	r1, [r2, #0]
}
 80008bc:	e7f9      	b.n	80008b2 <DAC_DMACmd+0x12>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40007400 	.word	0x40007400

080008c4 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <DAC_ITConfig+0x18>)
 80008c6:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d003      	beq.n	80008d4 <DAC_ITConfig+0x10>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4311      	orrs	r1, r2
 80008d0:	6019      	str	r1, [r3, #0]
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
  }
}
 80008d2:	4770      	bx	lr
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	438a      	bics	r2, r1
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	e7fa      	b.n	80008d2 <DAC_ITConfig+0xe>
 80008dc:	40007400 	.word	0x40007400

080008e0 <DAC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 80008e0:	4081      	lsls	r1, r0
 80008e2:	0008      	movs	r0, r1
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <DAC_GetFlagStatus+0x14>)
 80008e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e8:	4018      	ands	r0, r3
 80008ea:	1e41      	subs	r1, r0, #1
 80008ec:	4188      	sbcs	r0, r1
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 80008ee:	b2c0      	uxtb	r0, r0
}
 80008f0:	4770      	bx	lr
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40007400 	.word	0x40007400

080008f8 <DAC_ClearFlag>:
 80008f8:	4081      	lsls	r1, r0
 80008fa:	4b01      	ldr	r3, [pc, #4]	; (8000900 <DAC_ClearFlag+0x8>)
 80008fc:	6359      	str	r1, [r3, #52]	; 0x34
 80008fe:	4770      	bx	lr
 8000900:	40007400 	.word	0x40007400

08000904 <DAC_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8000904:	4081      	lsls	r1, r0
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <DAC_GetITStatus+0x18>)
 8000908:	2000      	movs	r0, #0
 800090a:	681a      	ldr	r2, [r3, #0]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	420b      	tst	r3, r1
 8000910:	d003      	beq.n	800091a <DAC_GetITStatus+0x16>
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8000912:	4011      	ands	r1, r2
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8000914:	1e48      	subs	r0, r1, #1
 8000916:	4181      	sbcs	r1, r0
 8000918:	b2c8      	uxtb	r0, r1
    /* DAC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_IT status */
  return  bitstatus;
}
 800091a:	4770      	bx	lr
 800091c:	40007400 	.word	0x40007400

08000920 <DAC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8000920:	4081      	lsls	r1, r0
 8000922:	4b01      	ldr	r3, [pc, #4]	; (8000928 <DAC_ClearITPendingBit+0x8>)
 8000924:	6359      	str	r1, [r3, #52]	; 0x34
}
 8000926:	4770      	bx	lr
 8000928:	40007400 	.word	0x40007400

0800092c <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <DBGMCU_GetREVID+0x8>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	0c00      	lsrs	r0, r0, #16
}
 8000932:	4770      	bx	lr
 8000934:	40015800 	.word	0x40015800

08000938 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <DBGMCU_GetDEVID+0xc>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	0500      	lsls	r0, r0, #20
 800093e:	0d00      	lsrs	r0, r0, #20
}
 8000940:	4770      	bx	lr
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40015800 	.word	0x40015800

08000948 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <DBGMCU_Config+0x14>)
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800094a:	685a      	ldr	r2, [r3, #4]
  if (NewState != DISABLE)
 800094c:	2900      	cmp	r1, #0
 800094e:	d002      	beq.n	8000956 <DBGMCU_Config+0xe>
    DBGMCU->CR |= DBGMCU_Periph;
 8000950:	4310      	orrs	r0, r2
 8000952:	6058      	str	r0, [r3, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 8000954:	4770      	bx	lr
    DBGMCU->CR &= ~DBGMCU_Periph;
 8000956:	4382      	bics	r2, r0
 8000958:	605a      	str	r2, [r3, #4]
}
 800095a:	e7fb      	b.n	8000954 <DBGMCU_Config+0xc>
 800095c:	40015800 	.word	0x40015800

08000960 <DBGMCU_APB1PeriphConfig>:
  * @param  NewState: new state of the specified APB1 peripheral in Debug mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <DBGMCU_APB1PeriphConfig+0x14>)
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8000962:	689a      	ldr	r2, [r3, #8]
  if (NewState != DISABLE)
 8000964:	2900      	cmp	r1, #0
 8000966:	d002      	beq.n	800096e <DBGMCU_APB1PeriphConfig+0xe>
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8000968:	4310      	orrs	r0, r2
 800096a:	6098      	str	r0, [r3, #8]
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
  }
}
 800096c:	4770      	bx	lr
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800096e:	4382      	bics	r2, r0
 8000970:	609a      	str	r2, [r3, #8]
}
 8000972:	e7fb      	b.n	800096c <DBGMCU_APB1PeriphConfig+0xc>
 8000974:	40015800 	.word	0x40015800

08000978 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified APB2 peripheral in Debug mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <DBGMCU_APB2PeriphConfig+0x14>)
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 800097a:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 800097c:	2900      	cmp	r1, #0
 800097e:	d002      	beq.n	8000986 <DBGMCU_APB2PeriphConfig+0xe>
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8000980:	4310      	orrs	r0, r2
 8000982:	60d8      	str	r0, [r3, #12]
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
  }
}
 8000984:	4770      	bx	lr
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8000986:	4382      	bics	r2, r0
 8000988:	60da      	str	r2, [r3, #12]
}
 800098a:	e7fb      	b.n	8000984 <DBGMCU_APB2PeriphConfig+0xc>
 800098c:	40015800 	.word	0x40015800

08000990 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000990:	6803      	ldr	r3, [r0, #0]
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <DMA_DeInit+0x64>)
 8000994:	4013      	ands	r3, r2
 8000996:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 800099c:	6043      	str	r3, [r0, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 800099e:	6083      	str	r3, [r0, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80009a0:	60c3      	str	r3, [r0, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <DMA_DeInit+0x68>)
 80009a4:	4298      	cmp	r0, r3
 80009a6:	d105      	bne.n	80009b4 <DMA_DeInit+0x24>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 80009a8:	230f      	movs	r3, #15
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <DMA_DeInit+0x6c>)
 80009ac:	6851      	ldr	r1, [r2, #4]
  else
  {
    if (DMAy_Channelx == DMA1_Channel5) 
    {
      /* Reset interrupt pending bits for DMA1 Channel5 */
      DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6053      	str	r3, [r2, #4]
    }
  }
}
 80009b2:	4770      	bx	lr
  else if (DMAy_Channelx == DMA1_Channel2)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <DMA_DeInit+0x70>)
 80009b6:	4298      	cmp	r0, r3
 80009b8:	d103      	bne.n	80009c2 <DMA_DeInit+0x32>
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <DMA_DeInit+0x6c>)
 80009bc:	23f0      	movs	r3, #240	; 0xf0
 80009be:	6851      	ldr	r1, [r2, #4]
 80009c0:	e7f5      	b.n	80009ae <DMA_DeInit+0x1e>
  else if (DMAy_Channelx == DMA1_Channel3)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <DMA_DeInit+0x74>)
 80009c4:	4298      	cmp	r0, r3
 80009c6:	d104      	bne.n	80009d2 <DMA_DeInit+0x42>
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 80009c8:	23f0      	movs	r3, #240	; 0xf0
 80009ca:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <DMA_DeInit+0x6c>)
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	6851      	ldr	r1, [r2, #4]
 80009d0:	e7ed      	b.n	80009ae <DMA_DeInit+0x1e>
  else if (DMAy_Channelx == DMA1_Channel4)
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <DMA_DeInit+0x78>)
 80009d4:	4298      	cmp	r0, r3
 80009d6:	d104      	bne.n	80009e2 <DMA_DeInit+0x52>
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 80009d8:	23f0      	movs	r3, #240	; 0xf0
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <DMA_DeInit+0x6c>)
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	6851      	ldr	r1, [r2, #4]
 80009e0:	e7e5      	b.n	80009ae <DMA_DeInit+0x1e>
    if (DMAy_Channelx == DMA1_Channel5) 
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <DMA_DeInit+0x7c>)
 80009e4:	4298      	cmp	r0, r3
 80009e6:	d1e4      	bne.n	80009b2 <DMA_DeInit+0x22>
      DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 80009e8:	23f0      	movs	r3, #240	; 0xf0
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <DMA_DeInit+0x6c>)
 80009ec:	031b      	lsls	r3, r3, #12
 80009ee:	6851      	ldr	r1, [r2, #4]
 80009f0:	e7dd      	b.n	80009ae <DMA_DeInit+0x1e>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	0000fffe 	.word	0x0000fffe
 80009f8:	40020008 	.word	0x40020008
 80009fc:	40020000 	.word	0x40020000
 8000a00:	4002001c 	.word	0x4002001c
 8000a04:	40020030 	.word	0x40020030
 8000a08:	40020044 	.word	0x40020044
 8000a0c:	40020058 	.word	0x40020058

08000a10 <DMA_Init>:
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000a10:	6802      	ldr	r2, [r0, #0]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <DMA_Init+0x38>)
{
 8000a14:	b510      	push	{r4, lr}
  tmpreg &= CCR_CLEAR_MASK;
 8000a16:	401a      	ands	r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000a18:	6a0c      	ldr	r4, [r1, #32]
 8000a1a:	688b      	ldr	r3, [r1, #8]
 8000a1c:	4323      	orrs	r3, r4
 8000a1e:	690c      	ldr	r4, [r1, #16]
 8000a20:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a22:	694c      	ldr	r4, [r1, #20]
 8000a24:	4323      	orrs	r3, r4
 8000a26:	698c      	ldr	r4, [r1, #24]
 8000a28:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a2a:	69cc      	ldr	r4, [r1, #28]
 8000a2c:	4323      	orrs	r3, r4
 8000a2e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000a30:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000a32:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8000a34:	4323      	orrs	r3, r4
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000a36:	4313      	orrs	r3, r2

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000a38:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000a3a:	68cb      	ldr	r3, [r1, #12]
 8000a3c:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000a3e:	680b      	ldr	r3, [r1, #0]
 8000a40:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000a42:	684b      	ldr	r3, [r1, #4]
 8000a44:	60c3      	str	r3, [r0, #12]
}
 8000a46:	bd10      	pop	{r4, pc}
 8000a48:	ffff800f 	.word	0xffff800f

08000a4c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	6003      	str	r3, [r0, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8000a50:	6043      	str	r3, [r0, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8000a52:	6083      	str	r3, [r0, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000a54:	60c3      	str	r3, [r0, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000a56:	6103      	str	r3, [r0, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000a58:	6143      	str	r3, [r0, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000a5a:	6183      	str	r3, [r0, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000a5c:	61c3      	str	r3, [r0, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8000a5e:	6203      	str	r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000a60:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8000a62:	6283      	str	r3, [r0, #40]	; 0x28
}
 8000a64:	4770      	bx	lr

08000a66 <DMA_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a66:	2900      	cmp	r1, #0
 8000a68:	d004      	beq.n	8000a74 <DMA_Cmd+0xe>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	6802      	ldr	r2, [r0, #0]
 8000a6e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000a70:	6003      	str	r3, [r0, #0]
  }
}
 8000a72:	4770      	bx	lr
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000a74:	6803      	ldr	r3, [r0, #0]
 8000a76:	4a01      	ldr	r2, [pc, #4]	; (8000a7c <DMA_Cmd+0x16>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	e7f9      	b.n	8000a70 <DMA_Cmd+0xa>
 8000a7c:	0000fffe 	.word	0x0000fffe

08000a80 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8000a80:	6041      	str	r1, [r0, #4]
}
 8000a82:	4770      	bx	lr

08000a84 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8000a84:	6840      	ldr	r0, [r0, #4]
 8000a86:	b280      	uxth	r0, r0
}
 8000a88:	4770      	bx	lr

08000a8a <DMA_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000a8a:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d002      	beq.n	8000a96 <DMA_ITConfig+0xc>
    DMAy_Channelx->CCR |= DMA_IT;
 8000a90:	4319      	orrs	r1, r3
 8000a92:	6001      	str	r1, [r0, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000a94:	4770      	bx	lr
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000a96:	438b      	bics	r3, r1
 8000a98:	6003      	str	r3, [r0, #0]
}
 8000a9a:	e7fb      	b.n	8000a94 <DMA_ITConfig+0xa>

08000a9c <DMA_ClearFlag>:
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <DMA_ClearFlag+0x8>)
 8000a9e:	6058      	str	r0, [r3, #4]
 8000aa0:	4770      	bx	lr
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <DMA_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Check the status of the specified DMA interrupt */
  if ((DMA1->ISR & DMA_IT) != (uint32_t)RESET)
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <DMA_GetITStatus+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4018      	ands	r0, r3
 8000aae:	1e43      	subs	r3, r0, #1
 8000ab0:	4198      	sbcs	r0, r3
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8000ab2:	b2c0      	uxtb	r0, r0
}
 8000ab4:	4770      	bx	lr
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40020000 	.word	0x40020000

08000abc <DMA_GetFlagStatus>:
 8000abc:	b510      	push	{r4, lr}
 8000abe:	f7ff fff3 	bl	8000aa8 <DMA_GetITStatus>
 8000ac2:	bd10      	pop	{r4, pc}

08000ac4 <DMA_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Clear the selected DMA interrupt pending bits */
  DMA1->IFCR = DMA_IT;
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <DMA_ClearITPendingBit+0x8>)
 8000ac6:	6058      	str	r0, [r3, #4]
}
 8000ac8:	4770      	bx	lr
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40020000 	.word	0x40020000

08000ad0 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x0F940000;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <EXTI_DeInit+0x14>)
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <EXTI_DeInit+0x18>)
 8000ad4:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8000ada:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8000adc:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x006BFFFF;
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <EXTI_DeInit+0x1c>)
 8000ae0:	615a      	str	r2, [r3, #20]
}
 8000ae2:	4770      	bx	lr
 8000ae4:	40010400 	.word	0x40010400
 8000ae8:	0f940000 	.word	0x0f940000
 8000aec:	006bffff 	.word	0x006bffff

08000af0 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000af0:	7983      	ldrb	r3, [r0, #6]
{
 8000af2:	b530      	push	{r4, r5, lr}
 8000af4:	6801      	ldr	r1, [r0, #0]
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d024      	beq.n	8000b44 <EXTI_Init+0x54>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000afa:	43cd      	mvns	r5, r1
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <EXTI_Init+0x60>)
 8000afe:	681c      	ldr	r4, [r3, #0]
 8000b00:	402c      	ands	r4, r5
 8000b02:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	402a      	ands	r2, r5
 8000b08:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
 8000b0a:	7902      	ldrb	r2, [r0, #4]
 8000b0c:	18d2      	adds	r2, r2, r3

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b0e:	6814      	ldr	r4, [r2, #0]
 8000b10:	4321      	orrs	r1, r4
 8000b12:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b14:	6802      	ldr	r2, [r0, #0]
 8000b16:	689c      	ldr	r4, [r3, #8]
 8000b18:	43d5      	mvns	r5, r2
 8000b1a:	402c      	ands	r4, r5
 8000b1c:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b1e:	68d9      	ldr	r1, [r3, #12]
 8000b20:	4029      	ands	r1, r5
 8000b22:	60d9      	str	r1, [r3, #12]

    /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000b24:	7941      	ldrb	r1, [r0, #5]
 8000b26:	2910      	cmp	r1, #16
 8000b28:	d106      	bne.n	8000b38 <EXTI_Init+0x48>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000b2a:	6899      	ldr	r1, [r3, #8]
 8000b2c:	4311      	orrs	r1, r2
 8000b2e:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000b30:	68d9      	ldr	r1, [r3, #12]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000b36:	bd30      	pop	{r4, r5, pc}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <EXTI_Init+0x60>)
 8000b3a:	18cb      	adds	r3, r1, r3
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	430a      	orrs	r2, r1
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	e7f8      	b.n	8000b36 <EXTI_Init+0x46>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000b44:	4a02      	ldr	r2, [pc, #8]	; (8000b50 <EXTI_Init+0x60>)
 8000b46:	7903      	ldrb	r3, [r0, #4]
 8000b48:	189b      	adds	r3, r3, r2
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	438a      	bics	r2, r1
 8000b4e:	e7f7      	b.n	8000b40 <EXTI_Init+0x50>
 8000b50:	40010400 	.word	0x40010400

08000b54 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000b54:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8000b56:	220c      	movs	r2, #12
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000b58:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000b5a:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8000b5c:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8000b5e:	7183      	strb	r3, [r0, #6]
}
 8000b60:	4770      	bx	lr

08000b62 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
 8000b62:	4a02      	ldr	r2, [pc, #8]	; (8000b6c <EXTI_GenerateSWInterrupt+0xa>)
 8000b64:	6913      	ldr	r3, [r2, #16]
 8000b66:	4318      	orrs	r0, r3
 8000b68:	6110      	str	r0, [r2, #16]
}
 8000b6a:	4770      	bx	lr
 8000b6c:	40010400 	.word	0x40010400

08000b70 <EXTI_ClearFlag>:
 8000b70:	4b01      	ldr	r3, [pc, #4]	; (8000b78 <EXTI_ClearFlag+0x8>)
 8000b72:	6158      	str	r0, [r3, #20]
 8000b74:	4770      	bx	lr
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40010400 	.word	0x40010400

08000b7c <EXTI_GetITStatus>:
{
   ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <EXTI_GetITStatus+0x10>)
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	4018      	ands	r0, r3
 8000b82:	1e43      	subs	r3, r0, #1
 8000b84:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8000b86:	b2c0      	uxtb	r0, r0
    
}
 8000b88:	4770      	bx	lr
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40010400 	.word	0x40010400

08000b90 <EXTI_GetFlagStatus>:
 8000b90:	b510      	push	{r4, lr}
 8000b92:	f7ff fff3 	bl	8000b7c <EXTI_GetITStatus>
 8000b96:	bd10      	pop	{r4, pc}

08000b98 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <EXTI_ClearITPendingBit+0x8>)
 8000b9a:	6158      	str	r0, [r3, #20]
}
 8000b9c:	4770      	bx	lr
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40010400 	.word	0x40010400

08000ba4 <FLASH_SetLatency>:

  /* Read the ACR register */
  tmpreg = FLASH->ACR;  

  /* Sets the Latency value */
  tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
 8000ba4:	2101      	movs	r1, #1
  tmpreg = FLASH->ACR;  
 8000ba6:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <FLASH_SetLatency+0x10>)
 8000ba8:	6813      	ldr	r3, [r2, #0]
  tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
 8000baa:	438b      	bics	r3, r1
  tmpreg |= FLASH_Latency;
 8000bac:	4318      	orrs	r0, r3

  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8000bae:	6010      	str	r0, [r2, #0]
}
 8000bb0:	4770      	bx	lr
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the FLASH prefetch buffer.
  *          This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <FLASH_PrefetchBufferCmd+0x18>)
 8000bba:	2210      	movs	r2, #16
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000bbc:	6819      	ldr	r1, [r3, #0]
  if(NewState != DISABLE)
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d002      	beq.n	8000bc8 <FLASH_PrefetchBufferCmd+0x10>
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
  }
}
 8000bc6:	4770      	bx	lr
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 8000bc8:	4391      	bics	r1, r2
 8000bca:	6019      	str	r1, [r3, #0]
}
 8000bcc:	e7fb      	b.n	8000bc6 <FLASH_PrefetchBufferCmd+0xe>
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;

  if ((FLASH->ACR & FLASH_ACR_PRFTBS) != (uint32_t)RESET)
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <FLASH_GetPrefetchBufferStatus+0xc>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	0680      	lsls	r0, r0, #26
  else
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
 8000bda:	0fc0      	lsrs	r0, r0, #31
}
 8000bdc:	4770      	bx	lr
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40022000 	.word	0x40022000

08000be4 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <FLASH_Unlock+0x14>)
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	0612      	lsls	r2, r2, #24
 8000bea:	d503      	bpl.n	8000bf4 <FLASH_Unlock+0x10>
  {
    /* Unlocking the program memory access */
    FLASH->KEYR = FLASH_FKEY1;
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <FLASH_Unlock+0x18>)
 8000bee:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_FKEY2;
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <FLASH_Unlock+0x1c>)
 8000bf2:	605a      	str	r2, [r3, #4]
  }
}
 8000bf4:	4770      	bx	lr
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40022000 	.word	0x40022000
 8000bfc:	45670123 	.word	0x45670123
 8000c00:	cdef89ab 	.word	0xcdef89ab

08000c04 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH control register and program memory access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	4a02      	ldr	r2, [pc, #8]	; (8000c10 <FLASH_Lock+0xc>)
 8000c08:	6911      	ldr	r1, [r2, #16]
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	6113      	str	r3, [r2, #16]
}
 8000c0e:	4770      	bx	lr
 8000c10:	40022000 	.word	0x40022000

08000c14 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <FLASH_OB_Unlock+0x14>)
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	0592      	lsls	r2, r2, #22
 8000c1a:	d403      	bmi.n	8000c24 <FLASH_OB_Unlock+0x10>
  { 
    /* Unlocking the option bytes block access */
    FLASH->OPTKEYR = FLASH_OPTKEY1;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <FLASH_OB_Unlock+0x18>)
 8000c1e:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPTKEY2;
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <FLASH_OB_Unlock+0x1c>)
 8000c22:	609a      	str	r2, [r3, #8]
  }
}
 8000c24:	4770      	bx	lr
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	45670123 	.word	0x45670123
 8000c30:	cdef89ab 	.word	0xcdef89ab

08000c34 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTWREN Bit to lock the option bytes block access */
  FLASH->CR &= ~FLASH_CR_OPTWRE;
 8000c34:	4a02      	ldr	r2, [pc, #8]	; (8000c40 <FLASH_OB_Lock+0xc>)
 8000c36:	4903      	ldr	r1, [pc, #12]	; (8000c44 <FLASH_OB_Lock+0x10>)
 8000c38:	6913      	ldr	r3, [r2, #16]
 8000c3a:	400b      	ands	r3, r1
 8000c3c:	6113      	str	r3, [r2, #16]
}
 8000c3e:	4770      	bx	lr
 8000c40:	40022000 	.word	0x40022000
 8000c44:	fffffdff 	.word	0xfffffdff

08000c48 <FLASH_OB_Launch>:
  * @retval None
  */
void FLASH_OB_Launch(void)
{
  /* Set the OBL_Launch bit to launch the option byte loading */
  FLASH->CR |= FLASH_CR_OBL_LAUNCH;
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <FLASH_OB_Launch+0x10>)
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	6911      	ldr	r1, [r2, #16]
 8000c50:	430b      	orrs	r3, r1
 8000c52:	6113      	str	r3, [r2, #16]
}
 8000c54:	4770      	bx	lr
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40022000 	.word	0x40022000

08000c5c <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes .
  */
uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OBR >> 8);
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <FLASH_OB_GetUser+0xc>)
 8000c5e:	69d8      	ldr	r0, [r3, #28]
 8000c60:	0a00      	lsrs	r0, r0, #8
 8000c62:	b2c0      	uxtb	r0, r0
}
 8000c64:	4770      	bx	lr
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40022000 	.word	0x40022000

08000c6c <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <FLASH_OB_GetWRP+0x8>)
 8000c6e:	6a18      	ldr	r0, [r3, #32]
}
 8000c70:	4770      	bx	lr
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40022000 	.word	0x40022000

08000c78 <FLASH_OB_GetRDP>:
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;
  
  if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <FLASH_OB_GetRDP+0x10>)
 8000c7a:	69d8      	ldr	r0, [r3, #28]
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	4018      	ands	r0, r3
 8000c80:	1e43      	subs	r3, r0, #1
 8000c82:	4198      	sbcs	r0, r3
  }
  else
  {
    readstatus = RESET;
  }
  return readstatus;
 8000c84:	b2c0      	uxtb	r0, r0
}
 8000c86:	4770      	bx	lr
 8000c88:	40022000 	.word	0x40022000

08000c8c <FLASH_ITConfig>:
  *             @arg FLASH_IT_EOP: FLASH end of programming Interrupt
  *             @arg FLASH_IT_ERR: FLASH Error Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8000c8e:	691a      	ldr	r2, [r3, #16]
  if(NewState != DISABLE)
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d002      	beq.n	8000c9a <FLASH_ITConfig+0xe>
    FLASH->CR |= FLASH_IT;
 8000c94:	4310      	orrs	r0, r2
 8000c96:	6118      	str	r0, [r3, #16]
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
  }
}
 8000c98:	4770      	bx	lr
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8000c9a:	4382      	bics	r2, r0
 8000c9c:	611a      	str	r2, [r3, #16]
}
 8000c9e:	e7fb      	b.n	8000c98 <FLASH_ITConfig+0xc>
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <FLASH_GetFlagStatus+0x10>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	4018      	ands	r0, r3
 8000caa:	1e43      	subs	r3, r0, #1
 8000cac:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8000cae:	b2c0      	uxtb	r0, r0
}
 8000cb0:	4770      	bx	lr
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8000cb8:	4b01      	ldr	r3, [pc, #4]	; (8000cc0 <FLASH_ClearFlag+0x8>)
 8000cba:	60d8      	str	r0, [r3, #12]
}
 8000cbc:	4770      	bx	lr
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <FLASH_GetStatus>:
{
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    FLASHstatus = FLASH_BUSY;
 8000cc4:	2001      	movs	r0, #1
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <FLASH_GetStatus+0x20>)
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	4202      	tst	r2, r0
 8000ccc:	d109      	bne.n	8000ce2 <FLASH_GetStatus+0x1e>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8000cce:	68da      	ldr	r2, [r3, #12]
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8000cd0:	1800      	adds	r0, r0, r0
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8000cd2:	06d2      	lsls	r2, r2, #27
 8000cd4:	d405      	bmi.n	8000ce2 <FLASH_GetStatus+0x1e>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8000cd6:	68d8      	ldr	r0, [r3, #12]
 8000cd8:	2304      	movs	r3, #4
 8000cda:	4018      	ands	r0, r3
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8000cdc:	4243      	negs	r3, r0
 8000cde:	4158      	adcs	r0, r3
 8000ce0:	3003      	adds	r0, #3
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
}
 8000ce2:	4770      	bx	lr
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	0004      	movs	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8000cec:	f7ff ffea 	bl	8000cc4 <FLASH_GetStatus>
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000cf0:	2801      	cmp	r0, #1
 8000cf2:	d107      	bne.n	8000d04 <FLASH_WaitForLastOperation+0x1c>
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d101      	bne.n	8000cfc <FLASH_WaitForLastOperation+0x14>
    Timeout--;
  }
  
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8000cf8:	3004      	adds	r0, #4
  }
  /* Return the operation status */
  return status;
}
 8000cfa:	bd10      	pop	{r4, pc}
    status = FLASH_GetStatus();
 8000cfc:	f7ff ffe2 	bl	8000cc4 <FLASH_GetStatus>
    Timeout--;
 8000d00:	3c01      	subs	r4, #1
 8000d02:	e7f5      	b.n	8000cf0 <FLASH_WaitForLastOperation+0x8>
  if(Timeout == 0x00 )
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d1f8      	bne.n	8000cfa <FLASH_WaitForLastOperation+0x12>
    status = FLASH_TIMEOUT;
 8000d08:	2005      	movs	r0, #5
 8000d0a:	e7f6      	b.n	8000cfa <FLASH_WaitForLastOperation+0x12>

08000d0c <FLASH_ErasePage>:
{
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d10:	20b0      	movs	r0, #176	; 0xb0
 8000d12:	0300      	lsls	r0, r0, #12
 8000d14:	f7ff ffe8 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000d18:	2804      	cmp	r0, #4
 8000d1a:	d110      	bne.n	8000d3e <FLASH_ErasePage+0x32>
    FLASH->CR |= FLASH_CR_PER;
 8000d1c:	2502      	movs	r5, #2
 8000d1e:	4c08      	ldr	r4, [pc, #32]	; (8000d40 <FLASH_ErasePage+0x34>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d20:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_PER;
 8000d22:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d24:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_PER;
 8000d26:	432b      	orrs	r3, r5
 8000d28:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000d2a:	2340      	movs	r3, #64	; 0x40
    FLASH->AR  = Page_Address;
 8000d2c:	6166      	str	r6, [r4, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8000d2e:	6922      	ldr	r2, [r4, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d34:	f7ff ffd8 	bl	8000ce8 <FLASH_WaitForLastOperation>
    FLASH->CR &= ~FLASH_CR_PER;
 8000d38:	6923      	ldr	r3, [r4, #16]
 8000d3a:	43ab      	bics	r3, r5
 8000d3c:	6123      	str	r3, [r4, #16]
}
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
 8000d40:	40022000 	.word	0x40022000

08000d44 <FLASH_EraseAllPages>:
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d44:	20b0      	movs	r0, #176	; 0xb0
{
 8000d46:	b570      	push	{r4, r5, r6, lr}
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d48:	0300      	lsls	r0, r0, #12
 8000d4a:	f7ff ffcd 	bl	8000ce8 <FLASH_WaitForLastOperation>
 8000d4e:	0005      	movs	r5, r0
  if(status == FLASH_COMPLETE)
 8000d50:	2804      	cmp	r0, #4
 8000d52:	d10e      	bne.n	8000d72 <FLASH_EraseAllPages+0x2e>
     FLASH->CR |= FLASH_CR_MER;
 8000d54:	4c07      	ldr	r4, [pc, #28]	; (8000d74 <FLASH_EraseAllPages+0x30>)
 8000d56:	6923      	ldr	r3, [r4, #16]
 8000d58:	4318      	orrs	r0, r3
     FLASH->CR |= FLASH_CR_STRT;
 8000d5a:	2340      	movs	r3, #64	; 0x40
     FLASH->CR |= FLASH_CR_MER;
 8000d5c:	6120      	str	r0, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d5e:	20b0      	movs	r0, #176	; 0xb0
     FLASH->CR |= FLASH_CR_STRT;
 8000d60:	6922      	ldr	r2, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d62:	0300      	lsls	r0, r0, #12
     FLASH->CR |= FLASH_CR_STRT;
 8000d64:	4313      	orrs	r3, r2
 8000d66:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d68:	f7ff ffbe 	bl	8000ce8 <FLASH_WaitForLastOperation>
    FLASH->CR &= ~FLASH_CR_MER;
 8000d6c:	6923      	ldr	r3, [r4, #16]
 8000d6e:	43ab      	bics	r3, r5
 8000d70:	6123      	str	r3, [r4, #16]
}
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	40022000 	.word	0x40022000

08000d78 <FLASH_ProgramWord>:
{
 8000d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d7a:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d7c:	20b0      	movs	r0, #176	; 0xb0
  __IO uint32_t tmp = 0;
 8000d7e:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d80:	0300      	lsls	r0, r0, #12
{
 8000d82:	000d      	movs	r5, r1
  __IO uint32_t tmp = 0;
 8000d84:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d86:	f7ff ffaf 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000d8a:	2804      	cmp	r0, #4
 8000d8c:	d118      	bne.n	8000dc0 <FLASH_ProgramWord+0x48>
    FLASH->CR |= FLASH_CR_PG;
 8000d8e:	2701      	movs	r7, #1
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d90:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_PG;
 8000d92:	4c0c      	ldr	r4, [pc, #48]	; (8000dc4 <FLASH_ProgramWord+0x4c>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d94:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_PG;
 8000d96:	6923      	ldr	r3, [r4, #16]
 8000d98:	433b      	orrs	r3, r7
 8000d9a:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8000d9c:	b2ab      	uxth	r3, r5
 8000d9e:	8033      	strh	r3, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000da0:	f7ff ffa2 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 8000da4:	2804      	cmp	r0, #4
 8000da6:	d108      	bne.n	8000dba <FLASH_ProgramWord+0x42>
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000da8:	20b0      	movs	r0, #176	; 0xb0
      tmp = Address + 2;
 8000daa:	3602      	adds	r6, #2
 8000dac:	9601      	str	r6, [sp, #4]
      *(__IO uint16_t*) tmp = Data >> 16;
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	0c2d      	lsrs	r5, r5, #16
 8000db2:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000db4:	0300      	lsls	r0, r0, #12
 8000db6:	f7ff ff97 	bl	8000ce8 <FLASH_WaitForLastOperation>
      FLASH->CR &= ~FLASH_CR_PG;
 8000dba:	6923      	ldr	r3, [r4, #16]
 8000dbc:	43bb      	bics	r3, r7
 8000dbe:	6123      	str	r3, [r4, #16]
}
 8000dc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <FLASH_ProgramHalfWord>:
{
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000dcc:	20b0      	movs	r0, #176	; 0xb0
 8000dce:	0300      	lsls	r0, r0, #12
{
 8000dd0:	000f      	movs	r7, r1
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000dd2:	f7ff ff89 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000dd6:	2804      	cmp	r0, #4
 8000dd8:	d10c      	bne.n	8000df4 <FLASH_ProgramHalfWord+0x2c>
    FLASH->CR |= FLASH_CR_PG;
 8000dda:	2501      	movs	r5, #1
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000ddc:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_PG;
 8000dde:	4c06      	ldr	r4, [pc, #24]	; (8000df8 <FLASH_ProgramHalfWord+0x30>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000de0:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_PG;
 8000de2:	6923      	ldr	r3, [r4, #16]
 8000de4:	432b      	orrs	r3, r5
 8000de6:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8000de8:	8037      	strh	r7, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000dea:	f7ff ff7d 	bl	8000ce8 <FLASH_WaitForLastOperation>
    FLASH->CR &= ~FLASH_CR_PG;
 8000dee:	6923      	ldr	r3, [r4, #16]
 8000df0:	43ab      	bics	r3, r5
 8000df2:	6123      	str	r3, [r4, #16]
}
 8000df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	40022000 	.word	0x40022000

08000dfc <FLASH_OB_Erase>:
{
 8000dfc:	b570      	push	{r4, r5, r6, lr}
  if(FLASH_OB_GetRDP() != RESET)
 8000dfe:	f7ff ff3b 	bl	8000c78 <FLASH_OB_GetRDP>
    rdptmp = 0x00;  
 8000e02:	4243      	negs	r3, r0
 8000e04:	4158      	adcs	r0, r3
  uint16_t rdptmp = OB_RDP_Level_0;
 8000e06:	25aa      	movs	r5, #170	; 0xaa
    rdptmp = 0x00;  
 8000e08:	4240      	negs	r0, r0
 8000e0a:	4005      	ands	r5, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e0c:	20b0      	movs	r0, #176	; 0xb0
 8000e0e:	0300      	lsls	r0, r0, #12
 8000e10:	f7ff ff6a 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000e14:	2804      	cmp	r0, #4
 8000e16:	d120      	bne.n	8000e5a <FLASH_OB_Erase+0x5e>
    FLASH->CR |= FLASH_CR_OPTER;
 8000e18:	2620      	movs	r6, #32
 8000e1a:	4c13      	ldr	r4, [pc, #76]	; (8000e68 <FLASH_OB_Erase+0x6c>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e1c:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTER;
 8000e1e:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e20:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTER;
 8000e22:	4333      	orrs	r3, r6
 8000e24:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000e26:	2340      	movs	r3, #64	; 0x40
 8000e28:	6922      	ldr	r2, [r4, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e2e:	f7ff ff5b 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 8000e32:	2804      	cmp	r0, #4
 8000e34:	d112      	bne.n	8000e5c <FLASH_OB_Erase+0x60>
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e36:	20b0      	movs	r0, #176	; 0xb0
      FLASH->CR &= ~FLASH_CR_OPTER;
 8000e38:	6923      	ldr	r3, [r4, #16]
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e3a:	0300      	lsls	r0, r0, #12
      FLASH->CR &= ~FLASH_CR_OPTER;
 8000e3c:	43b3      	bics	r3, r6
 8000e3e:	6123      	str	r3, [r4, #16]
      FLASH->CR |= FLASH_CR_OPTPG;
 8000e40:	6923      	ldr	r3, [r4, #16]
 8000e42:	3e10      	subs	r6, #16
 8000e44:	4333      	orrs	r3, r6
 8000e46:	6123      	str	r3, [r4, #16]
      OB->RDP = (uint16_t)rdptmp; 
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <FLASH_OB_Erase+0x70>)
 8000e4a:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e4c:	f7ff ff4c 	bl	8000ce8 <FLASH_WaitForLastOperation>
      if(status != FLASH_TIMEOUT)
 8000e50:	2805      	cmp	r0, #5
 8000e52:	d002      	beq.n	8000e5a <FLASH_OB_Erase+0x5e>
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8000e54:	6923      	ldr	r3, [r4, #16]
 8000e56:	43b3      	bics	r3, r6
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8000e58:	6123      	str	r3, [r4, #16]
}
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
      if (status != FLASH_TIMEOUT)
 8000e5c:	2805      	cmp	r0, #5
 8000e5e:	d0fc      	beq.n	8000e5a <FLASH_OB_Erase+0x5e>
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8000e60:	2210      	movs	r2, #16
 8000e62:	6923      	ldr	r3, [r4, #16]
 8000e64:	4393      	bics	r3, r2
 8000e66:	e7f7      	b.n	8000e58 <FLASH_OB_Erase+0x5c>
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	1ffff800 	.word	0x1ffff800

08000e70 <FLASH_OB_EnableWRP>:
{
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e74:	20b0      	movs	r0, #176	; 0xb0
 8000e76:	0300      	lsls	r0, r0, #12
 8000e78:	f7ff ff36 	bl	8000ce8 <FLASH_WaitForLastOperation>
 8000e7c:	0006      	movs	r6, r0
  if(status == FLASH_COMPLETE)
 8000e7e:	2804      	cmp	r0, #4
 8000e80:	d122      	bne.n	8000ec8 <FLASH_OB_EnableWRP+0x58>
  OB_WRP = (uint32_t)(~OB_WRP);
 8000e82:	43e4      	mvns	r4, r4
    FLASH->CR |= FLASH_CR_OPTPG;
 8000e84:	2310      	movs	r3, #16
 8000e86:	4d11      	ldr	r5, [pc, #68]	; (8000ecc <FLASH_OB_EnableWRP+0x5c>)
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 8000e88:	b2e2      	uxtb	r2, r4
    FLASH->CR |= FLASH_CR_OPTPG;
 8000e8a:	6929      	ldr	r1, [r5, #16]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	612b      	str	r3, [r5, #16]
    if(WRP0_Data != 0xFF)
 8000e90:	2aff      	cmp	r2, #255	; 0xff
 8000e92:	d10b      	bne.n	8000eac <FLASH_OB_EnableWRP+0x3c>
  WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
 8000e94:	0a24      	lsrs	r4, r4, #8
 8000e96:	b2e4      	uxtb	r4, r4
 8000e98:	0030      	movs	r0, r6
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8000e9a:	2cff      	cmp	r4, #255	; 0xff
 8000e9c:	d010      	beq.n	8000ec0 <FLASH_OB_EnableWRP+0x50>
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e9e:	20b0      	movs	r0, #176	; 0xb0
      OB->WRP1 = WRP1_Data;
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <FLASH_OB_EnableWRP+0x60>)
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000ea2:	0300      	lsls	r0, r0, #12
      OB->WRP1 = WRP1_Data;
 8000ea4:	815c      	strh	r4, [r3, #10]
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000ea6:	f7ff ff1f 	bl	8000ce8 <FLASH_WaitForLastOperation>
 8000eaa:	e007      	b.n	8000ebc <FLASH_OB_EnableWRP+0x4c>
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000eac:	20b0      	movs	r0, #176	; 0xb0
      OB->WRP0 = WRP0_Data;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <FLASH_OB_EnableWRP+0x60>)
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000eb0:	0300      	lsls	r0, r0, #12
      OB->WRP0 = WRP0_Data;
 8000eb2:	811a      	strh	r2, [r3, #8]
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000eb4:	f7ff ff18 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8000eb8:	2804      	cmp	r0, #4
 8000eba:	d0eb      	beq.n	8000e94 <FLASH_OB_EnableWRP+0x24>
    if(status != FLASH_TIMEOUT)
 8000ebc:	2805      	cmp	r0, #5
 8000ebe:	d003      	beq.n	8000ec8 <FLASH_OB_EnableWRP+0x58>
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	692b      	ldr	r3, [r5, #16]
 8000ec4:	4393      	bics	r3, r2
 8000ec6:	612b      	str	r3, [r5, #16]
}
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	1ffff800 	.word	0x1ffff800

08000ed4 <FLASH_OB_RDPConfig>:
{
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000ed8:	20b0      	movs	r0, #176	; 0xb0
 8000eda:	0300      	lsls	r0, r0, #12
 8000edc:	f7ff ff04 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000ee0:	2804      	cmp	r0, #4
 8000ee2:	d121      	bne.n	8000f28 <FLASH_OB_RDPConfig+0x54>
    FLASH->CR |= FLASH_CR_OPTER;
 8000ee4:	2520      	movs	r5, #32
 8000ee6:	4c11      	ldr	r4, [pc, #68]	; (8000f2c <FLASH_OB_RDPConfig+0x58>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000ee8:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTER;
 8000eea:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000eec:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTER;
 8000eee:	432b      	orrs	r3, r5
 8000ef0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	6922      	ldr	r2, [r4, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000efa:	f7ff fef5 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 8000efe:	2804      	cmp	r0, #4
 8000f00:	d10d      	bne.n	8000f1e <FLASH_OB_RDPConfig+0x4a>
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 8000f02:	20b0      	movs	r0, #176	; 0xb0
      FLASH->CR &= ~FLASH_CR_OPTER;
 8000f04:	6923      	ldr	r3, [r4, #16]
      OB->RDP = OB_RDP;
 8000f06:	b2b6      	uxth	r6, r6
      FLASH->CR &= ~FLASH_CR_OPTER;
 8000f08:	43ab      	bics	r3, r5
 8000f0a:	6123      	str	r3, [r4, #16]
      FLASH->CR |= FLASH_CR_OPTPG;
 8000f0c:	6923      	ldr	r3, [r4, #16]
 8000f0e:	3d10      	subs	r5, #16
 8000f10:	432b      	orrs	r3, r5
 8000f12:	6123      	str	r3, [r4, #16]
      OB->RDP = OB_RDP;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <FLASH_OB_RDPConfig+0x5c>)
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 8000f16:	0300      	lsls	r0, r0, #12
      OB->RDP = OB_RDP;
 8000f18:	801e      	strh	r6, [r3, #0]
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 8000f1a:	f7ff fee5 	bl	8000ce8 <FLASH_WaitForLastOperation>
      if(status != FLASH_TIMEOUT)
 8000f1e:	2805      	cmp	r0, #5
 8000f20:	d002      	beq.n	8000f28 <FLASH_OB_RDPConfig+0x54>
        FLASH->CR &= ~FLASH_CR_OPTER;
 8000f22:	6923      	ldr	r3, [r4, #16]
 8000f24:	43ab      	bics	r3, r5
 8000f26:	6123      	str	r3, [r4, #16]
}
 8000f28:	bd70      	pop	{r4, r5, r6, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40022000 	.word	0x40022000
 8000f30:	1ffff800 	.word	0x1ffff800

08000f34 <FLASH_OB_UserConfig>:
{
 8000f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f36:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f38:	20b0      	movs	r0, #176	; 0xb0
 8000f3a:	0300      	lsls	r0, r0, #12
{
 8000f3c:	9101      	str	r1, [sp, #4]
 8000f3e:	0017      	movs	r7, r2
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f40:	f7ff fed2 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000f44:	2804      	cmp	r0, #4
 8000f46:	d116      	bne.n	8000f76 <FLASH_OB_UserConfig+0x42>
    FLASH->CR |= FLASH_CR_OPTPG; 
 8000f48:	2610      	movs	r6, #16
 8000f4a:	4d0b      	ldr	r5, [pc, #44]	; (8000f78 <FLASH_OB_UserConfig+0x44>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f4c:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTPG; 
 8000f4e:	692b      	ldr	r3, [r5, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f50:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTPG; 
 8000f52:	4333      	orrs	r3, r6
 8000f54:	612b      	str	r3, [r5, #16]
    OB->USER = (uint16_t)((uint16_t)(OB_IWDG | OB_STOP) | (uint16_t)(OB_STDBY | 0xF8));
 8000f56:	2308      	movs	r3, #8
 8000f58:	425b      	negs	r3, r3
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	9b01      	ldr	r3, [sp, #4]
 8000f5e:	433b      	orrs	r3, r7
 8000f60:	431c      	orrs	r4, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <FLASH_OB_UserConfig+0x48>)
 8000f64:	b2e4      	uxtb	r4, r4
 8000f66:	805c      	strh	r4, [r3, #2]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f68:	f7ff febe 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 8000f6c:	2805      	cmp	r0, #5
 8000f6e:	d002      	beq.n	8000f76 <FLASH_OB_UserConfig+0x42>
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8000f70:	692b      	ldr	r3, [r5, #16]
 8000f72:	43b3      	bics	r3, r6
 8000f74:	612b      	str	r3, [r5, #16]
}
 8000f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	1ffff800 	.word	0x1ffff800

08000f80 <FLASH_OB_BOOTConfig>:
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f84:	20b0      	movs	r0, #176	; 0xb0
 8000f86:	0300      	lsls	r0, r0, #12
 8000f88:	f7ff feae 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000f8c:	2804      	cmp	r0, #4
 8000f8e:	d111      	bne.n	8000fb4 <FLASH_OB_BOOTConfig+0x34>
    FLASH->CR |= FLASH_CR_OPTPG;
 8000f90:	2510      	movs	r5, #16
 8000f92:	4c09      	ldr	r4, [pc, #36]	; (8000fb8 <FLASH_OB_BOOTConfig+0x38>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f94:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTPG;
 8000f96:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f98:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTPG;
 8000f9a:	432b      	orrs	r3, r5
 8000f9c:	6123      	str	r3, [r4, #16]
    OB->USER = OB_BOOT1 | 0xEF;
 8000f9e:	23ef      	movs	r3, #239	; 0xef
 8000fa0:	431e      	orrs	r6, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <FLASH_OB_BOOTConfig+0x3c>)
 8000fa4:	805e      	strh	r6, [r3, #2]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000fa6:	f7ff fe9f 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 8000faa:	2805      	cmp	r0, #5
 8000fac:	d002      	beq.n	8000fb4 <FLASH_OB_BOOTConfig+0x34>
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8000fae:	6923      	ldr	r3, [r4, #16]
 8000fb0:	43ab      	bics	r3, r5
 8000fb2:	6123      	str	r3, [r4, #16]
}
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	40022000 	.word	0x40022000
 8000fbc:	1ffff800 	.word	0x1ffff800

08000fc0 <FLASH_OB_VDDAConfig>:
{
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000fc4:	20b0      	movs	r0, #176	; 0xb0
 8000fc6:	0300      	lsls	r0, r0, #12
 8000fc8:	f7ff fe8e 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000fcc:	2804      	cmp	r0, #4
 8000fce:	d111      	bne.n	8000ff4 <FLASH_OB_VDDAConfig+0x34>
    FLASH->CR |= FLASH_CR_OPTPG; 
 8000fd0:	2510      	movs	r5, #16
 8000fd2:	4c09      	ldr	r4, [pc, #36]	; (8000ff8 <FLASH_OB_VDDAConfig+0x38>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000fd4:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTPG; 
 8000fd6:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000fd8:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTPG; 
 8000fda:	432b      	orrs	r3, r5
 8000fdc:	6123      	str	r3, [r4, #16]
    OB->USER = OB_VDDA_ANALOG | 0xDF;
 8000fde:	23df      	movs	r3, #223	; 0xdf
 8000fe0:	431e      	orrs	r6, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <FLASH_OB_VDDAConfig+0x3c>)
 8000fe4:	805e      	strh	r6, [r3, #2]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000fe6:	f7ff fe7f 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 8000fea:	2805      	cmp	r0, #5
 8000fec:	d002      	beq.n	8000ff4 <FLASH_OB_VDDAConfig+0x34>
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8000fee:	6923      	ldr	r3, [r4, #16]
 8000ff0:	43ab      	bics	r3, r5
 8000ff2:	6123      	str	r3, [r4, #16]
}
 8000ff4:	bd70      	pop	{r4, r5, r6, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	1ffff800 	.word	0x1ffff800

08001000 <FLASH_OB_SRAMParityConfig>:
{
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001004:	20b0      	movs	r0, #176	; 0xb0
 8001006:	0300      	lsls	r0, r0, #12
 8001008:	f7ff fe6e 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800100c:	2804      	cmp	r0, #4
 800100e:	d111      	bne.n	8001034 <FLASH_OB_SRAMParityConfig+0x34>
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001010:	2510      	movs	r5, #16
 8001012:	4c09      	ldr	r4, [pc, #36]	; (8001038 <FLASH_OB_SRAMParityConfig+0x38>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001014:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001016:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001018:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTPG; 
 800101a:	432b      	orrs	r3, r5
 800101c:	6123      	str	r3, [r4, #16]
    OB->USER = OB_SRAM_Parity | 0xBF;
 800101e:	23bf      	movs	r3, #191	; 0xbf
 8001020:	431e      	orrs	r6, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <FLASH_OB_SRAMParityConfig+0x3c>)
 8001024:	805e      	strh	r6, [r3, #2]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001026:	f7ff fe5f 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 800102a:	2805      	cmp	r0, #5
 800102c:	d002      	beq.n	8001034 <FLASH_OB_SRAMParityConfig+0x34>
      FLASH->CR &= ~FLASH_CR_OPTPG;
 800102e:	6923      	ldr	r3, [r4, #16]
 8001030:	43ab      	bics	r3, r5
 8001032:	6123      	str	r3, [r4, #16]
}
 8001034:	bd70      	pop	{r4, r5, r6, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40022000 	.word	0x40022000
 800103c:	1ffff800 	.word	0x1ffff800

08001040 <FLASH_OB_WriteUser>:
{
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001044:	20b0      	movs	r0, #176	; 0xb0
 8001046:	0300      	lsls	r0, r0, #12
 8001048:	f7ff fe4e 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800104c:	2804      	cmp	r0, #4
 800104e:	d111      	bne.n	8001074 <FLASH_OB_WriteUser+0x34>
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001050:	2510      	movs	r5, #16
 8001052:	4c09      	ldr	r4, [pc, #36]	; (8001078 <FLASH_OB_WriteUser+0x38>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001054:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001056:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001058:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTPG; 
 800105a:	432b      	orrs	r3, r5
 800105c:	6123      	str	r3, [r4, #16]
    OB->USER = OB_USER | 0x88;
 800105e:	2388      	movs	r3, #136	; 0x88
 8001060:	431e      	orrs	r6, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <FLASH_OB_WriteUser+0x3c>)
 8001064:	805e      	strh	r6, [r3, #2]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001066:	f7ff fe3f 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 800106a:	2805      	cmp	r0, #5
 800106c:	d002      	beq.n	8001074 <FLASH_OB_WriteUser+0x34>
      FLASH->CR &= ~FLASH_CR_OPTPG;
 800106e:	6923      	ldr	r3, [r4, #16]
 8001070:	43ab      	bics	r3, r5
 8001072:	6123      	str	r3, [r4, #16]
}
 8001074:	bd70      	pop	{r4, r5, r6, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40022000 	.word	0x40022000
 800107c:	1ffff800 	.word	0x1ffff800

08001080 <FLASH_OB_ProgramData>:
{
 8001080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001082:	0007      	movs	r7, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001084:	20b0      	movs	r0, #176	; 0xb0
 8001086:	0300      	lsls	r0, r0, #12
{
 8001088:	000d      	movs	r5, r1
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800108a:	f7ff fe2d 	bl	8000ce8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800108e:	2804      	cmp	r0, #4
 8001090:	d10f      	bne.n	80010b2 <FLASH_OB_ProgramData+0x32>
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001092:	2610      	movs	r6, #16
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001094:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001096:	4c07      	ldr	r4, [pc, #28]	; (80010b4 <FLASH_OB_ProgramData+0x34>)
    *(__IO uint16_t*)Address = Data;
 8001098:	b2ad      	uxth	r5, r5
    FLASH->CR |= FLASH_CR_OPTPG; 
 800109a:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800109c:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_OPTPG; 
 800109e:	4333      	orrs	r3, r6
 80010a0:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 80010a2:	803d      	strh	r5, [r7, #0]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80010a4:	f7ff fe20 	bl	8000ce8 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 80010a8:	2805      	cmp	r0, #5
 80010aa:	d002      	beq.n	80010b2 <FLASH_OB_ProgramData+0x32>
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80010ac:	6923      	ldr	r3, [r4, #16]
 80010ae:	43b3      	bics	r3, r6
 80010b0:	6123      	str	r3, [r4, #16]
}
 80010b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b4:	40022000 	.word	0x40022000

080010b8 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80010b8:	2390      	movs	r3, #144	; 0x90
{
 80010ba:	b510      	push	{r4, lr}
  if(GPIOx == GPIOA)
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	4298      	cmp	r0, r3
 80010c0:	d10a      	bne.n	80010d8 <GPIO_DeInit+0x20>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80010c2:	2080      	movs	r0, #128	; 0x80
 80010c4:	2101      	movs	r1, #1
 80010c6:	0280      	lsls	r0, r0, #10
 80010c8:	f000 fdde 	bl	8001c88 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80010cc:	2080      	movs	r0, #128	; 0x80
 80010ce:	2100      	movs	r1, #0
 80010d0:	0280      	lsls	r0, r0, #10
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80010d2:	f000 fdd9 	bl	8001c88 <RCC_AHBPeriphResetCmd>
    }
  }
}
 80010d6:	bd10      	pop	{r4, pc}
  else if(GPIOx == GPIOB)
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <GPIO_DeInit+0x80>)
 80010da:	4298      	cmp	r0, r3
 80010dc:	d108      	bne.n	80010f0 <GPIO_DeInit+0x38>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80010de:	2080      	movs	r0, #128	; 0x80
 80010e0:	2101      	movs	r1, #1
 80010e2:	02c0      	lsls	r0, r0, #11
 80010e4:	f000 fdd0 	bl	8001c88 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80010e8:	2080      	movs	r0, #128	; 0x80
 80010ea:	2100      	movs	r1, #0
 80010ec:	02c0      	lsls	r0, r0, #11
 80010ee:	e7f0      	b.n	80010d2 <GPIO_DeInit+0x1a>
  else if(GPIOx == GPIOC)
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <GPIO_DeInit+0x84>)
 80010f2:	4298      	cmp	r0, r3
 80010f4:	d108      	bne.n	8001108 <GPIO_DeInit+0x50>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80010f6:	2080      	movs	r0, #128	; 0x80
 80010f8:	2101      	movs	r1, #1
 80010fa:	0300      	lsls	r0, r0, #12
 80010fc:	f000 fdc4 	bl	8001c88 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8001100:	2080      	movs	r0, #128	; 0x80
 8001102:	2100      	movs	r1, #0
 8001104:	0300      	lsls	r0, r0, #12
 8001106:	e7e4      	b.n	80010d2 <GPIO_DeInit+0x1a>
  else if(GPIOx == GPIOD)
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <GPIO_DeInit+0x88>)
 800110a:	4298      	cmp	r0, r3
 800110c:	d108      	bne.n	8001120 <GPIO_DeInit+0x68>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800110e:	2080      	movs	r0, #128	; 0x80
 8001110:	2101      	movs	r1, #1
 8001112:	0340      	lsls	r0, r0, #13
 8001114:	f000 fdb8 	bl	8001c88 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8001118:	2080      	movs	r0, #128	; 0x80
 800111a:	2100      	movs	r1, #0
 800111c:	0340      	lsls	r0, r0, #13
 800111e:	e7d8      	b.n	80010d2 <GPIO_DeInit+0x1a>
    if(GPIOx == GPIOF)
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <GPIO_DeInit+0x8c>)
 8001122:	4298      	cmp	r0, r3
 8001124:	d1d7      	bne.n	80010d6 <GPIO_DeInit+0x1e>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8001126:	2080      	movs	r0, #128	; 0x80
 8001128:	2101      	movs	r1, #1
 800112a:	03c0      	lsls	r0, r0, #15
 800112c:	f000 fdac 	bl	8001c88 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8001130:	2080      	movs	r0, #128	; 0x80
 8001132:	2100      	movs	r1, #0
 8001134:	03c0      	lsls	r0, r0, #15
 8001136:	e7cc      	b.n	80010d2 <GPIO_DeInit+0x1a>
 8001138:	48000400 	.word	0x48000400
 800113c:	48000800 	.word	0x48000800
 8001140:	48000c00 	.word	0x48000c00
 8001144:	48001400 	.word	0x48001400

08001148 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800114a:	680b      	ldr	r3, [r1, #0]
 800114c:	9301      	str	r3, [sp, #4]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800114e:	2300      	movs	r3, #0
    pos = ((uint32_t)0x01) << pinpos;
 8001150:	2501      	movs	r5, #1
 8001152:	409d      	lsls	r5, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001154:	9a01      	ldr	r2, [sp, #4]
 8001156:	402a      	ands	r2, r5

    if (currentpin == pos)
 8001158:	4295      	cmp	r5, r2
 800115a:	d12d      	bne.n	80011b8 <GPIO_Init+0x70>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800115c:	790a      	ldrb	r2, [r1, #4]
 800115e:	1e54      	subs	r4, r2, #1
 8001160:	2c01      	cmp	r4, #1
 8001162:	d816      	bhi.n	8001192 <GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001164:	6884      	ldr	r4, [r0, #8]
 8001166:	005f      	lsls	r7, r3, #1
 8001168:	0026      	movs	r6, r4
 800116a:	2403      	movs	r4, #3
 800116c:	40bc      	lsls	r4, r7
 800116e:	43a6      	bics	r6, r4
 8001170:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001172:	6884      	ldr	r4, [r0, #8]
 8001174:	46a4      	mov	ip, r4
 8001176:	794c      	ldrb	r4, [r1, #5]
 8001178:	40bc      	lsls	r4, r7
 800117a:	4667      	mov	r7, ip
 800117c:	433c      	orrs	r4, r7
 800117e:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8001180:	8884      	ldrh	r4, [r0, #4]
 8001182:	43ac      	bics	r4, r5
 8001184:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001186:	798d      	ldrb	r5, [r1, #6]
 8001188:	8884      	ldrh	r4, [r0, #4]
 800118a:	409d      	lsls	r5, r3
 800118c:	432c      	orrs	r4, r5
 800118e:	b2a4      	uxth	r4, r4
 8001190:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001192:	2403      	movs	r4, #3
 8001194:	005d      	lsls	r5, r3, #1
 8001196:	40ac      	lsls	r4, r5
 8001198:	43e4      	mvns	r4, r4

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800119a:	40aa      	lsls	r2, r5
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800119c:	6807      	ldr	r7, [r0, #0]
 800119e:	4027      	ands	r7, r4
 80011a0:	6007      	str	r7, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80011a2:	6807      	ldr	r7, [r0, #0]
 80011a4:	433a      	orrs	r2, r7
 80011a6:	6002      	str	r2, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80011a8:	68c2      	ldr	r2, [r0, #12]
 80011aa:	4014      	ands	r4, r2
 80011ac:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80011ae:	79ca      	ldrb	r2, [r1, #7]
 80011b0:	68c4      	ldr	r4, [r0, #12]
 80011b2:	40aa      	lsls	r2, r5
 80011b4:	4322      	orrs	r2, r4
 80011b6:	60c2      	str	r2, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80011b8:	3301      	adds	r3, #1
 80011ba:	2b10      	cmp	r3, #16
 80011bc:	d1c8      	bne.n	8001150 <GPIO_Init+0x8>
    }
  }
}
 80011be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080011c0 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 80011c2:	2201      	movs	r2, #1
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80011c4:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80011c6:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 80011c8:	7142      	strb	r2, [r0, #5]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80011ca:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80011cc:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80011ce:	71c3      	strb	r3, [r0, #7]
}
 80011d0:	4770      	bx	lr
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	0000ffff 	.word	0x0000ffff

080011d8 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 80011d8:	2380      	movs	r3, #128	; 0x80
{
 80011da:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80011e0:	9b01      	ldr	r3, [sp, #4]
 80011e2:	430b      	orrs	r3, r1
 80011e4:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80011e6:	9b01      	ldr	r3, [sp, #4]
 80011e8:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80011ea:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80011ec:	9b01      	ldr	r3, [sp, #4]
 80011ee:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80011f0:	69c3      	ldr	r3, [r0, #28]
 80011f2:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80011f4:	69c3      	ldr	r3, [r0, #28]
 80011f6:	9301      	str	r3, [sp, #4]
}
 80011f8:	b002      	add	sp, #8
 80011fa:	4770      	bx	lr

080011fc <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80011fc:	8a00      	ldrh	r0, [r0, #16]
 80011fe:	4008      	ands	r0, r1
 8001200:	1e41      	subs	r1, r0, #1
 8001202:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8001204:	b2c0      	uxtb	r0, r0
}
 8001206:	4770      	bx	lr

08001208 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001208:	8a00      	ldrh	r0, [r0, #16]
 800120a:	b280      	uxth	r0, r0
}
 800120c:	4770      	bx	lr

0800120e <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800120e:	8a80      	ldrh	r0, [r0, #20]
 8001210:	4008      	ands	r0, r1
 8001212:	1e41      	subs	r1, r0, #1
 8001214:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8001216:	b2c0      	uxtb	r0, r0
}
 8001218:	4770      	bx	lr

0800121a <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800121a:	8a80      	ldrh	r0, [r0, #20]
 800121c:	b280      	uxth	r0, r0
}
 800121e:	4770      	bx	lr

08001220 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8001220:	6181      	str	r1, [r0, #24]
}
 8001222:	4770      	bx	lr

08001224 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8001224:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8001226:	4770      	bx	lr

08001228 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001228:	2a00      	cmp	r2, #0
 800122a:	d001      	beq.n	8001230 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800122e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001230:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8001232:	e7fc      	b.n	800122e <GPIO_WriteBit+0x6>

08001234 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001234:	8281      	strh	r1, [r0, #20]
}
 8001236:	4770      	bx	lr

08001238 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001238:	2307      	movs	r3, #7
{
 800123a:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800123c:	240f      	movs	r4, #15
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800123e:	400b      	ands	r3, r1
 8001240:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001242:	409c      	lsls	r4, r3
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001244:	409a      	lsls	r2, r3
 8001246:	08c9      	lsrs	r1, r1, #3
 8001248:	0089      	lsls	r1, r1, #2
 800124a:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800124c:	6a01      	ldr	r1, [r0, #32]
 800124e:	43a1      	bics	r1, r4
 8001250:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001252:	6a01      	ldr	r1, [r0, #32]
 8001254:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001256:	6202      	str	r2, [r0, #32]
}
 8001258:	bd10      	pop	{r4, pc}
 800125a:	46c0      	nop			; (mov r8, r8)

0800125c <I2C_DeInit>:
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <I2C_DeInit+0x30>)
{
 800125e:	b510      	push	{r4, lr}
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001260:	2101      	movs	r1, #1
  if (I2Cx == I2C1)
 8001262:	4298      	cmp	r0, r3
 8001264:	d109      	bne.n	800127a <I2C_DeInit+0x1e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001266:	2080      	movs	r0, #128	; 0x80
 8001268:	0380      	lsls	r0, r0, #14
 800126a:	f000 fd25 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800126e:	2080      	movs	r0, #128	; 0x80
 8001270:	2100      	movs	r1, #0
 8001272:	0380      	lsls	r0, r0, #14
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8001274:	f000 fd20 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
  }
}
 8001278:	bd10      	pop	{r4, pc}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800127a:	2080      	movs	r0, #128	; 0x80
 800127c:	03c0      	lsls	r0, r0, #15
 800127e:	f000 fd1b 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8001282:	2080      	movs	r0, #128	; 0x80
 8001284:	2100      	movs	r1, #0
 8001286:	03c0      	lsls	r0, r0, #15
 8001288:	e7f4      	b.n	8001274 <I2C_DeInit+0x18>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	40005400 	.word	0x40005400

08001290 <I2C_Init>:
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001290:	2201      	movs	r2, #1
 8001292:	6803      	ldr	r3, [r0, #0]
{
 8001294:	b530      	push	{r4, r5, lr}
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001296:	4393      	bics	r3, r2
 8001298:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800129a:	6803      	ldr	r3, [r0, #0]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 800129c:	4c12      	ldr	r4, [pc, #72]	; (80012e8 <I2C_Init+0x58>)
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 800129e:	684d      	ldr	r5, [r1, #4]
  tmpreg &= CR1_CLEAR_MASK;
 80012a0:	401c      	ands	r4, r3
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 80012a2:	688b      	ldr	r3, [r1, #8]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	432b      	orrs	r3, r5
 80012a8:	4323      	orrs	r3, r4

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80012aa:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80012ac:	680c      	ldr	r4, [r1, #0]
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <I2C_Init+0x5c>)
 80012b0:	4023      	ands	r3, r4
 80012b2:	6103      	str	r3, [r0, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012b4:	6803      	ldr	r3, [r0, #0]
 80012b6:	431a      	orrs	r2, r3

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80012b8:	2300      	movs	r3, #0
  I2Cx->CR1 |= I2C_CR1_PE;
 80012ba:	6002      	str	r2, [r0, #0]
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80012bc:	6083      	str	r3, [r0, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80012be:	690a      	ldr	r2, [r1, #16]
  I2Cx->OAR2 = (uint32_t)tmpreg;
 80012c0:	60c3      	str	r3, [r0, #12]
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80012c2:	698b      	ldr	r3, [r1, #24]
 80012c4:	4313      	orrs	r3, r2
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 80012c6:	6083      	str	r3, [r0, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	6882      	ldr	r2, [r0, #8]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	4313      	orrs	r3, r2
 80012d0:	6083      	str	r3, [r0, #8]
  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 80012d2:	6803      	ldr	r3, [r0, #0]
 80012d4:	68ca      	ldr	r2, [r1, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80012da:	6843      	ldr	r3, [r0, #4]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <I2C_Init+0x60>)
 80012de:	4013      	ands	r3, r2
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 80012e0:	694a      	ldr	r2, [r1, #20]
 80012e2:	4313      	orrs	r3, r2
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80012e4:	6043      	str	r3, [r0, #4]
}
 80012e6:	bd30      	pop	{r4, r5, pc}
 80012e8:	00cfe0ff 	.word	0x00cfe0ff
 80012ec:	f0ffffff 	.word	0xf0ffffff
 80012f0:	07ff7fff 	.word	0x07ff7fff

080012f4 <I2C_StructInit>:
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80012f4:	2280      	movs	r2, #128	; 0x80
  I2C_InitStruct->I2C_Timing = 0;
 80012f6:	2300      	movs	r3, #0
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80012f8:	0212      	lsls	r2, r2, #8
  I2C_InitStruct->I2C_Timing = 0;
 80012fa:	6003      	str	r3, [r0, #0]
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 80012fc:	6043      	str	r3, [r0, #4]
  I2C_InitStruct->I2C_DigitalFilter = 0;
 80012fe:	6083      	str	r3, [r0, #8]
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001300:	60c3      	str	r3, [r0, #12]
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8001302:	6103      	str	r3, [r0, #16]
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8001304:	6142      	str	r2, [r0, #20]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001306:	6183      	str	r3, [r0, #24]
}
 8001308:	4770      	bx	lr

0800130a <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800130a:	2301      	movs	r3, #1
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800130c:	6802      	ldr	r2, [r0, #0]
  if (NewState != DISABLE)
 800130e:	2900      	cmp	r1, #0
 8001310:	d002      	beq.n	8001318 <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
 8001312:	4313      	orrs	r3, r2
 8001314:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  }
}
 8001316:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001318:	439a      	bics	r2, r3
 800131a:	6002      	str	r2, [r0, #0]
}
 800131c:	e7fb      	b.n	8001316 <I2C_Cmd+0xc>

0800131e <I2C_SoftwareResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Disable peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800131e:	2301      	movs	r3, #1
 8001320:	6802      	ldr	r2, [r0, #0]
 8001322:	439a      	bics	r2, r3
 8001324:	6002      	str	r2, [r0, #0]

  /* Perform a dummy read to delay the disable of peripheral for minimum
     3 APB clock cycles to perform the software reset functionality */
  *(__IO uint32_t *)(uint32_t)I2Cx; 
 8001326:	6802      	ldr	r2, [r0, #0]

  /* Enable peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001328:	6802      	ldr	r2, [r0, #0]
 800132a:	4313      	orrs	r3, r2
 800132c:	6003      	str	r3, [r0, #0]
}
 800132e:	4770      	bx	lr

08001330 <I2C_StretchClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001330:	2900      	cmp	r1, #0
 8001332:	d004      	beq.n	800133e <I2C_StretchClockCmd+0xe>
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <I2C_StretchClockCmd+0x18>)
 8001338:	4013      	ands	r3, r2
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800133a:	6003      	str	r3, [r0, #0]
  }
}
 800133c:	4770      	bx	lr
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	6802      	ldr	r2, [r0, #0]
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4313      	orrs	r3, r2
 8001346:	e7f8      	b.n	800133a <I2C_StretchClockCmd+0xa>
 8001348:	fffdffff 	.word	0xfffdffff

0800134c <I2C_StopModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800134c:	2900      	cmp	r1, #0
 800134e:	d005      	beq.n	800135c <I2C_StopModeCmd+0x10>
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	6802      	ldr	r2, [r0, #0]
 8001354:	02db      	lsls	r3, r3, #11
 8001356:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 8001358:	6003      	str	r3, [r0, #0]
  }
}
 800135a:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 800135c:	6803      	ldr	r3, [r0, #0]
 800135e:	4a01      	ldr	r2, [pc, #4]	; (8001364 <I2C_StopModeCmd+0x18>)
 8001360:	4013      	ands	r3, r2
 8001362:	e7f9      	b.n	8001358 <I2C_StopModeCmd+0xc>
 8001364:	fffbffff 	.word	0xfffbffff

08001368 <I2C_DualAddressCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001368:	2900      	cmp	r1, #0
 800136a:	d005      	beq.n	8001378 <I2C_DualAddressCmd+0x10>
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	68c2      	ldr	r2, [r0, #12]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 8001374:	60c3      	str	r3, [r0, #12]
  }
}    
 8001376:	4770      	bx	lr
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 8001378:	68c3      	ldr	r3, [r0, #12]
 800137a:	4a01      	ldr	r2, [pc, #4]	; (8001380 <I2C_DualAddressCmd+0x18>)
 800137c:	4013      	ands	r3, r2
 800137e:	e7f9      	b.n	8001374 <I2C_DualAddressCmd+0xc>
 8001380:	ffff7fff 	.word	0xffff7fff

08001384 <I2C_OwnAddress2Config>:
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 8001384:	b510      	push	{r4, lr}
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <I2C_OwnAddress2Config+0x1c>)
  tmpreg = I2Cx->OAR2;
 8001388:	68c4      	ldr	r4, [r0, #12]

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 800138a:	0212      	lsls	r2, r2, #8
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 800138c:	4023      	ands	r3, r4
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 800138e:	24e0      	movs	r4, #224	; 0xe0
 8001390:	00e4      	lsls	r4, r4, #3
 8001392:	4022      	ands	r2, r4
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 8001394:	24fe      	movs	r4, #254	; 0xfe
 8001396:	4021      	ands	r1, r4
 8001398:	4311      	orrs	r1, r2
 800139a:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800139c:	60c1      	str	r1, [r0, #12]
}
 800139e:	bd10      	pop	{r4, pc}
 80013a0:	fffff801 	.word	0xfffff801

080013a4 <I2C_GeneralCallCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d005      	beq.n	80013b4 <I2C_GeneralCallCmd+0x10>
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	6802      	ldr	r2, [r0, #0]
 80013ac:	031b      	lsls	r3, r3, #12
 80013ae:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 80013b0:	6003      	str	r3, [r0, #0]
  }
} 
 80013b2:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	4a01      	ldr	r2, [pc, #4]	; (80013bc <I2C_GeneralCallCmd+0x18>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	e7f9      	b.n	80013b0 <I2C_GeneralCallCmd+0xc>
 80013bc:	fff7ffff 	.word	0xfff7ffff

080013c0 <I2C_SlaveByteControlCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013c0:	2900      	cmp	r1, #0
 80013c2:	d005      	beq.n	80013d0 <I2C_SlaveByteControlCmd+0x10>
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	6802      	ldr	r2, [r0, #0]
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 80013cc:	6003      	str	r3, [r0, #0]
  }
}
 80013ce:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 80013d0:	6803      	ldr	r3, [r0, #0]
 80013d2:	4a01      	ldr	r2, [pc, #4]	; (80013d8 <I2C_SlaveByteControlCmd+0x18>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	e7f9      	b.n	80013cc <I2C_SlaveByteControlCmd+0xc>
 80013d8:	fffeffff 	.word	0xfffeffff

080013dc <I2C_SlaveAddressConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 80013dc:	6843      	ldr	r3, [r0, #4]

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 80013de:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 80013e0:	0a9b      	lsrs	r3, r3, #10
 80013e2:	029b      	lsls	r3, r3, #10
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 80013e4:	0d89      	lsrs	r1, r1, #22
 80013e6:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 80013e8:	6041      	str	r1, [r0, #4]
}
 80013ea:	4770      	bx	lr

080013ec <I2C_10BitAddressingModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d005      	beq.n	80013fc <I2C_10BitAddressingModeCmd+0x10>
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	6842      	ldr	r2, [r0, #4]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 80013f8:	6043      	str	r3, [r0, #4]
  }
} 
 80013fa:	4770      	bx	lr
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 80013fc:	6843      	ldr	r3, [r0, #4]
 80013fe:	4a01      	ldr	r2, [pc, #4]	; (8001404 <I2C_10BitAddressingModeCmd+0x18>)
 8001400:	4013      	ands	r3, r2
 8001402:	e7f9      	b.n	80013f8 <I2C_10BitAddressingModeCmd+0xc>
 8001404:	fffff7ff 	.word	0xfffff7ff

08001408 <I2C_AutoEndCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001408:	2900      	cmp	r1, #0
 800140a:	d005      	beq.n	8001418 <I2C_AutoEndCmd+0x10>
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	6842      	ldr	r2, [r0, #4]
 8001410:	049b      	lsls	r3, r3, #18
 8001412:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 8001414:	6043      	str	r3, [r0, #4]
  }
} 
 8001416:	4770      	bx	lr
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 8001418:	6843      	ldr	r3, [r0, #4]
 800141a:	4a01      	ldr	r2, [pc, #4]	; (8001420 <I2C_AutoEndCmd+0x18>)
 800141c:	4013      	ands	r3, r2
 800141e:	e7f9      	b.n	8001414 <I2C_AutoEndCmd+0xc>
 8001420:	fdffffff 	.word	0xfdffffff

08001424 <I2C_ReloadCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001424:	2900      	cmp	r1, #0
 8001426:	d005      	beq.n	8001434 <I2C_ReloadCmd+0x10>
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	6842      	ldr	r2, [r0, #4]
 800142c:	045b      	lsls	r3, r3, #17
 800142e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 8001430:	6043      	str	r3, [r0, #4]
  }
}
 8001432:	4770      	bx	lr
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 8001434:	6843      	ldr	r3, [r0, #4]
 8001436:	4a01      	ldr	r2, [pc, #4]	; (800143c <I2C_ReloadCmd+0x18>)
 8001438:	4013      	ands	r3, r2
 800143a:	e7f9      	b.n	8001430 <I2C_ReloadCmd+0xc>
 800143c:	feffffff 	.word	0xfeffffff

08001440 <I2C_NumberOfBytesConfig>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8001440:	6843      	ldr	r3, [r0, #4]

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8001442:	4a03      	ldr	r2, [pc, #12]	; (8001450 <I2C_NumberOfBytesConfig+0x10>)

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8001444:	0409      	lsls	r1, r1, #16
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8001446:	4013      	ands	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8001448:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 800144a:	6041      	str	r1, [r0, #4]
}  
 800144c:	4770      	bx	lr
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	ff00ffff 	.word	0xff00ffff

08001454 <I2C_MasterRequestConfig>:
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 8001454:	2900      	cmp	r1, #0
 8001456:	d104      	bne.n	8001462 <I2C_MasterRequestConfig+0xe>
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 8001458:	6843      	ldr	r3, [r0, #4]
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <I2C_MasterRequestConfig+0x18>)
 800145c:	4013      	ands	r3, r2
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 800145e:	6043      	str	r3, [r0, #4]
  }
}  
 8001460:	4770      	bx	lr
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	6842      	ldr	r2, [r0, #4]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4313      	orrs	r3, r2
 800146a:	e7f8      	b.n	800145e <I2C_MasterRequestConfig+0xa>
 800146c:	fffffbff 	.word	0xfffffbff

08001470 <I2C_GenerateSTART>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001470:	2900      	cmp	r1, #0
 8001472:	d005      	beq.n	8001480 <I2C_GenerateSTART+0x10>
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	6842      	ldr	r2, [r0, #4]
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 800147c:	6043      	str	r3, [r0, #4]
  }
}  
 800147e:	4770      	bx	lr
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 8001480:	6843      	ldr	r3, [r0, #4]
 8001482:	4a01      	ldr	r2, [pc, #4]	; (8001488 <I2C_GenerateSTART+0x18>)
 8001484:	4013      	ands	r3, r2
 8001486:	e7f9      	b.n	800147c <I2C_GenerateSTART+0xc>
 8001488:	ffffdfff 	.word	0xffffdfff

0800148c <I2C_GenerateSTOP>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800148c:	2900      	cmp	r1, #0
 800148e:	d005      	beq.n	800149c <I2C_GenerateSTOP+0x10>
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	6842      	ldr	r2, [r0, #4]
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 8001498:	6043      	str	r3, [r0, #4]
  }
}  
 800149a:	4770      	bx	lr
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 800149c:	6843      	ldr	r3, [r0, #4]
 800149e:	4a01      	ldr	r2, [pc, #4]	; (80014a4 <I2C_GenerateSTOP+0x18>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	e7f9      	b.n	8001498 <I2C_GenerateSTOP+0xc>
 80014a4:	ffffbfff 	.word	0xffffbfff

080014a8 <I2C_10BitAddressHeaderCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014a8:	2900      	cmp	r1, #0
 80014aa:	d005      	beq.n	80014b8 <I2C_10BitAddressHeaderCmd+0x10>
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	6842      	ldr	r2, [r0, #4]
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 80014b4:	6043      	str	r3, [r0, #4]
  }
}    
 80014b6:	4770      	bx	lr
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 80014b8:	6843      	ldr	r3, [r0, #4]
 80014ba:	4a01      	ldr	r2, [pc, #4]	; (80014c0 <I2C_10BitAddressHeaderCmd+0x18>)
 80014bc:	4013      	ands	r3, r2
 80014be:	e7f9      	b.n	80014b4 <I2C_10BitAddressHeaderCmd+0xc>
 80014c0:	ffffefff 	.word	0xffffefff

080014c4 <I2C_AcknowledgeConfig>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014c4:	2900      	cmp	r1, #0
 80014c6:	d004      	beq.n	80014d2 <I2C_AcknowledgeConfig+0xe>
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 80014c8:	6843      	ldr	r3, [r0, #4]
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <I2C_AcknowledgeConfig+0x18>)
 80014cc:	4013      	ands	r3, r2
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 80014ce:	6043      	str	r3, [r0, #4]
  }
}
 80014d0:	4770      	bx	lr
    I2Cx->CR2 |= I2C_CR2_NACK;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	6842      	ldr	r2, [r0, #4]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	4313      	orrs	r3, r2
 80014da:	e7f8      	b.n	80014ce <I2C_AcknowledgeConfig+0xa>
 80014dc:	ffff7fff 	.word	0xffff7fff

080014e0 <I2C_GetAddressMatched>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 80014e0:	23fe      	movs	r3, #254	; 0xfe
 80014e2:	6980      	ldr	r0, [r0, #24]
 80014e4:	0c00      	lsrs	r0, r0, #16
 80014e6:	4018      	ands	r0, r3
}
 80014e8:	4770      	bx	lr

080014ea <I2C_GetTransferDirection>:
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 80014ea:	6980      	ldr	r0, [r0, #24]
 80014ec:	03c0      	lsls	r0, r0, #15
    direction = I2C_Direction_Transmitter;
  }
  else
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
 80014ee:	0fc0      	lsrs	r0, r0, #31
 80014f0:	0280      	lsls	r0, r0, #10
  }  
  return direction;
}
 80014f2:	4770      	bx	lr

080014f4 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80014f4:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80014f6:	6845      	ldr	r5, [r0, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80014f8:	4c05      	ldr	r4, [pc, #20]	; (8001510 <I2C_TransferHandling+0x1c>)
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80014fa:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80014fc:	402c      	ands	r4, r5
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80014fe:	9d03      	ldr	r5, [sp, #12]
 8001500:	0d89      	lsrs	r1, r1, #22
 8001502:	432b      	orrs	r3, r5
 8001504:	4319      	orrs	r1, r3
 8001506:	0412      	lsls	r2, r2, #16
 8001508:	430a      	orrs	r2, r1
 800150a:	4322      	orrs	r2, r4
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 800150c:	6042      	str	r2, [r0, #4]
}
 800150e:	bd30      	pop	{r4, r5, pc}
 8001510:	fc009800 	.word	0xfc009800

08001514 <I2C_SMBusAlertCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001514:	2900      	cmp	r1, #0
 8001516:	d005      	beq.n	8001524 <I2C_SMBusAlertCmd+0x10>
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	6802      	ldr	r2, [r0, #0]
 800151c:	03db      	lsls	r3, r3, #15
 800151e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 8001520:	6003      	str	r3, [r0, #0]
  }
}
 8001522:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 8001524:	6803      	ldr	r3, [r0, #0]
 8001526:	4a01      	ldr	r2, [pc, #4]	; (800152c <I2C_SMBusAlertCmd+0x18>)
 8001528:	4013      	ands	r3, r2
 800152a:	e7f9      	b.n	8001520 <I2C_SMBusAlertCmd+0xc>
 800152c:	ffbfffff 	.word	0xffbfffff

08001530 <I2C_ClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001530:	2900      	cmp	r1, #0
 8001532:	d005      	beq.n	8001540 <I2C_ClockTimeoutCmd+0x10>
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	6942      	ldr	r2, [r0, #20]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 800153c:	6143      	str	r3, [r0, #20]
  }
}
 800153e:	4770      	bx	lr
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 8001540:	6943      	ldr	r3, [r0, #20]
 8001542:	4a01      	ldr	r2, [pc, #4]	; (8001548 <I2C_ClockTimeoutCmd+0x18>)
 8001544:	4013      	ands	r3, r2
 8001546:	e7f9      	b.n	800153c <I2C_ClockTimeoutCmd+0xc>
 8001548:	ffff7fff 	.word	0xffff7fff

0800154c <I2C_ExtendedClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800154c:	2900      	cmp	r1, #0
 800154e:	d005      	beq.n	800155c <I2C_ExtendedClockTimeoutCmd+0x10>
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	6942      	ldr	r2, [r0, #20]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 8001558:	6143      	str	r3, [r0, #20]
  }
}
 800155a:	4770      	bx	lr
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 800155c:	6943      	ldr	r3, [r0, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	e7f9      	b.n	8001558 <I2C_ExtendedClockTimeoutCmd+0xc>

08001564 <I2C_IdleClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001564:	2900      	cmp	r1, #0
 8001566:	d005      	beq.n	8001574 <I2C_IdleClockTimeoutCmd+0x10>
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	6942      	ldr	r2, [r0, #20]
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 8001570:	6143      	str	r3, [r0, #20]
  }
}
 8001572:	4770      	bx	lr
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 8001574:	6943      	ldr	r3, [r0, #20]
 8001576:	4a01      	ldr	r2, [pc, #4]	; (800157c <I2C_IdleClockTimeoutCmd+0x18>)
 8001578:	4013      	ands	r3, r2
 800157a:	e7f9      	b.n	8001570 <I2C_IdleClockTimeoutCmd+0xc>
 800157c:	ffffefff 	.word	0xffffefff

08001580 <I2C_TimeoutAConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8001580:	6943      	ldr	r3, [r0, #20]

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8001582:	0509      	lsls	r1, r1, #20
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 8001584:	0b1b      	lsrs	r3, r3, #12
 8001586:	031b      	lsls	r3, r3, #12
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8001588:	0d09      	lsrs	r1, r1, #20
 800158a:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 800158c:	6141      	str	r1, [r0, #20]
}
 800158e:	4770      	bx	lr

08001590 <I2C_TimeoutBConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8001590:	6943      	ldr	r3, [r0, #20]

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <I2C_TimeoutBConfig+0x14>)

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8001594:	0409      	lsls	r1, r1, #16
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 8001596:	4013      	ands	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <I2C_TimeoutBConfig+0x18>)
 800159a:	4011      	ands	r1, r2
 800159c:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 800159e:	6141      	str	r1, [r0, #20]
}
 80015a0:	4770      	bx	lr
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	f000ffff 	.word	0xf000ffff
 80015a8:	0fff0000 	.word	0x0fff0000

080015ac <I2C_CalculatePEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015ac:	2900      	cmp	r1, #0
 80015ae:	d005      	beq.n	80015bc <I2C_CalculatePEC+0x10>
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	6802      	ldr	r2, [r0, #0]
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 80015b8:	6003      	str	r3, [r0, #0]
  }
}
 80015ba:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 80015bc:	6803      	ldr	r3, [r0, #0]
 80015be:	4a01      	ldr	r2, [pc, #4]	; (80015c4 <I2C_CalculatePEC+0x18>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	e7f9      	b.n	80015b8 <I2C_CalculatePEC+0xc>
 80015c4:	ff7fffff 	.word	0xff7fffff

080015c8 <I2C_PECRequestCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d005      	beq.n	80015d8 <I2C_PECRequestCmd+0x10>
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	6802      	ldr	r2, [r0, #0]
 80015d0:	04db      	lsls	r3, r3, #19
 80015d2:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 80015d4:	6003      	str	r3, [r0, #0]
  }
}
 80015d6:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 80015d8:	6803      	ldr	r3, [r0, #0]
 80015da:	4a01      	ldr	r2, [pc, #4]	; (80015e0 <I2C_PECRequestCmd+0x18>)
 80015dc:	4013      	ands	r3, r2
 80015de:	e7f9      	b.n	80015d4 <I2C_PECRequestCmd+0xc>
 80015e0:	fbffffff 	.word	0xfbffffff

080015e4 <I2C_GetPEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 80015e4:	6a00      	ldr	r0, [r0, #32]
 80015e6:	b2c0      	uxtb	r0, r0
}
 80015e8:	4770      	bx	lr

080015ea <I2C_ReadRegister>:
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 80015ea:	2300      	movs	r3, #0
{
 80015ec:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80015ee:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 80015f0:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	18c9      	adds	r1, r1, r3
 80015f6:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 80015f8:	9b01      	ldr	r3, [sp, #4]
 80015fa:	6818      	ldr	r0, [r3, #0]
}
 80015fc:	b002      	add	sp, #8
 80015fe:	4770      	bx	lr

08001600 <I2C_SendData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8001600:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001602:	4770      	bx	lr

08001604 <I2C_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8001604:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001606:	b2c0      	uxtb	r0, r0
}  
 8001608:	4770      	bx	lr

0800160a <I2C_DMACmd>:
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 800160a:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 800160c:	2a00      	cmp	r2, #0
 800160e:	d002      	beq.n	8001616 <I2C_DMACmd+0xc>
    I2Cx->CR1 |= I2C_DMAReq;
 8001610:	4319      	orrs	r1, r3
 8001612:	6001      	str	r1, [r0, #0]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
  }
}
 8001614:	4770      	bx	lr
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8001616:	438b      	bics	r3, r1
 8001618:	6003      	str	r3, [r0, #0]
}
 800161a:	e7fb      	b.n	8001614 <I2C_DMACmd+0xa>

0800161c <I2C_ITConfig>:
 800161c:	b510      	push	{r4, lr}
 800161e:	f7ff fff4 	bl	800160a <I2C_DMACmd>
 8001622:	bd10      	pop	{r4, pc}

08001624 <I2C_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8001624:	6980      	ldr	r0, [r0, #24]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8001626:	4008      	ands	r0, r1
  
  if(tmpreg != 0)
 8001628:	1e41      	subs	r1, r0, #1
 800162a:	4188      	sbcs	r0, r1
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  return bitstatus;
 800162c:	b2c0      	uxtb	r0, r0
} 
 800162e:	4770      	bx	lr

08001630 <I2C_ClearFlag>:
 8001630:	61c1      	str	r1, [r0, #28]
 8001632:	4770      	bx	lr

08001634 <I2C_GetITStatus>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if ((uint32_t)(I2C_IT & ERROR_IT_MASK))
 8001634:	23fc      	movs	r3, #252	; 0xfc
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	4219      	tst	r1, r3
 800163a:	d00a      	beq.n	8001652 <I2C_GetITStatus+0x1e>
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	6803      	ldr	r3, [r0, #0]
  }
  /* If TC interrupt */
  else if ((uint32_t)(I2C_IT & TC_IT_MASK))
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8001640:	4013      	ands	r3, r2
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8001642:	6982      	ldr	r2, [r0, #24]
 8001644:	2000      	movs	r0, #0

  /* Get flag status */
  tmpreg &= I2C_IT;

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8001646:	420a      	tst	r2, r1
 8001648:	d002      	beq.n	8001650 <I2C_GetITStatus+0x1c>
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	4183      	sbcs	r3, r0
 800164e:	b2d8      	uxtb	r0, r3
    bitstatus = RESET;
  }

  /* Return the I2C_IT status */
  return bitstatus;
}
 8001650:	4770      	bx	lr
  else if ((uint32_t)(I2C_IT & TC_IT_MASK))
 8001652:	23c0      	movs	r3, #192	; 0xc0
 8001654:	4219      	tst	r1, r3
 8001656:	d002      	beq.n	800165e <I2C_GetITStatus+0x2a>
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8001658:	6803      	ldr	r3, [r0, #0]
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	e7f0      	b.n	8001640 <I2C_GetITStatus+0xc>
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 800165e:	6803      	ldr	r3, [r0, #0]
 8001660:	400b      	ands	r3, r1
 8001662:	e7ee      	b.n	8001642 <I2C_GetITStatus+0xe>

08001664 <I2C_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 8001664:	61c1      	str	r1, [r0, #28]
}
 8001666:	4770      	bx	lr

08001668 <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <IWDG_WriteAccessCmd+0x8>)
 800166a:	6018      	str	r0, [r3, #0]
}
 800166c:	4770      	bx	lr
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	40003000 	.word	0x40003000

08001674 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <IWDG_SetPrescaler+0x8>)
 8001676:	6058      	str	r0, [r3, #4]
}
 8001678:	4770      	bx	lr
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40003000 	.word	0x40003000

08001680 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8001680:	4b01      	ldr	r3, [pc, #4]	; (8001688 <IWDG_SetReload+0x8>)
 8001682:	6098      	str	r0, [r3, #8]
}
 8001684:	4770      	bx	lr
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	40003000 	.word	0x40003000

0800168c <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 800168c:	4a01      	ldr	r2, [pc, #4]	; (8001694 <IWDG_ReloadCounter+0x8>)
 800168e:	4b02      	ldr	r3, [pc, #8]	; (8001698 <IWDG_ReloadCounter+0xc>)
 8001690:	601a      	str	r2, [r3, #0]
}
 8001692:	4770      	bx	lr
 8001694:	0000aaaa 	.word	0x0000aaaa
 8001698:	40003000 	.word	0x40003000

0800169c <IWDG_SetWindowValue>:
  */
void IWDG_SetWindowValue(uint16_t WindowValue)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WINDOW_VALUE(WindowValue));
  IWDG->WINR = WindowValue;
 800169c:	4b01      	ldr	r3, [pc, #4]	; (80016a4 <IWDG_SetWindowValue+0x8>)
 800169e:	6118      	str	r0, [r3, #16]
}
 80016a0:	4770      	bx	lr
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	40003000 	.word	0x40003000

080016a8 <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 80016a8:	4a01      	ldr	r2, [pc, #4]	; (80016b0 <IWDG_Enable+0x8>)
 80016aa:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <IWDG_Enable+0xc>)
 80016ac:	601a      	str	r2, [r3, #0]
}
 80016ae:	4770      	bx	lr
 80016b0:	0000cccc 	.word	0x0000cccc
 80016b4:	40003000 	.word	0x40003000

080016b8 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  *            @arg IWDG_FLAG_WVU: Counter Window Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 80016b8:	0003      	movs	r3, r0
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80016ba:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <IWDG_GetFlagStatus+0x10>)
 80016bc:	68d0      	ldr	r0, [r2, #12]
 80016be:	4018      	ands	r0, r3
 80016c0:	1e43      	subs	r3, r0, #1
 80016c2:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 80016c4:	b2c0      	uxtb	r0, r0
}
 80016c6:	4770      	bx	lr
 80016c8:	40003000 	.word	0x40003000

080016cc <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80016cc:	7883      	ldrb	r3, [r0, #2]
{
 80016ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d0:	7802      	ldrb	r2, [r0, #0]
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d01b      	beq.n	800170e <NVIC_Init+0x42>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80016d6:	27ff      	movs	r7, #255	; 0xff
 80016d8:	2403      	movs	r4, #3
 80016da:	003e      	movs	r6, r7
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80016dc:	25c0      	movs	r5, #192	; 0xc0
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80016de:	4014      	ands	r4, r2
 80016e0:	00e4      	lsls	r4, r4, #3
 80016e2:	40a6      	lsls	r6, r4
 80016e4:	0891      	lsrs	r1, r2, #2
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <NVIC_Init+0x50>)
 80016e8:	0089      	lsls	r1, r1, #2
 80016ea:	18c9      	adds	r1, r1, r3
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80016ec:	00ad      	lsls	r5, r5, #2
 80016ee:	594b      	ldr	r3, [r1, r5]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80016f0:	43b3      	bics	r3, r6
 80016f2:	001e      	movs	r6, r3
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80016f4:	7843      	ldrb	r3, [r0, #1]
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	403b      	ands	r3, r7
 80016fa:	40a3      	lsls	r3, r4
 80016fc:	4333      	orrs	r3, r6
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80016fe:	514b      	str	r3, [r1, r5]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001700:	231f      	movs	r3, #31
 8001702:	401a      	ands	r2, r3
 8001704:	3b1e      	subs	r3, #30
 8001706:	4093      	lsls	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <NVIC_Init+0x50>)
 800170a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800170e:	231f      	movs	r3, #31
 8001710:	401a      	ands	r2, r3
 8001712:	3b1e      	subs	r3, #30
 8001714:	4093      	lsls	r3, r2
 8001716:	4a02      	ldr	r2, [pc, #8]	; (8001720 <NVIC_Init+0x54>)
 8001718:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800171a:	e7f7      	b.n	800170c <NVIC_Init+0x40>
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000e104 	.word	0xe000e104

08001724 <NVIC_SystemLPConfig>:
  * @param  NewState: new state of LP condition. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <NVIC_SystemLPConfig+0x14>)
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001726:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 8001728:	2900      	cmp	r1, #0
 800172a:	d002      	beq.n	8001732 <NVIC_SystemLPConfig+0xe>
    SCB->SCR |= LowPowerMode;
 800172c:	4310      	orrs	r0, r2
 800172e:	6118      	str	r0, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 8001730:	4770      	bx	lr
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001732:	4382      	bics	r2, r0
 8001734:	611a      	str	r2, [r3, #16]
}
 8001736:	e7fb      	b.n	8001730 <NVIC_SystemLPConfig+0xc>
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <SysTick_CLKSourceConfig>:
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800173e:	681a      	ldr	r2, [r3, #0]
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001740:	2804      	cmp	r0, #4
 8001742:	d102      	bne.n	800174a <SysTick_CLKSourceConfig+0xe>
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001744:	4310      	orrs	r0, r2
 8001746:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8001748:	4770      	bx	lr
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800174a:	2104      	movs	r1, #4
 800174c:	438a      	bics	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	e7fa      	b.n	8001748 <SysTick_CLKSourceConfig+0xc>
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	e000e010 	.word	0xe000e010

08001758 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8001758:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800175a:	2480      	movs	r4, #128	; 0x80
 800175c:	0564      	lsls	r4, r4, #21
 800175e:	0020      	movs	r0, r4
 8001760:	2101      	movs	r1, #1
 8001762:	f000 faa9 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8001766:	2100      	movs	r1, #0
 8001768:	0020      	movs	r0, r4
 800176a:	f000 faa5 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
}
 800176e:	bd10      	pop	{r4, pc}

08001770 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the Backup domain registers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <PWR_BackupAccessCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001772:	2800      	cmp	r0, #0
 8001774:	d005      	beq.n	8001782 <PWR_BackupAccessCmd+0x12>
  {
    /* Enable the Backup Domain Access */
    PWR->CR |= PWR_CR_DBP;
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	0052      	lsls	r2, r2, #1
 800177c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Disable the Backup Domain Access */
    PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_DBP);
 800177e:	601a      	str	r2, [r3, #0]
  } 
}
 8001780:	4770      	bx	lr
    PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_DBP);
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4902      	ldr	r1, [pc, #8]	; (8001790 <PWR_BackupAccessCmd+0x20>)
 8001786:	400a      	ands	r2, r1
 8001788:	e7f9      	b.n	800177e <PWR_BackupAccessCmd+0xe>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40007000 	.word	0x40007000
 8001790:	fffffeff 	.word	0xfffffeff

08001794 <PWR_PVDLevelConfig>:
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8001794:	21e0      	movs	r1, #224	; 0xe0
  tmpreg = PWR->CR;
 8001796:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <PWR_PVDLevelConfig+0x10>)
 8001798:	6813      	ldr	r3, [r2, #0]
  tmpreg &= CR_PLS_MASK;
 800179a:	438b      	bics	r3, r1
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800179c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800179e:	6010      	str	r0, [r2, #0]
}
 80017a0:	4770      	bx	lr
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40007000 	.word	0x40007000

080017a8 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <PWR_PVDCmd+0x18>)
 80017aa:	2210      	movs	r2, #16
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the PVD */
    PWR->CR |= PWR_CR_PVDE;
 80017ac:	6819      	ldr	r1, [r3, #0]
  if (NewState != DISABLE)
 80017ae:	2800      	cmp	r0, #0
 80017b0:	d002      	beq.n	80017b8 <PWR_PVDCmd+0x10>
    PWR->CR |= PWR_CR_PVDE;
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the PVD */
    PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_PVDE);
  } 
}
 80017b6:	4770      	bx	lr
    PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_PVDE);
 80017b8:	4391      	bics	r1, r2
 80017ba:	6019      	str	r1, [r3, #0]
}
 80017bc:	e7fb      	b.n	80017b6 <PWR_PVDCmd+0xe>
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40007000 	.word	0x40007000

080017c4 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
{
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <PWR_WakeUpPinCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the EWUPx pin */
    PWR->CSR |= PWR_WakeUpPin;
 80017c6:	685a      	ldr	r2, [r3, #4]
  if (NewState != DISABLE)
 80017c8:	2900      	cmp	r1, #0
 80017ca:	d002      	beq.n	80017d2 <PWR_WakeUpPinCmd+0xe>
    PWR->CSR |= PWR_WakeUpPin;
 80017cc:	4310      	orrs	r0, r2
 80017ce:	6058      	str	r0, [r3, #4]
  else
  {
    /* Disable the EWUPx pin */
    PWR->CSR &= ~PWR_WakeUpPin;
  }
}
 80017d0:	4770      	bx	lr
    PWR->CSR &= ~PWR_WakeUpPin;
 80017d2:	4382      	bics	r2, r0
 80017d4:	605a      	str	r2, [r3, #4]
}
 80017d6:	e7fb      	b.n	80017d0 <PWR_WakeUpPinCmd+0xc>
 80017d8:	40007000 	.word	0x40007000

080017dc <PWR_EnterSleepMode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex-M0 System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80017dc:	2104      	movs	r1, #4
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <PWR_EnterSleepMode+0x18>)
 80017e0:	6913      	ldr	r3, [r2, #16]
 80017e2:	438b      	bics	r3, r1
 80017e4:	6113      	str	r3, [r2, #16]
  
  /* Select SLEEP mode entry -------------------------------------------------*/
  if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
 80017e6:	2801      	cmp	r0, #1
 80017e8:	d101      	bne.n	80017ee <PWR_EnterSleepMode+0x12>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80017ea:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE();
  }
}
 80017ec:	4770      	bx	lr
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 80017ee:	bf20      	wfe
 80017f0:	e7fc      	b.n	80017ec <PWR_EnterSleepMode+0x10>
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <PWR_EnterSTOPMode>:
  *             @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *             @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 80017f8:	b510      	push	{r4, lr}
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 80017fa:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 80017fc:	4a09      	ldr	r2, [pc, #36]	; (8001824 <PWR_EnterSTOPMode+0x2c>)
 80017fe:	6813      	ldr	r3, [r2, #0]
  tmpreg &= CR_DS_MASK;
 8001800:	43a3      	bics	r3, r4

  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8001802:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8001804:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8001806:	2204      	movs	r2, #4
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <PWR_EnterSTOPMode+0x30>)
 800180a:	6918      	ldr	r0, [r3, #16]
 800180c:	4310      	orrs	r0, r2
 800180e:	6118      	str	r0, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8001810:	2901      	cmp	r1, #1
 8001812:	d104      	bne.n	800181e <PWR_EnterSTOPMode+0x26>
  __ASM volatile ("wfi");
 8001814:	bf30      	wfi
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8001816:	6919      	ldr	r1, [r3, #16]
 8001818:	4391      	bics	r1, r2
 800181a:	6119      	str	r1, [r3, #16]
}
 800181c:	bd10      	pop	{r4, pc}
  __ASM volatile ("wfe");
 800181e:	bf20      	wfe
 8001820:	e7f9      	b.n	8001816 <PWR_EnterSTOPMode+0x1e>
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40007000 	.word	0x40007000
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800182c:	2304      	movs	r3, #4
 800182e:	4a07      	ldr	r2, [pc, #28]	; (800184c <PWR_EnterSTANDBYMode+0x20>)
 8001830:	6811      	ldr	r1, [r2, #0]
 8001832:	4319      	orrs	r1, r3
 8001834:	6011      	str	r1, [r2, #0]

  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8001836:	2102      	movs	r1, #2
 8001838:	6810      	ldr	r0, [r2, #0]
 800183a:	4301      	orrs	r1, r0
 800183c:	6011      	str	r1, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <PWR_EnterSTANDBYMode+0x24>)
 8001840:	6911      	ldr	r1, [r2, #16]
 8001842:	430b      	orrs	r3, r1
 8001844:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8001846:	bf30      	wfi

  /* Request Wait For Interrupt */
  __WFI();
}
 8001848:	4770      	bx	lr
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	40007000 	.word	0x40007000
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <PWR_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));

  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <PWR_GetFlagStatus+0x10>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4018      	ands	r0, r3
 800185a:	1e43      	subs	r3, r0, #1
 800185c:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 800185e:	b2c0      	uxtb	r0, r0
}
 8001860:	4770      	bx	lr
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	40007000 	.word	0x40007000

08001868 <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));

  PWR->CR |=  PWR_FLAG << 2;
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <PWR_ClearFlag+0xc>)
 800186a:	0080      	lsls	r0, r0, #2
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4310      	orrs	r0, r2
 8001870:	6018      	str	r0, [r3, #0]
}
 8001872:	4770      	bx	lr
 8001874:	40007000 	.word	0x40007000

08001878 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001878:	2101      	movs	r1, #1
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <RCC_DeInit+0x48>)

#if defined (STM32F0XX_MD) || defined (STM32F030X8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <RCC_DeInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4002      	ands	r2, r0
 8001888:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
#endif /* STM32F0XX_MD or STM32F030X8 */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <RCC_DeInit+0x50>)
 800188e:	4002      	ands	r2, r0
 8001890:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <RCC_DeInit+0x54>)
 8001896:	4002      	ands	r2, r0
 8001898:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <RCC_DeInit+0x58>)
 800189e:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80018a0:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80018a2:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80018a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a6:	4382      	bics	r2, r0
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80018aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <RCC_DeInit+0x5c>)
 80018ae:	4002      	ands	r2, r0
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80018b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b4:	438a      	bics	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	4770      	bx	lr
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40021000 	.word	0x40021000
 80018c4:	f8ffb80c 	.word	0xf8ffb80c
 80018c8:	fef6ffff 	.word	0xfef6ffff
 80018cc:	fffbffff 	.word	0xfffbffff
 80018d0:	ffc0ffff 	.word	0xffc0ffff
 80018d4:	fffffeac 	.word	0xfffffeac

080018d8 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80018d8:	2200      	movs	r2, #0
 80018da:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <RCC_HSEConfig+0xc>)
 80018dc:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 80018de:	7018      	strb	r0, [r3, #0]

}
 80018e0:	4770      	bx	lr
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	40021002 	.word	0x40021002

080018e8 <RCC_AdjustHSICalibrationValue>:
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80018e8:	21f8      	movs	r1, #248	; 0xf8
  tmpreg = RCC->CR;
 80018ea:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80018ec:	00c0      	lsls	r0, r0, #3
  tmpreg = RCC->CR;
 80018ee:	6813      	ldr	r3, [r2, #0]
  tmpreg &= ~RCC_CR_HSITRIM;
 80018f0:	438b      	bics	r3, r1
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80018f2:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR = tmpreg;
 80018f4:	6010      	str	r0, [r2, #0]
}
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000

080018fc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <RCC_HSICmd+0x18>)
 80018fe:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8001900:	6819      	ldr	r1, [r3, #0]
  if (NewState != DISABLE)
 8001902:	2800      	cmp	r0, #0
 8001904:	d002      	beq.n	800190c <RCC_HSICmd+0x10>
    RCC->CR |= RCC_CR_HSION;
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
  }
}
 800190a:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_HSION;
 800190c:	4391      	bics	r1, r2
 800190e:	6019      	str	r1, [r3, #0]
}
 8001910:	e7fb      	b.n	800190a <RCC_HSICmd+0xe>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40021000 	.word	0x40021000

08001918 <RCC_AdjustHSI14CalibrationValue>:
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8001918:	21f8      	movs	r1, #248	; 0xf8
  tmpreg = RCC->CR2;
 800191a:	4a03      	ldr	r2, [pc, #12]	; (8001928 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800191c:	00c0      	lsls	r0, r0, #3
  tmpreg = RCC->CR2;
 800191e:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8001920:	438b      	bics	r3, r1
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8001922:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR2 = tmpreg;
 8001924:	6350      	str	r0, [r2, #52]	; 0x34
}
 8001926:	4770      	bx	lr
 8001928:	40021000 	.word	0x40021000

0800192c <RCC_HSI14Cmd>:
  * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSI14Cmd(FunctionalState NewState)
{
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <RCC_HSI14Cmd+0x18>)
 800192e:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8001930:	6b59      	ldr	r1, [r3, #52]	; 0x34
  if (NewState != DISABLE)
 8001932:	2800      	cmp	r0, #0
 8001934:	d002      	beq.n	800193c <RCC_HSI14Cmd+0x10>
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8001936:	430a      	orrs	r2, r1
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
  }
}
 800193a:	4770      	bx	lr
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800193c:	4391      	bics	r1, r2
 800193e:	6359      	str	r1, [r3, #52]	; 0x34
}
 8001940:	e7fb      	b.n	800193a <RCC_HSI14Cmd+0xe>
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000

08001948 <RCC_HSI14ADCRequestCmd>:
  * @param  NewState: new state of the HSI14 ADC request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <RCC_HSI14ADCRequestCmd+0x18>)
 800194a:	2204      	movs	r2, #4
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 800194c:	6b59      	ldr	r1, [r3, #52]	; 0x34
  if (NewState != DISABLE)
 800194e:	2800      	cmp	r0, #0
 8001950:	d002      	beq.n	8001958 <RCC_HSI14ADCRequestCmd+0x10>
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8001952:	4391      	bics	r1, r2
 8001954:	6359      	str	r1, [r3, #52]	; 0x34
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
  }
}
 8001956:	4770      	bx	lr
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 8001958:	430a      	orrs	r2, r1
 800195a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800195c:	e7fb      	b.n	8001956 <RCC_HSI14ADCRequestCmd+0xe>
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40021000 	.word	0x40021000

08001964 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8001964:	2101      	movs	r1, #1
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <RCC_LSEConfig+0x1c>)
 8001968:	6a1a      	ldr	r2, [r3, #32]
 800196a:	438a      	bics	r2, r1
 800196c:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	3103      	adds	r1, #3
 8001972:	438a      	bics	r2, r1
 8001974:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	4310      	orrs	r0, r2
 800197a:	6218      	str	r0, [r3, #32]
}
 800197c:	4770      	bx	lr
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	40021000 	.word	0x40021000

08001984 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8001984:	2118      	movs	r1, #24
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <RCC_LSEDriveConfig+0x14>)
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	438a      	bics	r2, r1
 800198c:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	4310      	orrs	r0, r2
 8001992:	6218      	str	r0, [r3, #32]
}
 8001994:	4770      	bx	lr
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40021000 	.word	0x40021000

0800199c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <RCC_LSICmd+0x18>)
 800199e:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 80019a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
  if (NewState != DISABLE)
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d002      	beq.n	80019ac <RCC_LSICmd+0x10>
    RCC->CSR |= RCC_CSR_LSION;
 80019a6:	430a      	orrs	r2, r1
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
  }
}
 80019aa:	4770      	bx	lr
    RCC->CSR &= ~RCC_CSR_LSION;
 80019ac:	4391      	bics	r1, r2
 80019ae:	6259      	str	r1, [r3, #36]	; 0x24
}
 80019b0:	e7fb      	b.n	80019aa <RCC_LSICmd+0xe>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000

080019b8 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <RCC_PLLConfig+0x18>)
{
 80019ba:	b510      	push	{r4, lr}
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80019bc:	6853      	ldr	r3, [r2, #4]
 80019be:	4c05      	ldr	r4, [pc, #20]	; (80019d4 <RCC_PLLConfig+0x1c>)
 80019c0:	4023      	ands	r3, r4
 80019c2:	6053      	str	r3, [r2, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80019c4:	6853      	ldr	r3, [r2, #4]
 80019c6:	4319      	orrs	r1, r3
 80019c8:	4308      	orrs	r0, r1
 80019ca:	6050      	str	r0, [r2, #4]
}
 80019cc:	bd10      	pop	{r4, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	ffc2ffff 	.word	0xffc2ffff

080019d8 <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <RCC_PLLCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80019da:	2800      	cmp	r0, #0
 80019dc:	d005      	beq.n	80019ea <RCC_PLLCmd+0x12>
  {
    RCC->CR |= RCC_CR_PLLON;
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	0452      	lsls	r2, r2, #17
 80019e4:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80019e6:	601a      	str	r2, [r3, #0]
  }
}
 80019e8:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_PLLON;
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4902      	ldr	r1, [pc, #8]	; (80019f8 <RCC_PLLCmd+0x20>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	e7f9      	b.n	80019e6 <RCC_PLLCmd+0xe>
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40021000 	.word	0x40021000
 80019f8:	feffffff 	.word	0xfeffffff

080019fc <RCC_PREDIV1Config>:
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80019fc:	210f      	movs	r1, #15
  tmpreg = RCC->CFGR2;
 80019fe:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <RCC_PREDIV1Config+0x10>)
 8001a00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8001a02:	438b      	bics	r3, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8001a04:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001a06:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 8001a08:	4770      	bx	lr
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000

08001a10 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <RCC_ClockSecuritySystemCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d005      	beq.n	8001a22 <RCC_ClockSecuritySystemCmd+0x12>
  {
    RCC->CR |= RCC_CR_CSSON;
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 8001a1e:	601a      	str	r2, [r3, #0]
  }
}
 8001a20:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_CSSON;
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4902      	ldr	r1, [pc, #8]	; (8001a30 <RCC_ClockSecuritySystemCmd+0x20>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	e7f9      	b.n	8001a1e <RCC_ClockSecuritySystemCmd+0xe>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	fff7ffff 	.word	0xfff7ffff

08001a34 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 8001a34:	4b01      	ldr	r3, [pc, #4]	; (8001a3c <RCC_MCOConfig+0x8>)
 8001a36:	7018      	strb	r0, [r3, #0]
}
 8001a38:	4770      	bx	lr
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40021007 	.word	0x40021007

08001a40 <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001a40:	2103      	movs	r1, #3
  tmpreg = RCC->CFGR;
 8001a42:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <RCC_SYSCLKConfig+0x10>)
 8001a44:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_SW;
 8001a46:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001a48:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a4a:	6050      	str	r0, [r2, #4]
}
 8001a4c:	4770      	bx	lr
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	40021000 	.word	0x40021000

08001a54 <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <RCC_GetSYSCLKSource+0xc>)
 8001a56:	6858      	ldr	r0, [r3, #4]
 8001a58:	230c      	movs	r3, #12
 8001a5a:	4018      	ands	r0, r3
}
 8001a5c:	4770      	bx	lr
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000

08001a64 <RCC_HCLKConfig>:
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001a64:	21f0      	movs	r1, #240	; 0xf0
  tmpreg = RCC->CFGR;
 8001a66:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <RCC_HCLKConfig+0x10>)
 8001a68:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_HPRE;
 8001a6a:	438b      	bics	r3, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001a6c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a6e:	6050      	str	r0, [r2, #4]
}
 8001a70:	4770      	bx	lr
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40021000 	.word	0x40021000

08001a78 <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8001a7a:	4904      	ldr	r1, [pc, #16]	; (8001a8c <RCC_PCLKConfig+0x14>)
  tmpreg = RCC->CFGR;
 8001a7c:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_PPRE;
 8001a7e:	400b      	ands	r3, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001a80:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a82:	6050      	str	r0, [r2, #4]
}
 8001a84:	4770      	bx	lr
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	fffff8ff 	.word	0xfffff8ff

08001a90 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <RCC_ADCCLKConfig+0x24>)
 8001a92:	4909      	ldr	r1, [pc, #36]	; (8001ab8 <RCC_ADCCLKConfig+0x28>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	400a      	ands	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	b282      	uxth	r2, r0
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	4905      	ldr	r1, [pc, #20]	; (8001abc <RCC_ADCCLKConfig+0x2c>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8001aa6:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8001aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aae:	4310      	orrs	r0, r2
 8001ab0:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	ffffbfff 	.word	0xffffbfff
 8001abc:	fffffeff 	.word	0xfffffeff

08001ac0 <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <RCC_CECCLKConfig+0x14>)
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac6:	438a      	bics	r2, r1
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8001aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001acc:	4310      	orrs	r0, r2
 8001ace:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001ad0:	4770      	bx	lr
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8001ad8:	2110      	movs	r1, #16
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <RCC_I2CCLKConfig+0x14>)
 8001adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ade:	438a      	bics	r2, r1
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8001ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae4:	4310      	orrs	r0, r2
 8001ae6:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001ae8:	4770      	bx	lr
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000

08001af0 <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8001af0:	2103      	movs	r1, #3
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <RCC_USARTCLKConfig+0x14>)
 8001af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af6:	438a      	bics	r2, r1
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8001afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afc:	4310      	orrs	r0, r2
 8001afe:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001b00:	4770      	bx	lr
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40021000 	.word	0x40021000

08001b08 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b08:	220c      	movs	r2, #12
{
 8001b0a:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b0c:	4d30      	ldr	r5, [pc, #192]	; (8001bd0 <RCC_GetClocksFreq+0xc8>)
{
 8001b0e:	0004      	movs	r4, r0
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b10:	686b      	ldr	r3, [r5, #4]
 8001b12:	4013      	ands	r3, r2
  
  switch (tmp)
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d001      	beq.n	8001b1c <RCC_GetClocksFreq+0x14>
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d026      	beq.n	8001b6a <RCC_GetClocksFreq+0x62>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <RCC_GetClocksFreq+0xcc>)
 8001b1e:	6023      	str	r3, [r4, #0]
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001b20:	6821      	ldr	r1, [r4, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001b22:	686b      	ldr	r3, [r5, #4]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001b24:	000a      	movs	r2, r1
  presc = APBAHBPrescTable[tmp]; 
 8001b26:	482c      	ldr	r0, [pc, #176]	; (8001bd8 <RCC_GetClocksFreq+0xd0>)
  tmp = tmp >> 4;
 8001b28:	061b      	lsls	r3, r3, #24
 8001b2a:	0f1b      	lsrs	r3, r3, #28
  presc = APBAHBPrescTable[tmp]; 
 8001b2c:	5cc3      	ldrb	r3, [r0, r3]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001b2e:	40da      	lsrs	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	6062      	str	r2, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8001b34:	686a      	ldr	r2, [r5, #4]
  tmp = tmp >> 8;
 8001b36:	0552      	lsls	r2, r2, #21
 8001b38:	0f52      	lsrs	r2, r2, #29
  presc = APBAHBPrescTable[tmp];
 8001b3a:	5c82      	ldrb	r2, [r0, r2]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	60a3      	str	r3, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8001b40:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b42:	05d2      	lsls	r2, r2, #23
 8001b44:	d424      	bmi.n	8001b90 <RCC_GetClocksFreq+0x88>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8001b46:	4a25      	ldr	r2, [pc, #148]	; (8001bdc <RCC_GetClocksFreq+0xd4>)
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8001b48:	60e2      	str	r2, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8001b4a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b4c:	0652      	lsls	r2, r2, #25
 8001b4e:	d426      	bmi.n	8001b9e <RCC_GetClocksFreq+0x96>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <RCC_GetClocksFreq+0xd8>)
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8001b52:	6122      	str	r2, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8001b54:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b56:	06d2      	lsls	r2, r2, #27
 8001b58:	d424      	bmi.n	8001ba4 <RCC_GetClocksFreq+0x9c>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <RCC_GetClocksFreq+0xcc>)
 8001b5c:	6162      	str	r2, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001b5e:	2203      	movs	r2, #3
 8001b60:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001b62:	4210      	tst	r0, r2
 8001b64:	d120      	bne.n	8001ba8 <RCC_GetClocksFreq+0xa0>
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001b66:	61a3      	str	r3, [r4, #24]
  }
}
 8001b68:	e023      	b.n	8001bb2 <RCC_GetClocksFreq+0xaa>
      pllmull = ( pllmull >> 18) + 2;
 8001b6a:	230f      	movs	r3, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001b6c:	686e      	ldr	r6, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001b6e:	686a      	ldr	r2, [r5, #4]
      pllmull = ( pllmull >> 18) + 2;
 8001b70:	0cb6      	lsrs	r6, r6, #18
 8001b72:	401e      	ands	r6, r3
 8001b74:	3602      	adds	r6, #2
      if (pllsource == 0x00)
 8001b76:	03d2      	lsls	r2, r2, #15
 8001b78:	d403      	bmi.n	8001b82 <RCC_GetClocksFreq+0x7a>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001b7a:	481a      	ldr	r0, [pc, #104]	; (8001be4 <RCC_GetClocksFreq+0xdc>)
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8001b7c:	4346      	muls	r6, r0
 8001b7e:	6026      	str	r6, [r4, #0]
 8001b80:	e7ce      	b.n	8001b20 <RCC_GetClocksFreq+0x18>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001b82:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8001b84:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <RCC_GetClocksFreq+0xcc>)
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001b86:	4019      	ands	r1, r3
 8001b88:	3101      	adds	r1, #1
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8001b8a:	f002 f923 	bl	8003dd4 <__udivsi3>
 8001b8e:	e7f5      	b.n	8001b7c <RCC_GetClocksFreq+0x74>
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8001b90:	686a      	ldr	r2, [r5, #4]
 8001b92:	0452      	lsls	r2, r2, #17
 8001b94:	d401      	bmi.n	8001b9a <RCC_GetClocksFreq+0x92>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8001b96:	085a      	lsrs	r2, r3, #1
 8001b98:	e7d6      	b.n	8001b48 <RCC_GetClocksFreq+0x40>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8001b9a:	089a      	lsrs	r2, r3, #2
 8001b9c:	e7d4      	b.n	8001b48 <RCC_GetClocksFreq+0x40>
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	0212      	lsls	r2, r2, #8
 8001ba2:	e7d6      	b.n	8001b52 <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001ba4:	6161      	str	r1, [r4, #20]
 8001ba6:	e7da      	b.n	8001b5e <RCC_GetClocksFreq+0x56>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001ba8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <RCC_GetClocksFreq+0xac>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001bb0:	61a1      	str	r1, [r4, #24]
}
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001bb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d102      	bne.n	8001bc2 <RCC_GetClocksFreq+0xba>
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	e7d1      	b.n	8001b66 <RCC_GetClocksFreq+0x5e>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001bc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	2a03      	cmp	r2, #3
 8001bc8:	d1f3      	bne.n	8001bb2 <RCC_GetClocksFreq+0xaa>
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001bca:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <RCC_GetClocksFreq+0xcc>)
 8001bcc:	e7cb      	b.n	8001b66 <RCC_GetClocksFreq+0x5e>
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	007a1200 	.word	0x007a1200
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	00d59f80 	.word	0x00d59f80
 8001be0:	00008012 	.word	0x00008012
 8001be4:	003d0900 	.word	0x003d0900

08001be8 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001be8:	4a02      	ldr	r2, [pc, #8]	; (8001bf4 <RCC_RTCCLKConfig+0xc>)
 8001bea:	6a13      	ldr	r3, [r2, #32]
 8001bec:	4318      	orrs	r0, r3
 8001bee:	6210      	str	r0, [r2, #32]
}
 8001bf0:	4770      	bx	lr
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <RCC_RTCCLKCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d005      	beq.n	8001c0a <RCC_RTCCLKCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	6a19      	ldr	r1, [r3, #32]
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8001c06:	621a      	str	r2, [r3, #32]
  }
}
 8001c08:	4770      	bx	lr
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	4902      	ldr	r1, [pc, #8]	; (8001c18 <RCC_RTCCLKCmd+0x20>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	e7f9      	b.n	8001c06 <RCC_RTCCLKCmd+0xe>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	40021000 	.word	0x40021000
 8001c18:	ffff7fff 	.word	0xffff7fff

08001c1c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <RCC_BackupResetCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d005      	beq.n	8001c2e <RCC_BackupResetCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	6a19      	ldr	r1, [r3, #32]
 8001c26:	0252      	lsls	r2, r2, #9
 8001c28:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8001c2a:	621a      	str	r2, [r3, #32]
  }
}
 8001c2c:	4770      	bx	lr
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	4902      	ldr	r1, [pc, #8]	; (8001c3c <RCC_BackupResetCmd+0x20>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	e7f9      	b.n	8001c2a <RCC_BackupResetCmd+0xe>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	fffeffff 	.word	0xfffeffff

08001c40 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001c42:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d002      	beq.n	8001c4e <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR |= RCC_AHBPeriph;
 8001c48:	4310      	orrs	r0, r2
 8001c4a:	6158      	str	r0, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001c4c:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001c4e:	4382      	bics	r2, r0
 8001c50:	615a      	str	r2, [r3, #20]
}
 8001c52:	e7fb      	b.n	8001c4c <RCC_AHBPeriphClockCmd+0xc>
 8001c54:	40021000 	.word	0x40021000

08001c58 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c5a:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	d002      	beq.n	8001c66 <RCC_APB2PeriphClockCmd+0xe>
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c60:	4310      	orrs	r0, r2
 8001c62:	6198      	str	r0, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001c64:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001c66:	4382      	bics	r2, r0
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	e7fb      	b.n	8001c64 <RCC_APB2PeriphClockCmd+0xc>
 8001c6c:	40021000 	.word	0x40021000

08001c70 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001c72:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 8001c74:	2900      	cmp	r1, #0
 8001c76:	d002      	beq.n	8001c7e <RCC_APB1PeriphClockCmd+0xe>
    RCC->APB1ENR |= RCC_APB1Periph;
 8001c78:	4310      	orrs	r0, r2
 8001c7a:	61d8      	str	r0, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001c7c:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001c7e:	4382      	bics	r2, r0
 8001c80:	61da      	str	r2, [r3, #28]
}
 8001c82:	e7fb      	b.n	8001c7c <RCC_APB1PeriphClockCmd+0xc>
 8001c84:	40021000 	.word	0x40021000

08001c88 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <RCC_AHBPeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8001c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  if (NewState != DISABLE)
 8001c8c:	2900      	cmp	r1, #0
 8001c8e:	d002      	beq.n	8001c96 <RCC_AHBPeriphResetCmd+0xe>
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8001c90:	4310      	orrs	r0, r2
 8001c92:	6298      	str	r0, [r3, #40]	; 0x28
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
  }
}
 8001c94:	4770      	bx	lr
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8001c96:	4382      	bics	r2, r0
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c9a:	e7fb      	b.n	8001c94 <RCC_AHBPeriphResetCmd+0xc>
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ca2:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d002      	beq.n	8001cae <RCC_APB2PeriphResetCmd+0xe>
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ca8:	4310      	orrs	r0, r2
 8001caa:	60d8      	str	r0, [r3, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001cac:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001cae:	4382      	bics	r2, r0
 8001cb0:	60da      	str	r2, [r3, #12]
}
 8001cb2:	e7fb      	b.n	8001cac <RCC_APB2PeriphResetCmd+0xc>
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001cba:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	d002      	beq.n	8001cc6 <RCC_APB1PeriphResetCmd+0xe>
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001cc0:	4310      	orrs	r0, r2
 8001cc2:	6118      	str	r0, [r3, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001cc4:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001cc6:	4382      	bics	r2, r0
 8001cc8:	611a      	str	r2, [r3, #16]
}
 8001cca:	e7fb      	b.n	8001cc4 <RCC_APB1PeriphResetCmd+0xc>
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <RCC_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8001cd2:	781a      	ldrb	r2, [r3, #0]
  if (NewState != DISABLE)
 8001cd4:	2900      	cmp	r1, #0
 8001cd6:	d002      	beq.n	8001cde <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8001cd8:	4310      	orrs	r0, r2
 8001cda:	7018      	strb	r0, [r3, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8001cdc:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8001cde:	4382      	bics	r2, r0
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	e7fb      	b.n	8001cdc <RCC_ITConfig+0xc>
 8001ce4:	40021009 	.word	0x40021009

08001ce8 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001ce8:	0942      	lsrs	r2, r0, #5
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <RCC_GetFlagStatus+0x28>)

  if (tmp == 0)               /* The flag to check is in CR register */
 8001cec:	d106      	bne.n	8001cfc <RCC_GetFlagStatus+0x14>
  {
    statusreg = RCC->CR;
 8001cee:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CR2;
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	4010      	ands	r0, r2

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001cf4:	40c3      	lsrs	r3, r0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	4018      	ands	r0, r3
}
 8001cfa:	4770      	bx	lr
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8001cfc:	2a01      	cmp	r2, #1
 8001cfe:	d101      	bne.n	8001d04 <RCC_GetFlagStatus+0x1c>
    statusreg = RCC->BDCR;
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	e7f5      	b.n	8001cf0 <RCC_GetFlagStatus+0x8>
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8001d04:	2a02      	cmp	r2, #2
 8001d06:	d101      	bne.n	8001d0c <RCC_GetFlagStatus+0x24>
    statusreg = RCC->CSR;
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	e7f1      	b.n	8001cf0 <RCC_GetFlagStatus+0x8>
    statusreg = RCC->CR2;
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	e7ef      	b.n	8001cf0 <RCC_GetFlagStatus+0x8>
 8001d10:	40021000 	.word	0x40021000

08001d14 <RCC_WaitForHSEStartUp>:
{
 8001d14:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t StartUpCounter = 0;
 8001d16:	2300      	movs	r3, #0
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001d18:	24a0      	movs	r4, #160	; 0xa0
  __IO uint32_t StartUpCounter = 0;
 8001d1a:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001d1c:	01e4      	lsls	r4, r4, #7
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001d1e:	2011      	movs	r0, #17
 8001d20:	f7ff ffe2 	bl	8001ce8 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8001d24:	9b01      	ldr	r3, [sp, #4]
 8001d26:	3301      	adds	r3, #1
 8001d28:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001d2a:	9b01      	ldr	r3, [sp, #4]
 8001d2c:	42a3      	cmp	r3, r4
 8001d2e:	d001      	beq.n	8001d34 <RCC_WaitForHSEStartUp+0x20>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d0f4      	beq.n	8001d1e <RCC_WaitForHSEStartUp+0xa>
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001d34:	2011      	movs	r0, #17
 8001d36:	f7ff ffd7 	bl	8001ce8 <RCC_GetFlagStatus>
 8001d3a:	1e43      	subs	r3, r0, #1
 8001d3c:	4198      	sbcs	r0, r3
  return (status);
 8001d3e:	b2c0      	uxtb	r0, r0
}
 8001d40:	bd16      	pop	{r1, r2, r4, pc}

08001d42 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	4a02      	ldr	r2, [pc, #8]	; (8001d50 <RCC_ClearFlag+0xe>)
 8001d46:	045b      	lsls	r3, r3, #17
 8001d48:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001d4e:	4770      	bx	lr
 8001d50:	40021000 	.word	0x40021000

08001d54 <RCC_GetITStatus>:
  *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt 
  *             @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001d54:	0003      	movs	r3, r0
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001d56:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <RCC_GetITStatus+0x10>)
 8001d58:	6890      	ldr	r0, [r2, #8]
 8001d5a:	4018      	ands	r0, r3
 8001d5c:	1e43      	subs	r3, r0, #1
 8001d5e:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001d60:	b2c0      	uxtb	r0, r0
}
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000

08001d68 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <RCC_ClearITPendingBit+0x8>)
 8001d6a:	7018      	strb	r0, [r3, #0]
}
 8001d6c:	4770      	bx	lr
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	4002100a 	.word	0x4002100a

08001d74 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8001d74:	2300      	movs	r3, #0
  
  while (Value >= 10)
 8001d76:	2809      	cmp	r0, #9
 8001d78:	d803      	bhi.n	8001d82 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4318      	orrs	r0, r3
 8001d7e:	b2c0      	uxtb	r0, r0
}
 8001d80:	4770      	bx	lr
    bcdhigh++;
 8001d82:	3301      	adds	r3, #1
    Value -= 10;
 8001d84:	380a      	subs	r0, #10
    bcdhigh++;
 8001d86:	b2db      	uxtb	r3, r3
    Value -= 10;
 8001d88:	b2c0      	uxtb	r0, r0
 8001d8a:	e7f4      	b.n	8001d76 <RTC_ByteToBcd2+0x2>

08001d8c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	0902      	lsrs	r2, r0, #4
 8001d90:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0F));
 8001d92:	220f      	movs	r2, #15
 8001d94:	4010      	ands	r0, r2
 8001d96:	1818      	adds	r0, r3, r0
 8001d98:	b2c0      	uxtb	r0, r0
}
 8001d9a:	4770      	bx	lr

08001d9c <RTC_StructInit>:
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6003      	str	r3, [r0, #0]
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 8001da0:	337f      	adds	r3, #127	; 0x7f
 8001da2:	6043      	str	r3, [r0, #4]
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8001da4:	3380      	adds	r3, #128	; 0x80
 8001da6:	6083      	str	r3, [r0, #8]
}
 8001da8:	4770      	bx	lr

08001daa <RTC_WriteProtectionCmd>:
{
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <RTC_WriteProtectionCmd+0x12>)
    RTC->WPR = 0xFF;
 8001dac:	22ff      	movs	r2, #255	; 0xff
  if (NewState != DISABLE)
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d102      	bne.n	8001db8 <RTC_WriteProtectionCmd+0xe>
    RTC->WPR = 0xCA;
 8001db2:	22ca      	movs	r2, #202	; 0xca
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;
 8001db6:	3a77      	subs	r2, #119	; 0x77
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dba:	4770      	bx	lr
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <RTC_EnterInitMode>:
  __IO uint32_t initcounter = 0x00;
 8001dc0:	2300      	movs	r3, #0
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dc2:	2240      	movs	r2, #64	; 0x40
{
 8001dc4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t initcounter = 0x00;
 8001dc6:	9301      	str	r3, [sp, #4]
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <RTC_EnterInitMode+0x38>)
    status = SUCCESS;
 8001dca:	2001      	movs	r0, #1
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dcc:	68d9      	ldr	r1, [r3, #12]
 8001dce:	4211      	tst	r1, r2
 8001dd0:	d111      	bne.n	8001df6 <RTC_EnterInitMode+0x36>
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8001dd2:	2101      	movs	r1, #1
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8001dd4:	2480      	movs	r4, #128	; 0x80
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8001dd6:	4249      	negs	r1, r1
 8001dd8:	60d9      	str	r1, [r3, #12]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8001dda:	01e4      	lsls	r4, r4, #7
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8001ddc:	68d9      	ldr	r1, [r3, #12]
      initcounter++;  
 8001dde:	9801      	ldr	r0, [sp, #4]
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8001de0:	4011      	ands	r1, r2
      initcounter++;  
 8001de2:	3001      	adds	r0, #1
 8001de4:	9001      	str	r0, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8001de6:	9801      	ldr	r0, [sp, #4]
 8001de8:	42a0      	cmp	r0, r4
 8001dea:	d001      	beq.n	8001df0 <RTC_EnterInitMode+0x30>
 8001dec:	2900      	cmp	r1, #0
 8001dee:	d0f5      	beq.n	8001ddc <RTC_EnterInitMode+0x1c>
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8001df0:	68d8      	ldr	r0, [r3, #12]
 8001df2:	0640      	lsls	r0, r0, #25
      status = ERROR;
 8001df4:	0fc0      	lsrs	r0, r0, #31
}
 8001df6:	bd16      	pop	{r1, r2, r4, pc}
 8001df8:	40002800 	.word	0x40002800

08001dfc <RTC_ExitInitMode>:
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	4a02      	ldr	r2, [pc, #8]	; (8001e08 <RTC_ExitInitMode+0xc>)
 8001e00:	68d3      	ldr	r3, [r2, #12]
 8001e02:	438b      	bics	r3, r1
 8001e04:	60d3      	str	r3, [r2, #12]
}
 8001e06:	4770      	bx	lr
 8001e08:	40002800 	.word	0x40002800

08001e0c <RTC_Init>:
  RTC->WPR = 0xCA;
 8001e0c:	23ca      	movs	r3, #202	; 0xca
{
 8001e0e:	b570      	push	{r4, r5, r6, lr}
  RTC->WPR = 0xCA;
 8001e10:	4c0e      	ldr	r4, [pc, #56]	; (8001e4c <RTC_Init+0x40>)
{
 8001e12:	0005      	movs	r5, r0
  RTC->WPR = 0xCA;
 8001e14:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8001e16:	3b77      	subs	r3, #119	; 0x77
 8001e18:	6263      	str	r3, [r4, #36]	; 0x24
  if (RTC_EnterInitMode() == ERROR)
 8001e1a:	f7ff ffd1 	bl	8001dc0 <RTC_EnterInitMode>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d011      	beq.n	8001e46 <RTC_Init+0x3a>
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	68a3      	ldr	r3, [r4, #8]
 8001e26:	4393      	bics	r3, r2
 8001e28:	60a3      	str	r3, [r4, #8]
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8001e2a:	68a3      	ldr	r3, [r4, #8]
 8001e2c:	682a      	ldr	r2, [r5, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60a3      	str	r3, [r4, #8]
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8001e32:	68ab      	ldr	r3, [r5, #8]
 8001e34:	6123      	str	r3, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8001e36:	686b      	ldr	r3, [r5, #4]
 8001e38:	6922      	ldr	r2, [r4, #16]
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	6123      	str	r3, [r4, #16]
    RTC_ExitInitMode();
 8001e40:	f7ff ffdc 	bl	8001dfc <RTC_ExitInitMode>
    status = SUCCESS;
 8001e44:	2001      	movs	r0, #1
  RTC->WPR = 0xFF;
 8001e46:	23ff      	movs	r3, #255	; 0xff
 8001e48:	6263      	str	r3, [r4, #36]	; 0x24
}
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}
 8001e4c:	40002800 	.word	0x40002800

08001e50 <RTC_WaitForSynchro>:
  __IO uint32_t synchrocounter = 0;
 8001e50:	2300      	movs	r3, #0
  if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 8001e52:	2220      	movs	r2, #32
{
 8001e54:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t synchrocounter = 0;
 8001e56:	9301      	str	r3, [sp, #4]
  if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <RTC_WaitForSynchro+0x48>)
    status = SUCCESS;
 8001e5a:	2001      	movs	r0, #1
  if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	4211      	tst	r1, r2
 8001e60:	d118      	bne.n	8001e94 <RTC_WaitForSynchro+0x44>
    RTC->WPR = 0xCA;
 8001e62:	21ca      	movs	r1, #202	; 0xca
    } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8001e64:	2480      	movs	r4, #128	; 0x80
    RTC->WPR = 0xCA;
 8001e66:	6259      	str	r1, [r3, #36]	; 0x24
    RTC->WPR = 0x53;
 8001e68:	3977      	subs	r1, #119	; 0x77
 8001e6a:	6259      	str	r1, [r3, #36]	; 0x24
    RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8001e6c:	68d9      	ldr	r1, [r3, #12]
 8001e6e:	309f      	adds	r0, #159	; 0x9f
 8001e70:	4381      	bics	r1, r0
 8001e72:	60d9      	str	r1, [r3, #12]
    } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8001e74:	0224      	lsls	r4, r4, #8
      synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8001e76:	68d9      	ldr	r1, [r3, #12]
      synchrocounter++;  
 8001e78:	9801      	ldr	r0, [sp, #4]
      synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8001e7a:	4011      	ands	r1, r2
      synchrocounter++;  
 8001e7c:	3001      	adds	r0, #1
 8001e7e:	9001      	str	r0, [sp, #4]
    } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8001e80:	9801      	ldr	r0, [sp, #4]
 8001e82:	42a0      	cmp	r0, r4
 8001e84:	d001      	beq.n	8001e8a <RTC_WaitForSynchro+0x3a>
 8001e86:	2900      	cmp	r1, #0
 8001e88:	d0f5      	beq.n	8001e76 <RTC_WaitForSynchro+0x26>
    RTC->WPR = 0xFF;
 8001e8a:	22ff      	movs	r2, #255	; 0xff
    if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8001e8c:	68d8      	ldr	r0, [r3, #12]
    RTC->WPR = 0xFF;
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8001e90:	0680      	lsls	r0, r0, #26
      status = SUCCESS;
 8001e92:	0fc0      	lsrs	r0, r0, #31
}
 8001e94:	bd16      	pop	{r1, r2, r4, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40002800 	.word	0x40002800

08001e9c <RTC_DeInit>:
  RTC->WPR = 0xCA;
 8001e9c:	23ca      	movs	r3, #202	; 0xca
{
 8001e9e:	b510      	push	{r4, lr}
  RTC->WPR = 0xCA;
 8001ea0:	4c0e      	ldr	r4, [pc, #56]	; (8001edc <RTC_DeInit+0x40>)
 8001ea2:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8001ea4:	3b77      	subs	r3, #119	; 0x77
 8001ea6:	6263      	str	r3, [r4, #36]	; 0x24
  if (RTC_EnterInitMode() == ERROR)
 8001ea8:	f7ff ff8a 	bl	8001dc0 <RTC_EnterInitMode>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d012      	beq.n	8001ed6 <RTC_DeInit+0x3a>
    RTC->TR        = (uint32_t)0x00000000;
 8001eb0:	2300      	movs	r3, #0
    RTC->DR        = (uint32_t)0x00002101;
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <RTC_DeInit+0x44>)
    RTC->TR        = (uint32_t)0x00000000;
 8001eb4:	6023      	str	r3, [r4, #0]
    RTC->DR        = (uint32_t)0x00002101;
 8001eb6:	6062      	str	r2, [r4, #4]
    RTC->CR        &= (uint32_t)0x00000000;
 8001eb8:	68a2      	ldr	r2, [r4, #8]
    RTC->PRER      = (uint32_t)0x007F00FF;
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <RTC_DeInit+0x48>)
    RTC->CR        &= (uint32_t)0x00000000;
 8001ebc:	60a3      	str	r3, [r4, #8]
    RTC->PRER      = (uint32_t)0x007F00FF;
 8001ebe:	6122      	str	r2, [r4, #16]
    RTC->ALRMAR    = (uint32_t)0x00000000;
 8001ec0:	61e3      	str	r3, [r4, #28]
    RTC->SHIFTR    = (uint32_t)0x00000000;
 8001ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
    RTC->CAL       = (uint32_t)0x00000000;
 8001ec4:	63e3      	str	r3, [r4, #60]	; 0x3c
    RTC->ALRMASSR  = (uint32_t)0x00000000;
 8001ec6:	6463      	str	r3, [r4, #68]	; 0x44
    RTC->ISR = (uint32_t)0x00000000;
 8001ec8:	60e3      	str	r3, [r4, #12]
    RTC->TAFCR = 0x00000000;
 8001eca:	6423      	str	r3, [r4, #64]	; 0x40
    if (RTC_WaitForSynchro() == ERROR)
 8001ecc:	f7ff ffc0 	bl	8001e50 <RTC_WaitForSynchro>
 8001ed0:	1e43      	subs	r3, r0, #1
 8001ed2:	4198      	sbcs	r0, r3
    status = ERROR;
 8001ed4:	b2c0      	uxtb	r0, r0
  RTC->WPR = 0xFF;  
 8001ed6:	23ff      	movs	r3, #255	; 0xff
 8001ed8:	6263      	str	r3, [r4, #36]	; 0x24
}
 8001eda:	bd10      	pop	{r4, pc}
 8001edc:	40002800 	.word	0x40002800
 8001ee0:	00002101 	.word	0x00002101
 8001ee4:	007f00ff 	.word	0x007f00ff

08001ee8 <RTC_RefClockCmd>:
  RTC->WPR = 0xCA;
 8001ee8:	23ca      	movs	r3, #202	; 0xca
{
 8001eea:	b570      	push	{r4, r5, r6, lr}
  RTC->WPR = 0xCA;
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <RTC_RefClockCmd+0x34>)
{
 8001eee:	0005      	movs	r5, r0
  RTC->WPR = 0xCA;
 8001ef0:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8001ef2:	3b77      	subs	r3, #119	; 0x77
 8001ef4:	6263      	str	r3, [r4, #36]	; 0x24
  if (RTC_EnterInitMode() == ERROR)
 8001ef6:	f7ff ff63 	bl	8001dc0 <RTC_EnterInitMode>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d008      	beq.n	8001f10 <RTC_RefClockCmd+0x28>
 8001efe:	2310      	movs	r3, #16
      RTC->CR |= RTC_CR_REFCKON;
 8001f00:	68a2      	ldr	r2, [r4, #8]
    if (NewState != DISABLE)
 8001f02:	2d00      	cmp	r5, #0
 8001f04:	d007      	beq.n	8001f16 <RTC_RefClockCmd+0x2e>
      RTC->CR |= RTC_CR_REFCKON;
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60a3      	str	r3, [r4, #8]
    RTC_ExitInitMode();
 8001f0a:	f7ff ff77 	bl	8001dfc <RTC_ExitInitMode>
    status = SUCCESS;
 8001f0e:	2001      	movs	r0, #1
  RTC->WPR = 0xFF;
 8001f10:	23ff      	movs	r3, #255	; 0xff
 8001f12:	6263      	str	r3, [r4, #36]	; 0x24
}
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
      RTC->CR &= ~RTC_CR_REFCKON;
 8001f16:	439a      	bics	r2, r3
 8001f18:	60a2      	str	r2, [r4, #8]
 8001f1a:	e7f6      	b.n	8001f0a <RTC_RefClockCmd+0x22>
 8001f1c:	40002800 	.word	0x40002800

08001f20 <RTC_BypassShadowCmd>:
  RTC->WPR = 0xCA;
 8001f20:	22ca      	movs	r2, #202	; 0xca
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <RTC_BypassShadowCmd+0x24>)
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8001f26:	3a77      	subs	r2, #119	; 0x77
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (NewState != DISABLE)
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d006      	beq.n	8001f3c <RTC_BypassShadowCmd+0x1c>
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8001f2e:	6899      	ldr	r1, [r3, #8]
 8001f30:	3a33      	subs	r2, #51	; 0x33
 8001f32:	430a      	orrs	r2, r1
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8001f34:	609a      	str	r2, [r3, #8]
  RTC->WPR = 0xFF;
 8001f36:	22ff      	movs	r2, #255	; 0xff
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f3a:	4770      	bx	lr
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8001f3c:	21df      	movs	r1, #223	; 0xdf
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	400a      	ands	r2, r1
 8001f42:	e7f7      	b.n	8001f34 <RTC_BypassShadowCmd+0x14>
 8001f44:	40002800 	.word	0x40002800

08001f48 <RTC_SetTime>:
{
 8001f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	000c      	movs	r4, r1
 8001f4e:	4d20      	ldr	r5, [pc, #128]	; (8001fd0 <RTC_SetTime+0x88>)
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	7808      	ldrb	r0, [r1, #0]
 8001f54:	784e      	ldrb	r6, [r1, #1]
 8001f56:	788f      	ldrb	r7, [r1, #2]
  if (RTC_Format == RTC_Format_BIN)
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d115      	bne.n	8001f88 <RTC_SetTime+0x40>
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f5c:	68ab      	ldr	r3, [r5, #8]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d100      	bne.n	8001f64 <RTC_SetTime+0x1c>
      RTC_TimeStruct->RTC_H12 = 0x00;
 8001f62:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8001f64:	f7ff ff06 	bl	8001d74 <RTC_ByteToBcd2>
 8001f68:	9001      	str	r0, [sp, #4]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8001f6a:	0030      	movs	r0, r6
 8001f6c:	f7ff ff02 	bl	8001d74 <RTC_ByteToBcd2>
 8001f70:	0006      	movs	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8001f72:	0038      	movs	r0, r7
 8001f74:	f7ff fefe 	bl	8001d74 <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8001f78:	78e7      	ldrb	r7, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8001f7a:	9b01      	ldr	r3, [sp, #4]
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8001f7c:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8001f7e:	4307      	orrs	r7, r0
 8001f80:	0418      	lsls	r0, r3, #16
 8001f82:	4307      	orrs	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8001f84:	0236      	lsls	r6, r6, #8
 8001f86:	e009      	b.n	8001f9c <RTC_SetTime+0x54>
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f88:	68ab      	ldr	r3, [r5, #8]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d100      	bne.n	8001f90 <RTC_SetTime+0x48>
      RTC_TimeStruct->RTC_H12 = 0x00;
 8001f8e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8001f90:	0400      	lsls	r0, r0, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8001f92:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8001f94:	4306      	orrs	r6, r0
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8001f96:	4337      	orrs	r7, r6
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8001f98:	78e6      	ldrb	r6, [r4, #3]
 8001f9a:	0436      	lsls	r6, r6, #16
  RTC->WPR = 0xCA;
 8001f9c:	23ca      	movs	r3, #202	; 0xca
 8001f9e:	626b      	str	r3, [r5, #36]	; 0x24
  RTC->WPR = 0x53;
 8001fa0:	3b77      	subs	r3, #119	; 0x77
 8001fa2:	626b      	str	r3, [r5, #36]	; 0x24
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8001fa4:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode() == ERROR)
 8001fa6:	f7ff ff0b 	bl	8001dc0 <RTC_EnterInitMode>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d00d      	beq.n	8001fca <RTC_SetTime+0x82>
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001fae:	4f09      	ldr	r7, [pc, #36]	; (8001fd4 <RTC_SetTime+0x8c>)
 8001fb0:	403e      	ands	r6, r7
 8001fb2:	602e      	str	r6, [r5, #0]
    RTC_ExitInitMode(); 
 8001fb4:	f7ff ff22 	bl	8001dfc <RTC_ExitInitMode>
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8001fb8:	68ab      	ldr	r3, [r5, #8]
      status = SUCCESS;
 8001fba:	2001      	movs	r0, #1
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8001fbc:	069b      	lsls	r3, r3, #26
 8001fbe:	d404      	bmi.n	8001fca <RTC_SetTime+0x82>
      if (RTC_WaitForSynchro() == ERROR)
 8001fc0:	f7ff ff46 	bl	8001e50 <RTC_WaitForSynchro>
 8001fc4:	1e43      	subs	r3, r0, #1
 8001fc6:	4198      	sbcs	r0, r3
    status = ERROR;
 8001fc8:	b2c0      	uxtb	r0, r0
  RTC->WPR = 0xFF;
 8001fca:	23ff      	movs	r3, #255	; 0xff
 8001fcc:	626b      	str	r3, [r5, #36]	; 0x24
}
 8001fce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fd0:	40002800 	.word	0x40002800
 8001fd4:	007f7f7f 	.word	0x007f7f7f

08001fd8 <RTC_TimeStructInit>:
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8001fdc:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8001fde:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8001fe0:	7083      	strb	r3, [r0, #2]
}
 8001fe2:	4770      	bx	lr

08001fe4 <RTC_GetTime>:
{
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8001fe6:	247f      	movs	r4, #127	; 0x7f
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <RTC_GetTime+0x44>)
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <RTC_GetTime+0x48>)
 8001fec:	681b      	ldr	r3, [r3, #0]
{
 8001fee:	0007      	movs	r7, r0
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8001ff0:	4013      	ands	r3, r2
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8001ff2:	0a1e      	lsrs	r6, r3, #8
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8001ff4:	0c1a      	lsrs	r2, r3, #16
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8001ff6:	4026      	ands	r6, r4
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8001ff8:	203f      	movs	r0, #63	; 0x3f
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001ffa:	401c      	ands	r4, r3
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8001ffc:	2340      	movs	r3, #64	; 0x40
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8001ffe:	4010      	ands	r0, r2
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8002000:	401a      	ands	r2, r3
{
 8002002:	000d      	movs	r5, r1
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002004:	7008      	strb	r0, [r1, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002006:	704e      	strb	r6, [r1, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002008:	708c      	strb	r4, [r1, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800200a:	70ca      	strb	r2, [r1, #3]
  if (RTC_Format == RTC_Format_BIN)
 800200c:	2f00      	cmp	r7, #0
 800200e:	d10a      	bne.n	8002026 <RTC_GetTime+0x42>
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8002010:	f7ff febc 	bl	8001d8c <RTC_Bcd2ToByte>
 8002014:	7028      	strb	r0, [r5, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8002016:	0030      	movs	r0, r6
 8002018:	f7ff feb8 	bl	8001d8c <RTC_Bcd2ToByte>
 800201c:	7068      	strb	r0, [r5, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);
 800201e:	0020      	movs	r0, r4
 8002020:	f7ff feb4 	bl	8001d8c <RTC_Bcd2ToByte>
 8002024:	70a8      	strb	r0, [r5, #2]
}
 8002026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002028:	40002800 	.word	0x40002800
 800202c:	007f7f7f 	.word	0x007f7f7f

08002030 <RTC_GetSubSecond>:
  tmpreg = (uint32_t)(RTC->SSR);
 8002030:	4b01      	ldr	r3, [pc, #4]	; (8002038 <RTC_GetSubSecond+0x8>)
 8002032:	6a98      	ldr	r0, [r3, #40]	; 0x28
  (void) (RTC->DR);
 8002034:	685b      	ldr	r3, [r3, #4]
}
 8002036:	4770      	bx	lr
 8002038:	40002800 	.word	0x40002800

0800203c <RTC_SetDate>:
{
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	000f      	movs	r7, r1
 8002040:	784b      	ldrb	r3, [r1, #1]
 8002042:	78cc      	ldrb	r4, [r1, #3]
 8002044:	788e      	ldrb	r6, [r1, #2]
 8002046:	780d      	ldrb	r5, [r1, #0]
  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8002048:	2800      	cmp	r0, #0
 800204a:	d130      	bne.n	80020ae <RTC_SetDate+0x72>
 800204c:	2210      	movs	r2, #16
 800204e:	4213      	tst	r3, r2
 8002050:	d002      	beq.n	8002058 <RTC_SetDate+0x1c>
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8002052:	4393      	bics	r3, r2
 8002054:	330a      	adds	r3, #10
 8002056:	704b      	strb	r3, [r1, #1]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8002058:	0020      	movs	r0, r4
 800205a:	f7ff fe8b 	bl	8001d74 <RTC_ByteToBcd2>
 800205e:	0004      	movs	r4, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8002060:	7878      	ldrb	r0, [r7, #1]
 8002062:	f7ff fe87 	bl	8001d74 <RTC_ByteToBcd2>
 8002066:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8002068:	0030      	movs	r0, r6
 800206a:	f7ff fe83 	bl	8001d74 <RTC_ByteToBcd2>
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800206e:	036d      	lsls	r5, r5, #13
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8002070:	4328      	orrs	r0, r5
 8002072:	0424      	lsls	r4, r4, #16
 8002074:	4304      	orrs	r4, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8002076:	023f      	lsls	r7, r7, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8002078:	433c      	orrs	r4, r7
  RTC->WPR = 0xCA;
 800207a:	23ca      	movs	r3, #202	; 0xca
 800207c:	4d0f      	ldr	r5, [pc, #60]	; (80020bc <RTC_SetDate+0x80>)
 800207e:	626b      	str	r3, [r5, #36]	; 0x24
  RTC->WPR = 0x53;
 8002080:	3b77      	subs	r3, #119	; 0x77
 8002082:	626b      	str	r3, [r5, #36]	; 0x24
  if (RTC_EnterInitMode() == ERROR)
 8002084:	f7ff fe9c 	bl	8001dc0 <RTC_EnterInitMode>
 8002088:	2800      	cmp	r0, #0
 800208a:	d00d      	beq.n	80020a8 <RTC_SetDate+0x6c>
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <RTC_SetDate+0x84>)
 800208e:	4004      	ands	r4, r0
 8002090:	606c      	str	r4, [r5, #4]
    RTC_ExitInitMode(); 
 8002092:	f7ff feb3 	bl	8001dfc <RTC_ExitInitMode>
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8002096:	68ab      	ldr	r3, [r5, #8]
      status = SUCCESS;
 8002098:	2001      	movs	r0, #1
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 800209a:	069b      	lsls	r3, r3, #26
 800209c:	d404      	bmi.n	80020a8 <RTC_SetDate+0x6c>
      if (RTC_WaitForSynchro() == ERROR)
 800209e:	f7ff fed7 	bl	8001e50 <RTC_WaitForSynchro>
 80020a2:	1e43      	subs	r3, r0, #1
 80020a4:	4198      	sbcs	r0, r3
    status = ERROR;
 80020a6:	b2c0      	uxtb	r0, r0
  RTC->WPR = 0xFF;
 80020a8:	23ff      	movs	r3, #255	; 0xff
 80020aa:	626b      	str	r3, [r5, #36]	; 0x24
}
 80020ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80020ae:	0424      	lsls	r4, r4, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80020b0:	021b      	lsls	r3, r3, #8
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80020b2:	4323      	orrs	r3, r4
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80020b4:	431e      	orrs	r6, r3
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 80020b6:	036c      	lsls	r4, r5, #13
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80020b8:	4334      	orrs	r4, r6
 80020ba:	e7de      	b.n	800207a <RTC_SetDate+0x3e>
 80020bc:	40002800 	.word	0x40002800
 80020c0:	00ffff3f 	.word	0x00ffff3f

080020c4 <RTC_DateStructInit>:
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 80020c4:	2301      	movs	r3, #1
 80020c6:	7003      	strb	r3, [r0, #0]
  RTC_DateStruct->RTC_Date = 1;
 80020c8:	7083      	strb	r3, [r0, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 80020ca:	7043      	strb	r3, [r0, #1]
  RTC_DateStruct->RTC_Year = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	70c3      	strb	r3, [r0, #3]
}
 80020d0:	4770      	bx	lr

080020d2 <RTC_GetDate>:
{
 80020d2:	b570      	push	{r4, r5, r6, lr}
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80020d4:	253f      	movs	r5, #63	; 0x3f
{
 80020d6:	000c      	movs	r4, r1
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <RTC_GetDate+0x42>)
 80020da:	490f      	ldr	r1, [pc, #60]	; (8002118 <RTC_GetDate+0x46>)
 80020dc:	685b      	ldr	r3, [r3, #4]
{
 80020de:	0002      	movs	r2, r0
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80020e0:	400b      	ands	r3, r1
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80020e2:	0c18      	lsrs	r0, r3, #16
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80020e4:	04de      	lsls	r6, r3, #19
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80020e6:	401d      	ands	r5, r3
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 80020e8:	041b      	lsls	r3, r3, #16
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80020ea:	0ef6      	lsrs	r6, r6, #27
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 80020ec:	0f5b      	lsrs	r3, r3, #29
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80020ee:	70e0      	strb	r0, [r4, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80020f0:	7066      	strb	r6, [r4, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80020f2:	70a5      	strb	r5, [r4, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 80020f4:	7023      	strb	r3, [r4, #0]
  if (RTC_Format == RTC_Format_BIN)
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	d10a      	bne.n	8002110 <RTC_GetDate+0x3e>
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 80020fa:	f7ff fe47 	bl	8001d8c <RTC_Bcd2ToByte>
 80020fe:	70e0      	strb	r0, [r4, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8002100:	0030      	movs	r0, r6
 8002102:	f7ff fe43 	bl	8001d8c <RTC_Bcd2ToByte>
 8002106:	7060      	strb	r0, [r4, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8002108:	0028      	movs	r0, r5
 800210a:	f7ff fe3f 	bl	8001d8c <RTC_Bcd2ToByte>
 800210e:	70a0      	strb	r0, [r4, #2]
}
 8002110:	bd70      	pop	{r4, r5, r6, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40002800 	.word	0x40002800
 8002118:	00ffff3f 	.word	0x00ffff3f

0800211c <RTC_SetAlarm>:
{
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	0014      	movs	r4, r2
 8002120:	68a1      	ldr	r1, [r4, #8]
 8002122:	b085      	sub	sp, #20
 8002124:	9100      	str	r1, [sp, #0]
 8002126:	6861      	ldr	r1, [r4, #4]
 8002128:	0003      	movs	r3, r0
 800212a:	4d22      	ldr	r5, [pc, #136]	; (80021b4 <RTC_SetAlarm+0x98>)
 800212c:	2240      	movs	r2, #64	; 0x40
 800212e:	9101      	str	r1, [sp, #4]
 8002130:	78a7      	ldrb	r7, [r4, #2]
 8002132:	7820      	ldrb	r0, [r4, #0]
 8002134:	7866      	ldrb	r6, [r4, #1]
  if (RTC_Format == RTC_Format_BIN)
 8002136:	2b00      	cmp	r3, #0
 8002138:	d120      	bne.n	800217c <RTC_SetAlarm+0x60>
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800213a:	68ab      	ldr	r3, [r5, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	d100      	bne.n	8002142 <RTC_SetAlarm+0x26>
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8002140:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8002142:	f7ff fe17 	bl	8001d74 <RTC_ByteToBcd2>
 8002146:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8002148:	0030      	movs	r0, r6
 800214a:	f7ff fe13 	bl	8001d74 <RTC_ByteToBcd2>
 800214e:	9003      	str	r0, [sp, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8002150:	0038      	movs	r0, r7
 8002152:	f7ff fe0f 	bl	8001d74 <RTC_ByteToBcd2>
 8002156:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8002158:	7b20      	ldrb	r0, [r4, #12]
 800215a:	f7ff fe0b 	bl	8001d74 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	9f00      	ldr	r7, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8002162:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8002164:	431f      	orrs	r7, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8002166:	78e3      	ldrb	r3, [r4, #3]
 8002168:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800216a:	431f      	orrs	r7, r3
 800216c:	9b02      	ldr	r3, [sp, #8]
 800216e:	433e      	orrs	r6, r7
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431e      	orrs	r6, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8002174:	9b03      	ldr	r3, [sp, #12]
 8002176:	021f      	lsls	r7, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8002178:	433e      	orrs	r6, r7
 800217a:	e010      	b.n	800219e <RTC_SetAlarm+0x82>
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800217c:	68ab      	ldr	r3, [r5, #8]
 800217e:	4013      	ands	r3, r2
 8002180:	d100      	bne.n	8002184 <RTC_SetAlarm+0x68>
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8002182:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8002184:	9b00      	ldr	r3, [sp, #0]
 8002186:	9a01      	ldr	r2, [sp, #4]
 8002188:	0400      	lsls	r0, r0, #16
 800218a:	4313      	orrs	r3, r2
 800218c:	431f      	orrs	r7, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800218e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8002190:	4338      	orrs	r0, r7
 8002192:	4330      	orrs	r0, r6
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8002194:	78e6      	ldrb	r6, [r4, #3]
 8002196:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8002198:	4330      	orrs	r0, r6
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800219a:	7b26      	ldrb	r6, [r4, #12]
 800219c:	0636      	lsls	r6, r6, #24
  RTC->WPR = 0xCA;
 800219e:	23ca      	movs	r3, #202	; 0xca
 80021a0:	626b      	str	r3, [r5, #36]	; 0x24
  RTC->WPR = 0x53;
 80021a2:	3b77      	subs	r3, #119	; 0x77
 80021a4:	626b      	str	r3, [r5, #36]	; 0x24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80021a6:	4330      	orrs	r0, r6
  RTC->WPR = 0xFF;
 80021a8:	33ac      	adds	r3, #172	; 0xac
  RTC->ALRMAR = (uint32_t)tmpreg;
 80021aa:	61e8      	str	r0, [r5, #28]
  RTC->WPR = 0xFF;
 80021ac:	626b      	str	r3, [r5, #36]	; 0x24
}
 80021ae:	b005      	add	sp, #20
 80021b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	40002800 	.word	0x40002800

080021b8 <RTC_AlarmStructInit>:
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80021b8:	2300      	movs	r3, #0
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 80021ba:	2201      	movs	r2, #1
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80021bc:	70c3      	strb	r3, [r0, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 80021be:	7003      	strb	r3, [r0, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 80021c0:	7043      	strb	r3, [r0, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 80021c2:	7083      	strb	r3, [r0, #2]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 80021c4:	6083      	str	r3, [r0, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 80021c6:	7302      	strb	r2, [r0, #12]
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 80021c8:	6043      	str	r3, [r0, #4]
}
 80021ca:	4770      	bx	lr

080021cc <RTC_GetAlarm>:
  tmpreg = (uint32_t)(RTC->ALRMAR);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <RTC_GetAlarm+0x64>)
{
 80021ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  tmpreg = (uint32_t)(RTC->ALRMAR);
 80021d0:	69db      	ldr	r3, [r3, #28]
{
 80021d2:	0014      	movs	r4, r2
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80021d4:	2140      	movs	r1, #64	; 0x40
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80021d6:	0c1a      	lsrs	r2, r3, #16
 80021d8:	b2d2      	uxtb	r2, r2
{
 80021da:	9001      	str	r0, [sp, #4]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80021dc:	263f      	movs	r6, #63	; 0x3f
 80021de:	0010      	movs	r0, r2
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80021e0:	400a      	ands	r2, r1
 80021e2:	70e2      	strb	r2, [r4, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80021e4:	0e1a      	lsrs	r2, r3, #24
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80021e6:	4030      	ands	r0, r6
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80021e8:	4016      	ands	r6, r2
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80021ea:	2280      	movs	r2, #128	; 0x80
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80021ec:	257f      	movs	r5, #127	; 0x7f
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80021ee:	05d2      	lsls	r2, r2, #23
 80021f0:	401a      	ands	r2, r3
 80021f2:	60a2      	str	r2, [r4, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <RTC_GetAlarm+0x68>)
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80021f6:	0a1f      	lsrs	r7, r3, #8
 80021f8:	402f      	ands	r7, r5
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 80021fa:	401d      	ands	r5, r3
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80021fc:	4013      	ands	r3, r2
 80021fe:	6063      	str	r3, [r4, #4]
  if (RTC_Format == RTC_Format_BIN)
 8002200:	9b01      	ldr	r3, [sp, #4]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8002202:	7020      	strb	r0, [r4, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8002204:	7067      	strb	r7, [r4, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8002206:	70a5      	strb	r5, [r4, #2]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8002208:	7326      	strb	r6, [r4, #12]
  if (RTC_Format == RTC_Format_BIN)
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10e      	bne.n	800222c <RTC_GetAlarm+0x60>
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800220e:	f7ff fdbd 	bl	8001d8c <RTC_Bcd2ToByte>
 8002212:	7020      	strb	r0, [r4, #0]
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8002214:	0038      	movs	r0, r7
 8002216:	f7ff fdb9 	bl	8001d8c <RTC_Bcd2ToByte>
 800221a:	7060      	strb	r0, [r4, #1]
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800221c:	0028      	movs	r0, r5
 800221e:	f7ff fdb5 	bl	8001d8c <RTC_Bcd2ToByte>
 8002222:	70a0      	strb	r0, [r4, #2]
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8002224:	0030      	movs	r0, r6
 8002226:	f7ff fdb1 	bl	8001d8c <RTC_Bcd2ToByte>
 800222a:	7320      	strb	r0, [r4, #12]
}
 800222c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	40002800 	.word	0x40002800
 8002234:	80808080 	.word	0x80808080

08002238 <RTC_AlarmCmd>:
  __IO uint32_t alarmcounter = 0x00;
 8002238:	2300      	movs	r3, #0
  RTC->WPR = 0xCA;
 800223a:	22ca      	movs	r2, #202	; 0xca
{
 800223c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t alarmcounter = 0x00;
 800223e:	9301      	str	r3, [sp, #4]
  RTC->WPR = 0xCA;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <RTC_AlarmCmd+0x50>)
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002244:	3a77      	subs	r2, #119	; 0x77
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->CR |= (uint32_t)RTC_Alarm;
 8002248:	689a      	ldr	r2, [r3, #8]
  if (NewState != DISABLE)
 800224a:	2900      	cmp	r1, #0
 800224c:	d005      	beq.n	800225a <RTC_AlarmCmd+0x22>
    RTC->CR |= (uint32_t)RTC_Alarm;
 800224e:	4310      	orrs	r0, r2
 8002250:	6098      	str	r0, [r3, #8]
    status = SUCCESS;    
 8002252:	2001      	movs	r0, #1
  RTC->WPR = 0xFF;
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002258:	bd16      	pop	{r1, r2, r4, pc}
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800225a:	2480      	movs	r4, #128	; 0x80
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800225c:	4382      	bics	r2, r0
 800225e:	609a      	str	r2, [r3, #8]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8002260:	01e4      	lsls	r4, r4, #7
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8002262:	0a02      	lsrs	r2, r0, #8
 8002264:	68d9      	ldr	r1, [r3, #12]
      alarmcounter++;  
 8002266:	9801      	ldr	r0, [sp, #4]
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8002268:	4011      	ands	r1, r2
      alarmcounter++;  
 800226a:	3001      	adds	r0, #1
 800226c:	9001      	str	r0, [sp, #4]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800226e:	9801      	ldr	r0, [sp, #4]
 8002270:	42a0      	cmp	r0, r4
 8002272:	d105      	bne.n	8002280 <RTC_AlarmCmd+0x48>
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 8002274:	68d8      	ldr	r0, [r3, #12]
 8002276:	4010      	ands	r0, r2
 8002278:	1e42      	subs	r2, r0, #1
 800227a:	4190      	sbcs	r0, r2
    status = SUCCESS;    
 800227c:	b2c0      	uxtb	r0, r0
 800227e:	e7e9      	b.n	8002254 <RTC_AlarmCmd+0x1c>
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8002280:	2900      	cmp	r1, #0
 8002282:	d0ef      	beq.n	8002264 <RTC_AlarmCmd+0x2c>
 8002284:	e7f6      	b.n	8002274 <RTC_AlarmCmd+0x3c>
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	40002800 	.word	0x40002800

0800228c <RTC_AlarmSubSecondConfig>:
  RTC->WPR = 0xCA;
 800228c:	20ca      	movs	r0, #202	; 0xca
  tmpreg = (uint32_t) (((uint32_t)(RTC_AlarmSubSecondValue)) | ((uint32_t)(RTC_AlarmSubSecondMask) << 24));
 800228e:	0612      	lsls	r2, r2, #24
 8002290:	4311      	orrs	r1, r2
  RTC->WPR = 0xFF;
 8002292:	22ff      	movs	r2, #255	; 0xff
  RTC->WPR = 0xCA;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <RTC_AlarmSubSecondConfig+0x18>)
 8002296:	6258      	str	r0, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002298:	3877      	subs	r0, #119	; 0x77
 800229a:	6258      	str	r0, [r3, #36]	; 0x24
  RTC->ALRMASSR = tmpreg;
 800229c:	6459      	str	r1, [r3, #68]	; 0x44
  RTC->WPR = 0xFF;
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022a0:	4770      	bx	lr
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40002800 	.word	0x40002800

080022a8 <RTC_GetAlarmSubSecond>:
  tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 80022a8:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <RTC_GetAlarmSubSecond+0xc>)
 80022aa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80022ac:	0440      	lsls	r0, r0, #17
 80022ae:	0c40      	lsrs	r0, r0, #17
}
 80022b0:	4770      	bx	lr
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40002800 	.word	0x40002800

080022b8 <RTC_DayLightSavingConfig>:
  RTC->WPR = 0xCA;
 80022b8:	22ca      	movs	r2, #202	; 0xca
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <RTC_DayLightSavingConfig+0x24>)
{
 80022bc:	b510      	push	{r4, lr}
  RTC->WPR = 0xCA;
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80022c0:	3a77      	subs	r2, #119	; 0x77
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4c06      	ldr	r4, [pc, #24]	; (80022e0 <RTC_DayLightSavingConfig+0x28>)
 80022c8:	4022      	ands	r2, r4
 80022ca:	609a      	str	r2, [r3, #8]
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	4311      	orrs	r1, r2
  RTC->WPR = 0xFF;
 80022d0:	22ff      	movs	r2, #255	; 0xff
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 80022d2:	4308      	orrs	r0, r1
 80022d4:	6098      	str	r0, [r3, #8]
  RTC->WPR = 0xFF;
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	40002800 	.word	0x40002800
 80022e0:	fffbffff 	.word	0xfffbffff

080022e4 <RTC_GetStoreOperation>:
  return (RTC->CR & RTC_CR_BCK);
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <RTC_GetStoreOperation+0xc>)
 80022e6:	6898      	ldr	r0, [r3, #8]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	02db      	lsls	r3, r3, #11
 80022ec:	4018      	ands	r0, r3
}
 80022ee:	4770      	bx	lr
 80022f0:	40002800 	.word	0x40002800

080022f4 <RTC_OutputConfig>:
  RTC->WPR = 0xCA;
 80022f4:	22ca      	movs	r2, #202	; 0xca
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <RTC_OutputConfig+0x24>)
{
 80022f8:	b510      	push	{r4, lr}
  RTC->WPR = 0xCA;
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80022fc:	3a77      	subs	r2, #119	; 0x77
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	4c06      	ldr	r4, [pc, #24]	; (800231c <RTC_OutputConfig+0x28>)
 8002304:	4022      	ands	r2, r4
 8002306:	609a      	str	r2, [r3, #8]
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	4311      	orrs	r1, r2
  RTC->WPR = 0xFF;
 800230c:	22ff      	movs	r2, #255	; 0xff
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800230e:	4308      	orrs	r0, r1
 8002310:	6098      	str	r0, [r3, #8]
  RTC->WPR = 0xFF;
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002314:	bd10      	pop	{r4, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40002800 	.word	0x40002800
 800231c:	ff8fffff 	.word	0xff8fffff

08002320 <RTC_CalibOutputCmd>:
  RTC->WPR = 0xCA;
 8002320:	22ca      	movs	r2, #202	; 0xca
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <RTC_CalibOutputCmd+0x28>)
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002326:	3a77      	subs	r2, #119	; 0x77
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
  if (NewState != DISABLE)
 800232a:	2800      	cmp	r0, #0
 800232c:	d007      	beq.n	800233e <RTC_CalibOutputCmd+0x1e>
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	0412      	lsls	r2, r2, #16
 8002334:	430a      	orrs	r2, r1
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8002336:	609a      	str	r2, [r3, #8]
  RTC->WPR = 0xFF; 
 8002338:	22ff      	movs	r2, #255	; 0xff
 800233a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800233c:	4770      	bx	lr
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4902      	ldr	r1, [pc, #8]	; (800234c <RTC_CalibOutputCmd+0x2c>)
 8002342:	400a      	ands	r2, r1
 8002344:	e7f7      	b.n	8002336 <RTC_CalibOutputCmd+0x16>
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	40002800 	.word	0x40002800
 800234c:	ff7fffff 	.word	0xff7fffff

08002350 <RTC_CalibOutputConfig>:
  RTC->WPR = 0xCA;
 8002350:	22ca      	movs	r2, #202	; 0xca
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <RTC_CalibOutputConfig+0x20>)
  RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <RTC_CalibOutputConfig+0x24>)
  RTC->WPR = 0xCA;
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002358:	3a77      	subs	r2, #119	; 0x77
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	400a      	ands	r2, r1
 8002360:	609a      	str	r2, [r3, #8]
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4310      	orrs	r0, r2
  RTC->WPR = 0xFF;
 8002366:	22ff      	movs	r2, #255	; 0xff
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8002368:	6098      	str	r0, [r3, #8]
  RTC->WPR = 0xFF;
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800236c:	4770      	bx	lr
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	40002800 	.word	0x40002800
 8002374:	fff7ffff 	.word	0xfff7ffff

08002378 <RTC_SmoothCalibConfig>:
{
 8002378:	b570      	push	{r4, r5, r6, lr}
  RTC->WPR = 0xCA;
 800237a:	24ca      	movs	r4, #202	; 0xca
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <RTC_SmoothCalibConfig+0x3c>)
 800237e:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002380:	3c77      	subs	r4, #119	; 0x77
 8002382:	625c      	str	r4, [r3, #36]	; 0x24
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8002384:	2480      	movs	r4, #128	; 0x80
 8002386:	68dd      	ldr	r5, [r3, #12]
 8002388:	0264      	lsls	r4, r4, #9
 800238a:	4225      	tst	r5, r4
 800238c:	d006      	beq.n	800239c <RTC_SmoothCalibConfig+0x24>
 800238e:	4d0a      	ldr	r5, [pc, #40]	; (80023b8 <RTC_SmoothCalibConfig+0x40>)
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8002390:	68de      	ldr	r6, [r3, #12]
 8002392:	4226      	tst	r6, r4
 8002394:	d002      	beq.n	800239c <RTC_SmoothCalibConfig+0x24>
 8002396:	3d01      	subs	r5, #1
 8002398:	2d00      	cmp	r5, #0
 800239a:	d1f9      	bne.n	8002390 <RTC_SmoothCalibConfig+0x18>
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800239c:	68dd      	ldr	r5, [r3, #12]
    status = ERROR;
 800239e:	2400      	movs	r4, #0
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 80023a0:	03ed      	lsls	r5, r5, #15
 80023a2:	d403      	bmi.n	80023ac <RTC_SmoothCalibConfig+0x34>
    RTC->CAL = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 80023a4:	4311      	orrs	r1, r2
 80023a6:	4308      	orrs	r0, r1
 80023a8:	63d8      	str	r0, [r3, #60]	; 0x3c
    status = SUCCESS;
 80023aa:	3401      	adds	r4, #1
  RTC->WPR = 0xFF;
 80023ac:	22ff      	movs	r2, #255	; 0xff
}
 80023ae:	0020      	movs	r0, r4
  RTC->WPR = 0xFF;
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	40002800 	.word	0x40002800
 80023b8:	00001001 	.word	0x00001001

080023bc <RTC_TimeStampCmd>:
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RTC_TimeStampCmd+0x2c>)
{
 80023be:	b510      	push	{r4, lr}
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	4c0a      	ldr	r4, [pc, #40]	; (80023ec <RTC_TimeStampCmd+0x30>)
 80023c4:	4014      	ands	r4, r2
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 80023c6:	0022      	movs	r2, r4
 80023c8:	4302      	orrs	r2, r0
  if (NewState != DISABLE)
 80023ca:	2900      	cmp	r1, #0
 80023cc:	d003      	beq.n	80023d6 <RTC_TimeStampCmd+0x1a>
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	4322      	orrs	r2, r4
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 80023d4:	4302      	orrs	r2, r0
  RTC->WPR = 0xCA;
 80023d6:	21ca      	movs	r1, #202	; 0xca
 80023d8:	6259      	str	r1, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80023da:	3977      	subs	r1, #119	; 0x77
 80023dc:	6259      	str	r1, [r3, #36]	; 0x24
  RTC->CR = (uint32_t)tmpreg;
 80023de:	609a      	str	r2, [r3, #8]
  RTC->WPR = 0xFF;
 80023e0:	22ff      	movs	r2, #255	; 0xff
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023e4:	bd10      	pop	{r4, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	40002800 	.word	0x40002800
 80023ec:	fffff7f7 	.word	0xfffff7f7

080023f0 <RTC_GetTimeStamp>:
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <RTC_GetTimeStamp+0x98>)
{
 80023f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 80023f4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
{
 80023f6:	0017      	movs	r7, r2
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <RTC_GetTimeStamp+0x9c>)
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 80023fa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <RTC_GetTimeStamp+0xa0>)
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 80023fe:	4015      	ands	r5, r2
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8002400:	401c      	ands	r4, r3
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002402:	0c2b      	lsrs	r3, r5, #16
{
 8002404:	4684      	mov	ip, r0
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002406:	223f      	movs	r2, #63	; 0x3f
 8002408:	0018      	movs	r0, r3
 800240a:	4010      	ands	r0, r2
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800240c:	0a2a      	lsrs	r2, r5, #8
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800240e:	7008      	strb	r0, [r1, #0]
{
 8002410:	000e      	movs	r6, r1
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8002412:	0011      	movs	r1, r2
 8002414:	227f      	movs	r2, #127	; 0x7f
{
 8002416:	b085      	sub	sp, #20
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8002418:	4011      	ands	r1, r2
 800241a:	9101      	str	r1, [sp, #4]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800241c:	4015      	ands	r5, r2
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800241e:	4669      	mov	r1, sp
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8002420:	3a3f      	subs	r2, #63	; 0x3f
 8002422:	4013      	ands	r3, r2
 8002424:	70f3      	strb	r3, [r6, #3]
  RTC_StampDateStruct->RTC_Year = 0;
 8002426:	2300      	movs	r3, #0
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8002428:	7909      	ldrb	r1, [r1, #4]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800242a:	70b5      	strb	r5, [r6, #2]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800242c:	7071      	strb	r1, [r6, #1]
  RTC_StampDateStruct->RTC_Year = 0;
 800242e:	70fb      	strb	r3, [r7, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002430:	04e3      	lsls	r3, r4, #19
 8002432:	0edb      	lsrs	r3, r3, #27
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	466b      	mov	r3, sp
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8002438:	213f      	movs	r1, #63	; 0x3f
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800243a:	7a1b      	ldrb	r3, [r3, #8]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800243c:	4021      	ands	r1, r4
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800243e:	707b      	strb	r3, [r7, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8002440:	466b      	mov	r3, sp
 8002442:	9103      	str	r1, [sp, #12]
 8002444:	7b1b      	ldrb	r3, [r3, #12]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8002446:	0424      	lsls	r4, r4, #16
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8002448:	70bb      	strb	r3, [r7, #2]
  if (RTC_Format == RTC_Format_BIN)
 800244a:	4663      	mov	r3, ip
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800244c:	0f64      	lsrs	r4, r4, #29
 800244e:	703c      	strb	r4, [r7, #0]
  if (RTC_Format == RTC_Format_BIN)
 8002450:	2b00      	cmp	r3, #0
 8002452:	d116      	bne.n	8002482 <RTC_GetTimeStamp+0x92>
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8002454:	f7ff fc9a 	bl	8001d8c <RTC_Bcd2ToByte>
 8002458:	7030      	strb	r0, [r6, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800245a:	9801      	ldr	r0, [sp, #4]
 800245c:	f7ff fc96 	bl	8001d8c <RTC_Bcd2ToByte>
 8002460:	7070      	strb	r0, [r6, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8002462:	0028      	movs	r0, r5
 8002464:	f7ff fc92 	bl	8001d8c <RTC_Bcd2ToByte>
 8002468:	70b0      	strb	r0, [r6, #2]
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800246a:	9802      	ldr	r0, [sp, #8]
 800246c:	f7ff fc8e 	bl	8001d8c <RTC_Bcd2ToByte>
 8002470:	7078      	strb	r0, [r7, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8002472:	9803      	ldr	r0, [sp, #12]
 8002474:	f7ff fc8a 	bl	8001d8c <RTC_Bcd2ToByte>
 8002478:	70b8      	strb	r0, [r7, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800247a:	0020      	movs	r0, r4
 800247c:	f7ff fc86 	bl	8001d8c <RTC_Bcd2ToByte>
 8002480:	7038      	strb	r0, [r7, #0]
}
 8002482:	b005      	add	sp, #20
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	40002800 	.word	0x40002800
 800248c:	007f7f7f 	.word	0x007f7f7f
 8002490:	00ffff3f 	.word	0x00ffff3f

08002494 <RTC_GetTimeStampSubSecond>:
  return (uint32_t)(RTC->TSSSR);
 8002494:	4b01      	ldr	r3, [pc, #4]	; (800249c <RTC_GetTimeStampSubSecond+0x8>)
 8002496:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 8002498:	4770      	bx	lr
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	40002800 	.word	0x40002800

080024a0 <RTC_TamperTriggerConfig>:
{
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <RTC_TamperTriggerConfig+0x18>)
 80024a2:	0040      	lsls	r0, r0, #1
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 80024a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d102      	bne.n	80024b0 <RTC_TamperTriggerConfig+0x10>
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 80024aa:	4382      	bics	r2, r0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024ae:	4770      	bx	lr
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 80024b0:	4310      	orrs	r0, r2
 80024b2:	6418      	str	r0, [r3, #64]	; 0x40
}
 80024b4:	e7fb      	b.n	80024ae <RTC_TamperTriggerConfig+0xe>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	40002800 	.word	0x40002800

080024bc <RTC_TamperCmd>:
{
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <RTC_TamperCmd+0x14>)
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 80024be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (NewState != DISABLE)
 80024c0:	2900      	cmp	r1, #0
 80024c2:	d002      	beq.n	80024ca <RTC_TamperCmd+0xe>
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 80024c4:	4310      	orrs	r0, r2
 80024c6:	6418      	str	r0, [r3, #64]	; 0x40
}
 80024c8:	4770      	bx	lr
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 80024ca:	4382      	bics	r2, r0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024ce:	e7fb      	b.n	80024c8 <RTC_TamperCmd+0xc>
 80024d0:	40002800 	.word	0x40002800

080024d4 <RTC_TamperFilterConfig>:
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <RTC_TamperFilterConfig+0x14>)
 80024d6:	4905      	ldr	r1, [pc, #20]	; (80024ec <RTC_TamperFilterConfig+0x18>)
 80024d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024da:	400a      	ands	r2, r1
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 80024de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e0:	4310      	orrs	r0, r2
 80024e2:	6418      	str	r0, [r3, #64]	; 0x40
}
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	40002800 	.word	0x40002800
 80024ec:	ffffe7ff 	.word	0xffffe7ff

080024f0 <RTC_TamperSamplingFreqConfig>:
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <RTC_TamperSamplingFreqConfig+0x14>)
 80024f2:	4905      	ldr	r1, [pc, #20]	; (8002508 <RTC_TamperSamplingFreqConfig+0x18>)
 80024f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f6:	400a      	ands	r2, r1
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 80024fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fc:	4310      	orrs	r0, r2
 80024fe:	6418      	str	r0, [r3, #64]	; 0x40
}
 8002500:	4770      	bx	lr
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	40002800 	.word	0x40002800
 8002508:	fffff8ff 	.word	0xfffff8ff

0800250c <RTC_TamperPinsPrechargeDuration>:
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <RTC_TamperPinsPrechargeDuration+0x14>)
 800250e:	4905      	ldr	r1, [pc, #20]	; (8002524 <RTC_TamperPinsPrechargeDuration+0x18>)
 8002510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002512:	400a      	ands	r2, r1
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8002516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002518:	4310      	orrs	r0, r2
 800251a:	6418      	str	r0, [r3, #64]	; 0x40
}
 800251c:	4770      	bx	lr
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40002800 	.word	0x40002800
 8002524:	ffff9fff 	.word	0xffff9fff

08002528 <RTC_TimeStampOnTamperDetectionCmd>:
{
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <RTC_TimeStampOnTamperDetectionCmd+0x18>)
 800252a:	2280      	movs	r2, #128	; 0x80
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800252c:	6c19      	ldr	r1, [r3, #64]	; 0x40
  if (NewState != DISABLE)
 800252e:	2800      	cmp	r0, #0
 8002530:	d002      	beq.n	8002538 <RTC_TimeStampOnTamperDetectionCmd+0x10>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8002532:	430a      	orrs	r2, r1
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002536:	4770      	bx	lr
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 8002538:	4391      	bics	r1, r2
 800253a:	6419      	str	r1, [r3, #64]	; 0x40
}
 800253c:	e7fb      	b.n	8002536 <RTC_TimeStampOnTamperDetectionCmd+0xe>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40002800 	.word	0x40002800

08002544 <RTC_TamperPullUpCmd>:
{
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <RTC_TamperPullUpCmd+0x1c>)
 if (NewState != DISABLE)
 8002546:	2800      	cmp	r0, #0
 8002548:	d004      	beq.n	8002554 <RTC_TamperPullUpCmd+0x10>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800254a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254c:	4905      	ldr	r1, [pc, #20]	; (8002564 <RTC_TamperPullUpCmd+0x20>)
 800254e:	400a      	ands	r2, r1
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002552:	4770      	bx	lr
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002558:	0212      	lsls	r2, r2, #8
 800255a:	430a      	orrs	r2, r1
 800255c:	e7f8      	b.n	8002550 <RTC_TamperPullUpCmd+0xc>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	40002800 	.word	0x40002800
 8002564:	ffff7fff 	.word	0xffff7fff

08002568 <RTC_WriteBackupRegister>:
  __IO uint32_t tmp = 0;
 8002568:	2300      	movs	r3, #0
{
 800256a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800256c:	9301      	str	r3, [sp, #4]
  tmp = RTC_BASE + 0x50;
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <RTC_WriteBackupRegister+0x1c>)
  tmp += (RTC_BKP_DR * 4);
 8002570:	0080      	lsls	r0, r0, #2
  tmp = RTC_BASE + 0x50;
 8002572:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8002574:	9b01      	ldr	r3, [sp, #4]
 8002576:	18c0      	adds	r0, r0, r3
 8002578:	9001      	str	r0, [sp, #4]
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800257a:	9b01      	ldr	r3, [sp, #4]
 800257c:	6019      	str	r1, [r3, #0]
}
 800257e:	b002      	add	sp, #8
 8002580:	4770      	bx	lr
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	40002850 	.word	0x40002850

08002588 <RTC_ReadBackupRegister>:
  __IO uint32_t tmp = 0;
 8002588:	2300      	movs	r3, #0
{
 800258a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800258c:	9301      	str	r3, [sp, #4]
  tmp = RTC_BASE + 0x50;
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <RTC_ReadBackupRegister+0x1c>)
  tmp += (RTC_BKP_DR * 4);
 8002590:	0080      	lsls	r0, r0, #2
  tmp = RTC_BASE + 0x50;
 8002592:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8002594:	9b01      	ldr	r3, [sp, #4]
 8002596:	18c0      	adds	r0, r0, r3
 8002598:	9001      	str	r0, [sp, #4]
  return (*(__IO uint32_t *)tmp);
 800259a:	9b01      	ldr	r3, [sp, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
}
 800259e:	b002      	add	sp, #8
 80025a0:	4770      	bx	lr
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	40002850 	.word	0x40002850

080025a8 <RTC_OutputTypeConfig>:
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <RTC_OutputTypeConfig+0x14>)
 80025aa:	4905      	ldr	r1, [pc, #20]	; (80025c0 <RTC_OutputTypeConfig+0x18>)
 80025ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ae:	400a      	ands	r2, r1
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 80025b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b4:	4310      	orrs	r0, r2
 80025b6:	6418      	str	r0, [r3, #64]	; 0x40
}
 80025b8:	4770      	bx	lr
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	40002800 	.word	0x40002800
 80025c0:	fffbffff 	.word	0xfffbffff

080025c4 <RTC_SynchroShiftConfig>:
  RTC->WPR = 0xCA;
 80025c4:	23ca      	movs	r3, #202	; 0xca
{
 80025c6:	b570      	push	{r4, r5, r6, lr}
  RTC->WPR = 0xCA;
 80025c8:	4c10      	ldr	r4, [pc, #64]	; (800260c <RTC_SynchroShiftConfig+0x48>)
{
 80025ca:	0005      	movs	r5, r0
  RTC->WPR = 0xCA;
 80025cc:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 80025ce:	3b77      	subs	r3, #119	; 0x77
 80025d0:	6263      	str	r3, [r4, #36]	; 0x24
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 80025d2:	68e2      	ldr	r2, [r4, #12]
 80025d4:	3b4b      	subs	r3, #75	; 0x4b
 80025d6:	421a      	tst	r2, r3
 80025d8:	d006      	beq.n	80025e8 <RTC_SynchroShiftConfig+0x24>
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <RTC_SynchroShiftConfig+0x4c>)
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80025dc:	68e0      	ldr	r0, [r4, #12]
 80025de:	4218      	tst	r0, r3
 80025e0:	d002      	beq.n	80025e8 <RTC_SynchroShiftConfig+0x24>
 80025e2:	3a01      	subs	r2, #1
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	d1f9      	bne.n	80025dc <RTC_SynchroShiftConfig+0x18>
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 80025e8:	68e3      	ldr	r3, [r4, #12]
    status = ERROR;
 80025ea:	2000      	movs	r0, #0
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 80025ec:	071b      	lsls	r3, r3, #28
 80025ee:	d409      	bmi.n	8002604 <RTC_SynchroShiftConfig+0x40>
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 80025f0:	68a3      	ldr	r3, [r4, #8]
 80025f2:	06db      	lsls	r3, r3, #27
 80025f4:	d406      	bmi.n	8002604 <RTC_SynchroShiftConfig+0x40>
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 80025f6:	4329      	orrs	r1, r5
 80025f8:	62e1      	str	r1, [r4, #44]	; 0x2c
      if(RTC_WaitForSynchro() == ERROR)
 80025fa:	f7ff fc29 	bl	8001e50 <RTC_WaitForSynchro>
 80025fe:	1e43      	subs	r3, r0, #1
 8002600:	4198      	sbcs	r0, r3
      status = ERROR;
 8002602:	b2c0      	uxtb	r0, r0
  RTC->WPR = 0xFF;
 8002604:	23ff      	movs	r3, #255	; 0xff
 8002606:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002608:	bd70      	pop	{r4, r5, r6, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	40002800 	.word	0x40002800
 8002610:	00001001 	.word	0x00001001

08002614 <RTC_ITConfig>:
  RTC->WPR = 0xCA;
 8002614:	22ca      	movs	r2, #202	; 0xca
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <RTC_ITConfig+0x40>)
{
 8002618:	b510      	push	{r4, lr}
  RTC->WPR = 0xCA;
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800261c:	3a77      	subs	r2, #119	; 0x77
 800261e:	625a      	str	r2, [r3, #36]	; 0x24
 8002620:	3a4f      	subs	r2, #79	; 0x4f
  if (NewState != DISABLE)
 8002622:	2900      	cmp	r1, #0
 8002624:	d00b      	beq.n	800263e <RTC_ITConfig+0x2a>
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8002626:	0001      	movs	r1, r0
 8002628:	689c      	ldr	r4, [r3, #8]
 800262a:	4391      	bics	r1, r2
 800262c:	4321      	orrs	r1, r4
 800262e:	6099      	str	r1, [r3, #8]
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8002630:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002632:	4002      	ands	r2, r0
 8002634:	430a      	orrs	r2, r1
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->WPR = 0xFF; 
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800263c:	bd10      	pop	{r4, pc}
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800263e:	0004      	movs	r4, r0
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	4394      	bics	r4, r2
 8002644:	43a1      	bics	r1, r4
 8002646:	6099      	str	r1, [r3, #8]
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 8002648:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800264a:	4002      	ands	r2, r0
 800264c:	4391      	bics	r1, r2
 800264e:	6419      	str	r1, [r3, #64]	; 0x40
 8002650:	e7f2      	b.n	8002638 <RTC_ITConfig+0x24>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40002800 	.word	0x40002800

08002658 <RTC_GetFlagStatus>:
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <RTC_GetFlagStatus+0x14>)
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <RTC_GetFlagStatus+0x18>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4013      	ands	r3, r2
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 8002660:	4018      	ands	r0, r3
 8002662:	1e43      	subs	r3, r0, #1
 8002664:	4198      	sbcs	r0, r3
  return bitstatus;
 8002666:	b2c0      	uxtb	r0, r0
}
 8002668:	4770      	bx	lr
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	40002800 	.word	0x40002800
 8002670:	00017978 	.word	0x00017978

08002674 <RTC_ClearFlag>:
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));    
 8002674:	4905      	ldr	r1, [pc, #20]	; (800268c <RTC_ClearFlag+0x18>)
 8002676:	4a06      	ldr	r2, [pc, #24]	; (8002690 <RTC_ClearFlag+0x1c>)
 8002678:	4008      	ands	r0, r1
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	4308      	orrs	r0, r1
 800267e:	43c0      	mvns	r0, r0
 8002680:	68d3      	ldr	r3, [r2, #12]
 8002682:	400b      	ands	r3, r1
 8002684:	4318      	orrs	r0, r3
 8002686:	60d0      	str	r0, [r2, #12]
}
 8002688:	4770      	bx	lr
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	0001ff7f 	.word	0x0001ff7f
 8002690:	40002800 	.word	0x40002800

08002694 <RTC_GetITStatus>:
{
 8002694:	b530      	push	{r4, r5, lr}
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
 8002696:	0005      	movs	r5, r0
 8002698:	0c84      	lsrs	r4, r0, #18
 800269a:	40e5      	lsrs	r5, r4
 800269c:	0bec      	lsrs	r4, r5, #15
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800269e:	2504      	movs	r5, #4
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <RTC_GetITStatus+0x34>)
 80026a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
 80026a4:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 80026a6:	402a      	ands	r2, r5
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
 80026a8:	4001      	ands	r1, r0
 80026aa:	4022      	ands	r2, r4
 80026ac:	430a      	orrs	r2, r1
 80026ae:	2100      	movs	r1, #0
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 80026b0:	68db      	ldr	r3, [r3, #12]
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 80026b2:	428a      	cmp	r2, r1
 80026b4:	d005      	beq.n	80026c2 <RTC_GetITStatus+0x2e>
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 80026b6:	0902      	lsrs	r2, r0, #4
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 80026b8:	b298      	uxth	r0, r3
 80026ba:	4010      	ands	r0, r2
 80026bc:	1e43      	subs	r3, r0, #1
 80026be:	4198      	sbcs	r0, r3
 80026c0:	b2c1      	uxtb	r1, r0
}
 80026c2:	0008      	movs	r0, r1
 80026c4:	bd30      	pop	{r4, r5, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40002800 	.word	0x40002800

080026cc <RTC_ClearITPendingBit>:
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 80026cc:	2180      	movs	r1, #128	; 0x80
  tmpreg = (uint32_t)(RTC_IT >> 4);
 80026ce:	0900      	lsrs	r0, r0, #4
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 80026d0:	b280      	uxth	r0, r0
 80026d2:	4308      	orrs	r0, r1
 80026d4:	43c0      	mvns	r0, r0
 80026d6:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <RTC_ClearITPendingBit+0x18>)
 80026d8:	68d3      	ldr	r3, [r2, #12]
 80026da:	400b      	ands	r3, r1
 80026dc:	4318      	orrs	r0, r3
 80026de:	60d0      	str	r0, [r2, #12]
}
 80026e0:	4770      	bx	lr
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	40002800 	.word	0x40002800

080026e8 <SPI_I2S_DeInit>:
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <SPI_I2S_DeInit+0x3c>)
{
 80026ea:	b510      	push	{r4, lr}
  if (SPIx == SPI1)
 80026ec:	4298      	cmp	r0, r3
 80026ee:	d10a      	bne.n	8002706 <SPI_I2S_DeInit+0x1e>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80026f0:	2080      	movs	r0, #128	; 0x80
 80026f2:	2101      	movs	r1, #1
 80026f4:	0140      	lsls	r0, r0, #5
 80026f6:	f7ff fad3 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80026fa:	2080      	movs	r0, #128	; 0x80
 80026fc:	2100      	movs	r1, #0
 80026fe:	0140      	lsls	r0, r0, #5
 8002700:	f7ff face 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  }
}
 8002704:	bd10      	pop	{r4, pc}
    if (SPIx == SPI2)
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <SPI_I2S_DeInit+0x40>)
 8002708:	4298      	cmp	r0, r3
 800270a:	d1fb      	bne.n	8002704 <SPI_I2S_DeInit+0x1c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800270c:	2080      	movs	r0, #128	; 0x80
 800270e:	2101      	movs	r1, #1
 8002710:	01c0      	lsls	r0, r0, #7
 8002712:	f7ff fad1 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002716:	2080      	movs	r0, #128	; 0x80
 8002718:	2100      	movs	r1, #0
 800271a:	01c0      	lsls	r0, r0, #7
 800271c:	f7ff facc 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
}
 8002720:	e7f0      	b.n	8002704 <SPI_I2S_DeInit+0x1c>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	40013000 	.word	0x40013000
 8002728:	40003800 	.word	0x40003800

0800272c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800272c:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800272e:	22e0      	movs	r2, #224	; 0xe0
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002730:	8003      	strh	r3, [r0, #0]
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8002732:	8043      	strh	r3, [r0, #2]
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002734:	00d2      	lsls	r2, r2, #3
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8002736:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8002738:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800273a:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800273c:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800273e:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002740:	3307      	adds	r3, #7
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002742:	8082      	strh	r2, [r0, #4]
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002744:	8203      	strh	r3, [r0, #16]
}
 8002746:	4770      	bx	lr

08002748 <SPI_Init>:

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002748:	23c1      	movs	r3, #193	; 0xc1
  tmpreg = SPIx->CR1;
 800274a:	8802      	ldrh	r2, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK;
 800274c:	019b      	lsls	r3, r3, #6
{
 800274e:	b510      	push	{r4, lr}
  tmpreg &= CR1_CLEAR_MASK;
 8002750:	401a      	ands	r2, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8002752:	89cc      	ldrh	r4, [r1, #14]
 8002754:	880b      	ldrh	r3, [r1, #0]
 8002756:	4323      	orrs	r3, r4
 8002758:	88cc      	ldrh	r4, [r1, #6]
 800275a:	4323      	orrs	r3, r4
 800275c:	890c      	ldrh	r4, [r1, #8]
 800275e:	4323      	orrs	r3, r4
 8002760:	894c      	ldrh	r4, [r1, #10]
 8002762:	4323      	orrs	r3, r4
 8002764:	898c      	ldrh	r4, [r1, #12]
 8002766:	4323      	orrs	r3, r4
 8002768:	4313      	orrs	r3, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800276a:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 800276c:	8883      	ldrh	r3, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <SPI_Init+0x4c>)
 8002770:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8002772:	888a      	ldrh	r2, [r1, #4]
 8002774:	4313      	orrs	r3, r2
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8002776:	2204      	movs	r2, #4
  SPIx->CR2 = tmpreg;
 8002778:	8083      	strh	r3, [r0, #4]
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800277a:	8a0b      	ldrh	r3, [r1, #16]
 800277c:	8203      	strh	r3, [r0, #16]
  tmpreg = SPIx->CR1;
 800277e:	8803      	ldrh	r3, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK2;
 8002780:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8002782:	884a      	ldrh	r2, [r1, #2]
 8002784:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8002786:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8002788:	8b83      	ldrh	r3, [r0, #28]
 800278a:	4a03      	ldr	r2, [pc, #12]	; (8002798 <SPI_Init+0x50>)
 800278c:	4013      	ands	r3, r2
 800278e:	8383      	strh	r3, [r0, #28]
}
 8002790:	bd10      	pop	{r4, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	fffff0ff 	.word	0xfffff0ff
 8002798:	fffff7ff 	.word	0xfffff7ff

0800279c <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800279c:	2300      	movs	r3, #0

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800279e:	2202      	movs	r2, #2
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80027a0:	8003      	strh	r3, [r0, #0]
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80027a2:	8043      	strh	r3, [r0, #2]
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80027a4:	8083      	strh	r3, [r0, #4]
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80027a6:	80c3      	strh	r3, [r0, #6]
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80027a8:	6082      	str	r2, [r0, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80027aa:	8183      	strh	r3, [r0, #12]
}
 80027ac:	4770      	bx	lr

080027ae <I2S_Init>:
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80027ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 80027b0:	4a24      	ldr	r2, [pc, #144]	; (8002844 <I2S_Init+0x96>)
 80027b2:	8b83      	ldrh	r3, [r0, #28]
{
 80027b4:	0005      	movs	r5, r0
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 80027b6:	4013      	ands	r3, r2
 80027b8:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80027ba:	2302      	movs	r3, #2
 80027bc:	8403      	strh	r3, [r0, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80027be:	8b86      	ldrh	r6, [r0, #28]

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80027c0:	6888      	ldr	r0, [r1, #8]
{
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	000c      	movs	r4, r1
  tmpreg = SPIx->I2SCFGR;
 80027c6:	b2b6      	uxth	r6, r6
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80027c8:	4298      	cmp	r0, r3
 80027ca:	d038      	beq.n	800283e <I2S_Init+0x90>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80027cc:	888f      	ldrh	r7, [r1, #4]
      /* Packet length is 32 bits */
      packetlength = 2;
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 80027ce:	a801      	add	r0, sp, #4
 80027d0:	f7ff f99a 	bl	8001b08 <RCC_GetClocksFreq>
      packetlength = 2;
 80027d4:	1e79      	subs	r1, r7, #1
 80027d6:	418f      	sbcs	r7, r1

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	88e2      	ldrh	r2, [r4, #6]
      packetlength = 2;
 80027dc:	3701      	adds	r7, #1
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 80027de:	9801      	ldr	r0, [sp, #4]
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d127      	bne.n	8002836 <I2S_Init+0x88>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80027e6:	0a00      	lsrs	r0, r0, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80027e8:	230a      	movs	r3, #10
 80027ea:	68a1      	ldr	r1, [r4, #8]
 80027ec:	4358      	muls	r0, r3
 80027ee:	f001 faf1 	bl	8003dd4 <__udivsi3>
 80027f2:	3005      	adds	r0, #5
 80027f4:	b280      	uxth	r0, r0
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 80027f6:	210a      	movs	r1, #10
 80027f8:	f001 faec 	bl	8003dd4 <__udivsi3>

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80027fc:	2201      	movs	r2, #1
 80027fe:	4002      	ands	r2, r0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002800:	1a80      	subs	r0, r0, r2
 8002802:	0840      	lsrs	r0, r0, #1
 8002804:	b280      	uxth	r0, r0

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002806:	0213      	lsls	r3, r2, #8
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002808:	1e82      	subs	r2, r0, #2
 800280a:	2afd      	cmp	r2, #253	; 0xfd
 800280c:	d901      	bls.n	8002812 <I2S_Init+0x64>
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 800280e:	2300      	movs	r3, #0
    i2sdiv = 2;
 8002810:	2002      	movs	r0, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8002812:	88e2      	ldrh	r2, [r4, #6]
 8002814:	4318      	orrs	r0, r3
 8002816:	4310      	orrs	r0, r2
 8002818:	8428      	strh	r0, [r5, #32]

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800281a:	8823      	ldrh	r3, [r4, #0]
 800281c:	8862      	ldrh	r2, [r4, #2]
 800281e:	431a      	orrs	r2, r3
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	4313      	orrs	r3, r2
 8002826:	88a2      	ldrh	r2, [r4, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	89a2      	ldrh	r2, [r4, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	431e      	orrs	r6, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 8002830:	83ae      	strh	r6, [r5, #28]
}
 8002832:	b009      	add	sp, #36	; 0x24
 8002834:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002836:	0179      	lsls	r1, r7, #5
 8002838:	f001 facc 	bl	8003dd4 <__udivsi3>
 800283c:	e7d4      	b.n	80027e8 <I2S_Init+0x3a>
    i2sodd = (uint16_t)0;
 800283e:	2300      	movs	r3, #0
 8002840:	e7e2      	b.n	8002808 <I2S_Init+0x5a>
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	fffff040 	.word	0xfffff040

08002848 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002848:	2340      	movs	r3, #64	; 0x40
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800284a:	8802      	ldrh	r2, [r0, #0]
  if (NewState != DISABLE)
 800284c:	2900      	cmp	r1, #0
 800284e:	d002      	beq.n	8002856 <SPI_Cmd+0xe>
    SPIx->CR1 |= SPI_CR1_SPE;
 8002850:	4313      	orrs	r3, r2
 8002852:	8003      	strh	r3, [r0, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8002854:	4770      	bx	lr
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002856:	439a      	bics	r2, r3
 8002858:	8002      	strh	r2, [r0, #0]
}
 800285a:	e7fb      	b.n	8002854 <SPI_Cmd+0xc>

0800285c <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800285c:	2310      	movs	r3, #16
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800285e:	8882      	ldrh	r2, [r0, #4]
  if (NewState != DISABLE)
 8002860:	2900      	cmp	r1, #0
 8002862:	d002      	beq.n	800286a <SPI_TIModeCmd+0xe>
    SPIx->CR2 |= SPI_CR2_FRF;
 8002864:	4313      	orrs	r3, r2
 8002866:	8083      	strh	r3, [r0, #4]
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
  }
}
 8002868:	4770      	bx	lr
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 800286a:	439a      	bics	r2, r3
 800286c:	8082      	strh	r2, [r0, #4]
}
 800286e:	e7fb      	b.n	8002868 <SPI_TIModeCmd+0xc>

08002870 <I2S_Cmd>:
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002870:	2900      	cmp	r1, #0
 8002872:	d005      	beq.n	8002880 <I2S_Cmd+0x10>
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	8b82      	ldrh	r2, [r0, #28]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800287c:	8383      	strh	r3, [r0, #28]
  }
}
 800287e:	4770      	bx	lr
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8002880:	8b83      	ldrh	r3, [r0, #28]
 8002882:	4a01      	ldr	r2, [pc, #4]	; (8002888 <I2S_Cmd+0x18>)
 8002884:	4013      	ands	r3, r2
 8002886:	e7f9      	b.n	800287c <I2S_Cmd+0xc>
 8002888:	fffffbff 	.word	0xfffffbff

0800288c <SPI_DataSizeConfig>:
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 800288c:	8883      	ldrh	r3, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 800288e:	4a02      	ldr	r2, [pc, #8]	; (8002898 <SPI_DataSizeConfig+0xc>)
 8002890:	4013      	ands	r3, r2
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 8002892:	4319      	orrs	r1, r3
  SPIx->CR2 = tmpreg;
 8002894:	8081      	strh	r1, [r0, #4]
}
 8002896:	4770      	bx	lr
 8002898:	fffff0ff 	.word	0xfffff0ff

0800289c <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 800289c:	8883      	ldrh	r3, [r0, #4]
 800289e:	4a03      	ldr	r2, [pc, #12]	; (80028ac <SPI_RxFIFOThresholdConfig+0x10>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 80028a4:	8883      	ldrh	r3, [r0, #4]
 80028a6:	4319      	orrs	r1, r3
 80028a8:	8081      	strh	r1, [r0, #4]
}
 80028aa:	4770      	bx	lr
 80028ac:	ffffefff 	.word	0xffffefff

080028b0 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	01db      	lsls	r3, r3, #7
 80028b4:	4299      	cmp	r1, r3
 80028b6:	d103      	bne.n	80028c0 <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80028b8:	8803      	ldrh	r3, [r0, #0]
 80028ba:	4319      	orrs	r1, r3
 80028bc:	8001      	strh	r1, [r0, #0]
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  }
}
 80028be:	4770      	bx	lr
    SPIx->CR1 &= SPI_Direction_Rx;
 80028c0:	8803      	ldrh	r3, [r0, #0]
 80028c2:	4a02      	ldr	r2, [pc, #8]	; (80028cc <SPI_BiDirectionalLineConfig+0x1c>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	8003      	strh	r3, [r0, #0]
}
 80028c8:	e7f9      	b.n	80028be <SPI_BiDirectionalLineConfig+0xe>
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	ffffbfff 	.word	0xffffbfff

080028d0 <SPI_NSSInternalSoftwareConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <SPI_NSSInternalSoftwareConfig+0x1c>)
 80028d2:	4299      	cmp	r1, r3
 80028d4:	d005      	beq.n	80028e2 <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	8802      	ldrh	r2, [r0, #0]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4313      	orrs	r3, r2
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80028de:	8003      	strh	r3, [r0, #0]
  }
}
 80028e0:	4770      	bx	lr
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80028e2:	8803      	ldrh	r3, [r0, #0]
 80028e4:	4a02      	ldr	r2, [pc, #8]	; (80028f0 <SPI_NSSInternalSoftwareConfig+0x20>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	e7f9      	b.n	80028de <SPI_NSSInternalSoftwareConfig+0xe>
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	0000feff 	.word	0x0000feff
 80028f0:	fffffeff 	.word	0xfffffeff

080028f4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80028f4:	2304      	movs	r3, #4
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 80028f6:	8882      	ldrh	r2, [r0, #4]
  if (NewState != DISABLE)
 80028f8:	2900      	cmp	r1, #0
 80028fa:	d002      	beq.n	8002902 <SPI_SSOutputCmd+0xe>
    SPIx->CR2 |= SPI_CR2_SSOE;
 80028fc:	4313      	orrs	r3, r2
 80028fe:	8083      	strh	r3, [r0, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
  }
}
 8002900:	4770      	bx	lr
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8002902:	439a      	bics	r2, r3
 8002904:	8082      	strh	r2, [r0, #4]
}
 8002906:	e7fb      	b.n	8002900 <SPI_SSOutputCmd+0xc>

08002908 <SPI_NSSPulseModeCmd>:
  * @param  NewState: new state of the NSS pulse management mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002908:	2308      	movs	r3, #8
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 800290a:	8882      	ldrh	r2, [r0, #4]
  if (NewState != DISABLE)
 800290c:	2900      	cmp	r1, #0
 800290e:	d002      	beq.n	8002916 <SPI_NSSPulseModeCmd+0xe>
    SPIx->CR2 |= SPI_CR2_NSSP;
 8002910:	4313      	orrs	r3, r2
 8002912:	8083      	strh	r3, [r0, #4]
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
  }
}
 8002914:	4770      	bx	lr
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 8002916:	439a      	bics	r2, r3
 8002918:	8082      	strh	r2, [r0, #4]
}
 800291a:	e7fb      	b.n	8002914 <SPI_NSSPulseModeCmd+0xc>

0800291c <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 800291c:	7301      	strb	r1, [r0, #12]
}
 800291e:	4770      	bx	lr

08002920 <SPI_I2S_SendData16>:
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8002920:	8181      	strh	r1, [r0, #12]
}
 8002922:	4770      	bx	lr

08002924 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8002924:	7b00      	ldrb	r0, [r0, #12]
 8002926:	b2c0      	uxtb	r0, r0
}
 8002928:	4770      	bx	lr

0800292a <SPI_I2S_ReceiveData16>:
  *         the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
  return SPIx->DR;
 800292a:	8980      	ldrh	r0, [r0, #12]
 800292c:	b280      	uxth	r0, r0
}
 800292e:	4770      	bx	lr

08002930 <SPI_CRCLengthConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 8002930:	8803      	ldrh	r3, [r0, #0]
 8002932:	4a03      	ldr	r2, [pc, #12]	; (8002940 <SPI_CRCLengthConfig+0x10>)
 8002934:	4013      	ands	r3, r2
 8002936:	8003      	strh	r3, [r0, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 8002938:	8803      	ldrh	r3, [r0, #0]
 800293a:	4319      	orrs	r1, r3
 800293c:	8001      	strh	r1, [r0, #0]
}
 800293e:	4770      	bx	lr
 8002940:	fffff7ff 	.word	0xfffff7ff

08002944 <SPI_CalculateCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002944:	2900      	cmp	r1, #0
 8002946:	d005      	beq.n	8002954 <SPI_CalculateCRC+0x10>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	8802      	ldrh	r2, [r0, #0]
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8002950:	8003      	strh	r3, [r0, #0]
  }
}
 8002952:	4770      	bx	lr
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8002954:	8803      	ldrh	r3, [r0, #0]
 8002956:	4a01      	ldr	r2, [pc, #4]	; (800295c <SPI_CalculateCRC+0x18>)
 8002958:	4013      	ands	r3, r2
 800295a:	e7f9      	b.n	8002950 <SPI_CalculateCRC+0xc>
 800295c:	ffffdfff 	.word	0xffffdfff

08002960 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	8802      	ldrh	r2, [r0, #0]
 8002964:	015b      	lsls	r3, r3, #5
 8002966:	4313      	orrs	r3, r2
 8002968:	8003      	strh	r3, [r0, #0]
}
 800296a:	4770      	bx	lr

0800296c <SPI_GetCRC>:
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 800296c:	2901      	cmp	r1, #1
 800296e:	d002      	beq.n	8002976 <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002970:	8b00      	ldrh	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002972:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002974:	4770      	bx	lr
    crcreg = SPIx->RXCRCR;
 8002976:	8a80      	ldrh	r0, [r0, #20]
 8002978:	e7fb      	b.n	8002972 <SPI_GetCRC+0x6>

0800297a <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800297a:	8a00      	ldrh	r0, [r0, #16]
 800297c:	b280      	uxth	r0, r0
}
 800297e:	4770      	bx	lr

08002980 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002980:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8002982:	2a00      	cmp	r2, #0
 8002984:	d002      	beq.n	800298c <SPI_I2S_DMACmd+0xc>
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002986:	4319      	orrs	r1, r3
 8002988:	8081      	strh	r1, [r0, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800298a:	4770      	bx	lr
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800298c:	438b      	bics	r3, r1
 800298e:	8083      	strh	r3, [r0, #4]
}
 8002990:	e7fb      	b.n	800298a <SPI_I2S_DMACmd+0xa>

08002992 <SPI_LastDMATransferCmd>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 8002992:	8883      	ldrh	r3, [r0, #4]
 8002994:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <SPI_LastDMATransferCmd+0x12>)
 8002996:	4013      	ands	r3, r2
 8002998:	8083      	strh	r3, [r0, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 800299a:	8883      	ldrh	r3, [r0, #4]
 800299c:	4319      	orrs	r1, r3
 800299e:	8081      	strh	r1, [r0, #4]
}
 80029a0:	4770      	bx	lr
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	ffff9fff 	.word	0xffff9fff

080029a8 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80029a8:	2301      	movs	r3, #1
 80029aa:	0909      	lsrs	r1, r1, #4
 80029ac:	408b      	lsls	r3, r1
 80029ae:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 80029b0:	2a00      	cmp	r2, #0
 80029b2:	d003      	beq.n	80029bc <SPI_I2S_ITConfig+0x14>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80029b4:	8882      	ldrh	r2, [r0, #4]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	8083      	strh	r3, [r0, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80029ba:	4770      	bx	lr
    SPIx->CR2 &= (uint16_t)~itmask;
 80029bc:	8882      	ldrh	r2, [r0, #4]
 80029be:	439a      	bics	r2, r3
 80029c0:	8082      	strh	r2, [r0, #4]
}
 80029c2:	e7fa      	b.n	80029ba <SPI_I2S_ITConfig+0x12>

080029c4 <SPI_GetTransmissionFIFOStatus>:
  *          - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 80029c4:	23c0      	movs	r3, #192	; 0xc0
 80029c6:	8900      	ldrh	r0, [r0, #8]
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	4018      	ands	r0, r3
}
 80029cc:	4770      	bx	lr

080029ce <SPI_GetReceptionFIFOStatus>:
  *          - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	8900      	ldrh	r0, [r0, #8]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4018      	ands	r0, r3
}
 80029d6:	4770      	bx	lr

080029d8 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80029d8:	8900      	ldrh	r0, [r0, #8]
 80029da:	4008      	ands	r0, r1
 80029dc:	1e41      	subs	r1, r0, #1
 80029de:	4188      	sbcs	r0, r1
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80029e0:	b2c0      	uxtb	r0, r0
}
 80029e2:	4770      	bx	lr

080029e4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80029e4:	43c9      	mvns	r1, r1
 80029e6:	b289      	uxth	r1, r1
 80029e8:	8101      	strh	r1, [r0, #8]
}
 80029ea:	4770      	bx	lr

080029ec <SPI_I2S_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80029ec:	2301      	movs	r3, #1
{
 80029ee:	b530      	push	{r4, r5, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80029f0:	8882      	ldrh	r2, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80029f2:	8904      	ldrh	r4, [r0, #8]
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80029f4:	200f      	movs	r0, #15
 80029f6:	001d      	movs	r5, r3
 80029f8:	4008      	ands	r0, r1
 80029fa:	4085      	lsls	r5, r0
  enablestatus = (SPIx->CR2 & itmask) ;
 80029fc:	b292      	uxth	r2, r2
 80029fe:	2000      	movs	r0, #0
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002a00:	4225      	tst	r5, r4
 8002a02:	d005      	beq.n	8002a10 <SPI_I2S_GetITStatus+0x24>
  itmask = 0x01 << itmask;
 8002a04:	0909      	lsrs	r1, r1, #4
 8002a06:	408b      	lsls	r3, r1
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	4183      	sbcs	r3, r0
 8002a0e:	b2d8      	uxtb	r0, r3
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002a10:	bd30      	pop	{r4, r5, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)

08002a14 <SYSCFG_DeInit>:
  * @note   To unlock the configuration, perform a system reset.
  */
void SYSCFG_DeInit(void)
{
  /* Set SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 8002a14:	2103      	movs	r1, #3
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <SYSCFG_DeInit+0x20>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
  /* Set EXTICRx registers to reset value */
  SYSCFG->EXTICR[0] = 0;
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[1] = 0;
 8002a22:	60da      	str	r2, [r3, #12]
  SYSCFG->EXTICR[2] = 0;
 8002a24:	611a      	str	r2, [r3, #16]
  SYSCFG->EXTICR[3] = 0;
 8002a26:	615a      	str	r2, [r3, #20]
  /* Set CFGR2 register to reset value: clear SRAM parity error flag */
  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_CFGR2_SRAM_PE;
 8002a28:	6999      	ldr	r1, [r3, #24]
 8002a2a:	3201      	adds	r2, #1
 8002a2c:	32ff      	adds	r2, #255	; 0xff
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	619a      	str	r2, [r3, #24]
}
 8002a32:	4770      	bx	lr
 8002a34:	40010000 	.word	0x40010000

08002a38 <SYSCFG_MemoryRemapConfig>:

  /* Get CFGR1 register value */
  tmpctrl = SYSCFG->CFGR1;

  /* Clear MEM_MODE bits */
  tmpctrl &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 8002a38:	2103      	movs	r1, #3
  tmpctrl = SYSCFG->CFGR1;
 8002a3a:	4a03      	ldr	r2, [pc, #12]	; (8002a48 <SYSCFG_MemoryRemapConfig+0x10>)
 8002a3c:	6813      	ldr	r3, [r2, #0]
  tmpctrl &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 8002a3e:	438b      	bics	r3, r1

  /* Set the new MEM_MODE bits value */
  tmpctrl |= (uint32_t) SYSCFG_MemoryRemap;
 8002a40:	4318      	orrs	r0, r3

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpctrl;
 8002a42:	6010      	str	r0, [r2, #0]
}
 8002a44:	4770      	bx	lr
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	40010000 	.word	0x40010000

08002a4c <SYSCFG_I2CFastModePlusConfig>:
  * @note   ENABLE:  Enable fast mode plus driving capability for selected pin
  * @note   DISABLE: Disable fast mode plus driving capability for selected pin
  * @retval None
  */
void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
{
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <SYSCFG_I2CFastModePlusConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable fast mode plus driving capability for selected pin */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 8002a4e:	681a      	ldr	r2, [r3, #0]
  if (NewState != DISABLE)
 8002a50:	2900      	cmp	r1, #0
 8002a52:	d002      	beq.n	8002a5a <SYSCFG_I2CFastModePlusConfig+0xe>
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 8002a54:	4310      	orrs	r0, r2
 8002a56:	6018      	str	r0, [r3, #0]
  else
  {
    /* Disable fast mode plus driving capability for selected pin */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
  }
}
 8002a58:	4770      	bx	lr
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
 8002a5a:	4382      	bics	r2, r0
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	e7fb      	b.n	8002a58 <SYSCFG_I2CFastModePlusConfig+0xc>
 8002a60:	40010000 	.word	0x40010000

08002a64 <SYSCFG_DMAChannelRemapConfig>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	f7ff fff1 	bl	8002a4c <SYSCFG_I2CFastModePlusConfig>
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002a6c:	2303      	movs	r3, #3
{
 8002a6e:	b510      	push	{r4, lr}
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002a70:	240f      	movs	r4, #15
 8002a72:	400b      	ands	r3, r1
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	409c      	lsls	r4, r3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002a78:	4098      	lsls	r0, r3
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <SYSCFG_EXTILineConfig+0x24>)
 8002a7c:	0889      	lsrs	r1, r1, #2
 8002a7e:	0089      	lsls	r1, r1, #2
 8002a80:	1889      	adds	r1, r1, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002a82:	688a      	ldr	r2, [r1, #8]
 8002a84:	43a2      	bics	r2, r4
 8002a86:	608a      	str	r2, [r1, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002a88:	688a      	ldr	r2, [r1, #8]
 8002a8a:	4310      	orrs	r0, r2
 8002a8c:	6088      	str	r0, [r1, #8]
}
 8002a8e:	bd10      	pop	{r4, pc}
 8002a90:	40010000 	.word	0x40010000

08002a94 <SYSCFG_GetFlagStatus>:

  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  /* Check the status of the specified SPI flag */
  if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
 8002a94:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <SYSCFG_GetFlagStatus+0xc>)
 8002a96:	6998      	ldr	r0, [r3, #24]
 8002a98:	05c0      	lsls	r0, r0, #23
  {
    /* SYSCFG_Flag is reset */
    bitstatus = RESET;
  }
  /* Return the SYSCFG_Flag status */
  return  bitstatus;
 8002a9a:	0fc0      	lsrs	r0, r0, #31
}
 8002a9c:	4770      	bx	lr
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	40010000 	.word	0x40010000

08002aa4 <SYSCFG_ClearFlag>:
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
 8002aa4:	4a02      	ldr	r2, [pc, #8]	; (8002ab0 <SYSCFG_ClearFlag+0xc>)
 8002aa6:	6993      	ldr	r3, [r2, #24]
 8002aa8:	4318      	orrs	r0, r3
 8002aaa:	6190      	str	r0, [r2, #24]
}
 8002aac:	4770      	bx	lr
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40010000 	.word	0x40010000

08002ab4 <SYSCFG_BreakConfig>:
 8002ab4:	b510      	push	{r4, lr}
 8002ab6:	f7ff fff5 	bl	8002aa4 <SYSCFG_ClearFlag>
 8002aba:	bd10      	pop	{r4, pc}

08002abc <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002abe:	2601      	movs	r6, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002ac0:	27f3      	movs	r7, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	431a      	orrs	r2, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ac6:	230a      	movs	r3, #10
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002ac8:	8c04      	ldrh	r4, [r0, #32]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002aca:	4331      	orrs	r1, r6
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002acc:	43b4      	bics	r4, r6
 8002ace:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad0:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ad2:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002ad4:	43bc      	bics	r4, r7
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ad6:	439d      	bics	r5, r3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002ad8:	4322      	orrs	r2, r4
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002ada:	4329      	orrs	r1, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002adc:	b292      	uxth	r2, r2
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ade:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ae0:	8401      	strh	r1, [r0, #32]
}
 8002ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae4 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002ae6:	2510      	movs	r5, #16
{
 8002ae8:	0017      	movs	r7, r2
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002aea:	8c02      	ldrh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002aec:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002aee:	43aa      	bics	r2, r5
 8002af0:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	8b06      	ldrh	r6, [r0, #24]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002af4:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <TI2_Config+0x30>)
  tmpccer = TIMx->CCER;
 8002af6:	8c04      	ldrh	r4, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002af8:	4016      	ands	r6, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002afa:	023a      	lsls	r2, r7, #8
 8002afc:	431a      	orrs	r2, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002afe:	23a0      	movs	r3, #160	; 0xa0
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002b00:	0109      	lsls	r1, r1, #4
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8002b02:	4329      	orrs	r1, r5
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b04:	439c      	bics	r4, r3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002b06:	4332      	orrs	r2, r6
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8002b08:	4321      	orrs	r1, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002b0a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8002b0c:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b0e:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b10:	8401      	strh	r1, [r0, #32]
}
 8002b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b14:	00000cff 	.word	0x00000cff

08002b18 <TIM_DeInit>:
  if (TIMx == TIM1)
 8002b18:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <TIM_DeInit+0xc0>)
{
 8002b1a:	b510      	push	{r4, lr}
  if (TIMx == TIM1)
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	d10a      	bne.n	8002b36 <TIM_DeInit+0x1e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002b20:	2080      	movs	r0, #128	; 0x80
 8002b22:	2101      	movs	r1, #1
 8002b24:	0100      	lsls	r0, r0, #4
 8002b26:	f7ff f8bb 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002b2a:	2080      	movs	r0, #128	; 0x80
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	0100      	lsls	r0, r0, #4
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8002b30:	f7ff f8b6 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
}
 8002b34:	e00b      	b.n	8002b4e <TIM_DeInit+0x36>
  else if (TIMx == TIM2)
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	05db      	lsls	r3, r3, #23
 8002b3a:	4298      	cmp	r0, r3
 8002b3c:	d108      	bne.n	8002b50 <TIM_DeInit+0x38>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002b3e:	2101      	movs	r1, #1
 8002b40:	0008      	movs	r0, r1
 8002b42:	f7ff f8b9 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002b46:	2100      	movs	r1, #0
 8002b48:	2001      	movs	r0, #1
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8002b4a:	f7ff f8b5 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
}
 8002b4e:	bd10      	pop	{r4, pc}
  else if (TIMx == TIM3)
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <TIM_DeInit+0xc4>)
 8002b52:	4298      	cmp	r0, r3
 8002b54:	d106      	bne.n	8002b64 <TIM_DeInit+0x4c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002b56:	2101      	movs	r1, #1
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7ff f8ad 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2002      	movs	r0, #2
 8002b62:	e7f2      	b.n	8002b4a <TIM_DeInit+0x32>
  else if (TIMx == TIM6)
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <TIM_DeInit+0xc8>)
 8002b66:	4298      	cmp	r0, r3
 8002b68:	d106      	bne.n	8002b78 <TIM_DeInit+0x60>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2010      	movs	r0, #16
 8002b6e:	f7ff f8a3 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002b72:	2100      	movs	r1, #0
 8002b74:	2010      	movs	r0, #16
 8002b76:	e7e8      	b.n	8002b4a <TIM_DeInit+0x32>
  else if (TIMx == TIM14) 
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <TIM_DeInit+0xcc>)
 8002b7a:	4298      	cmp	r0, r3
 8002b7c:	d108      	bne.n	8002b90 <TIM_DeInit+0x78>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002b7e:	2080      	movs	r0, #128	; 0x80
 8002b80:	2101      	movs	r1, #1
 8002b82:	0040      	lsls	r0, r0, #1
 8002b84:	f7ff f898 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8002b88:	2080      	movs	r0, #128	; 0x80
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	0040      	lsls	r0, r0, #1
 8002b8e:	e7dc      	b.n	8002b4a <TIM_DeInit+0x32>
  else if (TIMx == TIM15)
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <TIM_DeInit+0xd0>)
 8002b92:	4298      	cmp	r0, r3
 8002b94:	d108      	bne.n	8002ba8 <TIM_DeInit+0x90>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8002b96:	2080      	movs	r0, #128	; 0x80
 8002b98:	2101      	movs	r1, #1
 8002b9a:	0240      	lsls	r0, r0, #9
 8002b9c:	f7ff f880 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8002ba0:	2080      	movs	r0, #128	; 0x80
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	0240      	lsls	r0, r0, #9
 8002ba6:	e7c3      	b.n	8002b30 <TIM_DeInit+0x18>
  else if (TIMx == TIM16)
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <TIM_DeInit+0xd4>)
 8002baa:	4298      	cmp	r0, r3
 8002bac:	d108      	bne.n	8002bc0 <TIM_DeInit+0xa8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002bae:	2080      	movs	r0, #128	; 0x80
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	0280      	lsls	r0, r0, #10
 8002bb4:	f7ff f874 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8002bb8:	2080      	movs	r0, #128	; 0x80
 8002bba:	2100      	movs	r1, #0
 8002bbc:	0280      	lsls	r0, r0, #10
 8002bbe:	e7b7      	b.n	8002b30 <TIM_DeInit+0x18>
    if (TIMx == TIM17)
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <TIM_DeInit+0xd8>)
 8002bc2:	4298      	cmp	r0, r3
 8002bc4:	d1c3      	bne.n	8002b4e <TIM_DeInit+0x36>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002bc6:	2080      	movs	r0, #128	; 0x80
 8002bc8:	2101      	movs	r1, #1
 8002bca:	02c0      	lsls	r0, r0, #11
 8002bcc:	f7ff f868 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8002bd0:	2080      	movs	r0, #128	; 0x80
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	02c0      	lsls	r0, r0, #11
 8002bd6:	e7ab      	b.n	8002b30 <TIM_DeInit+0x18>
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40001000 	.word	0x40001000
 8002be4:	40002000 	.word	0x40002000
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40014400 	.word	0x40014400
 8002bf0:	40014800 	.word	0x40014800

08002bf4 <TIM_TimeBaseInit>:
{
 8002bf4:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;  
 8002bf6:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8002bf8:	4c15      	ldr	r4, [pc, #84]	; (8002c50 <TIM_TimeBaseInit+0x5c>)
  tmpcr1 = TIMx->CR1;  
 8002bfa:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8002bfc:	42a0      	cmp	r0, r4
 8002bfe:	d006      	beq.n	8002c0e <TIM_TimeBaseInit+0x1a>
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	05d2      	lsls	r2, r2, #23
 8002c04:	4290      	cmp	r0, r2
 8002c06:	d002      	beq.n	8002c0e <TIM_TimeBaseInit+0x1a>
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <TIM_TimeBaseInit+0x60>)
 8002c0a:	4290      	cmp	r0, r2
 8002c0c:	d103      	bne.n	8002c16 <TIM_TimeBaseInit+0x22>
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002c0e:	2270      	movs	r2, #112	; 0x70
 8002c10:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002c12:	884a      	ldrh	r2, [r1, #2]
 8002c14:	4313      	orrs	r3, r2
  if(TIMx != TIM6)
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <TIM_TimeBaseInit+0x64>)
 8002c18:	4290      	cmp	r0, r2
 8002c1a:	d003      	beq.n	8002c24 <TIM_TimeBaseInit+0x30>
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <TIM_TimeBaseInit+0x68>)
 8002c1e:	890d      	ldrh	r5, [r1, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002c24:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002c26:	684b      	ldr	r3, [r1, #4]
 8002c28:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002c2a:	880b      	ldrh	r3, [r1, #0]
 8002c2c:	8503      	strh	r3, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8002c2e:	42a0      	cmp	r0, r4
 8002c30:	d008      	beq.n	8002c44 <TIM_TimeBaseInit+0x50>
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <TIM_TimeBaseInit+0x6c>)
 8002c34:	4298      	cmp	r0, r3
 8002c36:	d005      	beq.n	8002c44 <TIM_TimeBaseInit+0x50>
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <TIM_TimeBaseInit+0x70>)
 8002c3a:	4298      	cmp	r0, r3
 8002c3c:	d002      	beq.n	8002c44 <TIM_TimeBaseInit+0x50>
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <TIM_TimeBaseInit+0x74>)
 8002c40:	4298      	cmp	r0, r3
 8002c42:	d101      	bne.n	8002c48 <TIM_TimeBaseInit+0x54>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002c44:	7a8b      	ldrb	r3, [r1, #10]
 8002c46:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002c48:	2301      	movs	r3, #1
 8002c4a:	8283      	strh	r3, [r0, #20]
}
 8002c4c:	bd30      	pop	{r4, r5, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40001000 	.word	0x40001000
 8002c5c:	fffffcff 	.word	0xfffffcff
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40014400 	.word	0x40014400
 8002c68:	40014800 	.word	0x40014800

08002c6c <TIM_TimeBaseStructInit>:
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	425b      	negs	r3, r3
 8002c70:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002c72:	2300      	movs	r3, #0
 8002c74:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002c76:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002c78:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002c7a:	7283      	strb	r3, [r0, #10]
}
 8002c7c:	4770      	bx	lr

08002c7e <TIM_PrescalerConfig>:
  TIMx->PSC = Prescaler;
 8002c7e:	8501      	strh	r1, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode;
 8002c80:	8282      	strh	r2, [r0, #20]
}
 8002c82:	4770      	bx	lr

08002c84 <TIM_CounterModeConfig>:
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002c84:	2270      	movs	r2, #112	; 0x70
  tmpcr1 = TIMx->CR1;
 8002c86:	8803      	ldrh	r3, [r0, #0]
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002c88:	4393      	bics	r3, r2
  tmpcr1 |= TIM_CounterMode;
 8002c8a:	4319      	orrs	r1, r3
  TIMx->CR1 = tmpcr1;
 8002c8c:	8001      	strh	r1, [r0, #0]
}
 8002c8e:	4770      	bx	lr

08002c90 <TIM_SetCounter>:
  TIMx->CNT = Counter;
 8002c90:	6241      	str	r1, [r0, #36]	; 0x24
}
 8002c92:	4770      	bx	lr

08002c94 <TIM_SetAutoreload>:
  TIMx->ARR = Autoreload;
 8002c94:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8002c96:	4770      	bx	lr

08002c98 <TIM_GetCounter>:
  return TIMx->CNT;
 8002c98:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002c9a:	4770      	bx	lr

08002c9c <TIM_GetPrescaler>:
  return TIMx->PSC;
 8002c9c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8002c9e:	b280      	uxth	r0, r0
}
 8002ca0:	4770      	bx	lr

08002ca2 <TIM_UpdateDisableConfig>:
{
 8002ca2:	2302      	movs	r3, #2
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002ca4:	8802      	ldrh	r2, [r0, #0]
  if (NewState != DISABLE)
 8002ca6:	2900      	cmp	r1, #0
 8002ca8:	d002      	beq.n	8002cb0 <TIM_UpdateDisableConfig+0xe>
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002caa:	4313      	orrs	r3, r2
 8002cac:	8003      	strh	r3, [r0, #0]
}
 8002cae:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8002cb0:	439a      	bics	r2, r3
 8002cb2:	8002      	strh	r2, [r0, #0]
}
 8002cb4:	e7fb      	b.n	8002cae <TIM_UpdateDisableConfig+0xc>

08002cb6 <TIM_UpdateRequestConfig>:
{
 8002cb6:	2304      	movs	r3, #4
    TIMx->CR1 |= TIM_CR1_URS;
 8002cb8:	8802      	ldrh	r2, [r0, #0]
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002cba:	2900      	cmp	r1, #0
 8002cbc:	d002      	beq.n	8002cc4 <TIM_UpdateRequestConfig+0xe>
    TIMx->CR1 |= TIM_CR1_URS;
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	8003      	strh	r3, [r0, #0]
}
 8002cc2:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8002cc4:	439a      	bics	r2, r3
 8002cc6:	8002      	strh	r2, [r0, #0]
}
 8002cc8:	e7fb      	b.n	8002cc2 <TIM_UpdateRequestConfig+0xc>

08002cca <TIM_ARRPreloadConfig>:
{
 8002cca:	2380      	movs	r3, #128	; 0x80
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002ccc:	8802      	ldrh	r2, [r0, #0]
  if (NewState != DISABLE)
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d002      	beq.n	8002cd8 <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	8003      	strh	r3, [r0, #0]
}
 8002cd6:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8002cd8:	439a      	bics	r2, r3
 8002cda:	8002      	strh	r2, [r0, #0]
}
 8002cdc:	e7fb      	b.n	8002cd6 <TIM_ARRPreloadConfig+0xc>

08002cde <TIM_SelectOnePulseMode>:
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8002cde:	2208      	movs	r2, #8
 8002ce0:	8803      	ldrh	r3, [r0, #0]
 8002ce2:	4393      	bics	r3, r2
 8002ce4:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= TIM_OPMode;
 8002ce6:	8803      	ldrh	r3, [r0, #0]
 8002ce8:	4319      	orrs	r1, r3
 8002cea:	8001      	strh	r1, [r0, #0]
}
 8002cec:	4770      	bx	lr

08002cee <TIM_SetClockDivision>:
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8002cee:	8803      	ldrh	r3, [r0, #0]
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <TIM_SetClockDivision+0x12>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= TIM_CKD;
 8002cf6:	8803      	ldrh	r3, [r0, #0]
 8002cf8:	4319      	orrs	r1, r3
 8002cfa:	8001      	strh	r1, [r0, #0]
}
 8002cfc:	4770      	bx	lr
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	fffffcff 	.word	0xfffffcff

08002d04 <TIM_Cmd>:
{
 8002d04:	2301      	movs	r3, #1
    TIMx->CR1 |= TIM_CR1_CEN;
 8002d06:	8802      	ldrh	r2, [r0, #0]
  if (NewState != DISABLE)
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d002      	beq.n	8002d12 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	8003      	strh	r3, [r0, #0]
}
 8002d10:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002d12:	439a      	bics	r2, r3
 8002d14:	8002      	strh	r2, [r0, #0]
}
 8002d16:	e7fb      	b.n	8002d10 <TIM_Cmd+0xc>

08002d18 <TIM_BDTRConfig>:
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002d18:	884a      	ldrh	r2, [r1, #2]
 8002d1a:	880b      	ldrh	r3, [r1, #0]
 8002d1c:	3006      	adds	r0, #6
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	888a      	ldrh	r2, [r1, #4]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	88ca      	ldrh	r2, [r1, #6]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	890a      	ldrh	r2, [r1, #8]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	894a      	ldrh	r2, [r1, #10]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	898a      	ldrh	r2, [r1, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	87c3      	strh	r3, [r0, #62]	; 0x3e
}
 8002d36:	4770      	bx	lr

08002d38 <TIM_BDTRStructInit>:
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002d3c:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002d3e:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002d40:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002d42:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002d44:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002d46:	8183      	strh	r3, [r0, #12]
}
 8002d48:	4770      	bx	lr

08002d4a <TIM_CtrlPWMOutputs>:
{
 8002d4a:	3006      	adds	r0, #6
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002d4c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  if (NewState != DISABLE)
 8002d4e:	2900      	cmp	r1, #0
 8002d50:	d004      	beq.n	8002d5c <TIM_CtrlPWMOutputs+0x12>
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0212      	lsls	r2, r2, #8
 8002d56:	4313      	orrs	r3, r2
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8002d58:	87c3      	strh	r3, [r0, #62]	; 0x3e
}
 8002d5a:	4770      	bx	lr
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8002d5c:	045b      	lsls	r3, r3, #17
 8002d5e:	0c5b      	lsrs	r3, r3, #17
 8002d60:	e7fa      	b.n	8002d58 <TIM_CtrlPWMOutputs+0xe>

08002d62 <TIM_OC1Init>:
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002d62:	2201      	movs	r2, #1
{
 8002d64:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8002d66:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002d68:	8c03      	ldrh	r3, [r0, #32]
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002d6e:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002d70:	8882      	ldrh	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002d72:	8b04      	ldrh	r4, [r0, #24]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002d74:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8002d76:	43ac      	bics	r4, r5
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002d78:	880d      	ldrh	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
 8002d7a:	b292      	uxth	r2, r2
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002d7c:	432c      	orrs	r4, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002d7e:	2502      	movs	r5, #2
 8002d80:	43ab      	bics	r3, r5
 8002d82:	001d      	movs	r5, r3
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002d84:	898b      	ldrh	r3, [r1, #12]
 8002d86:	4333      	orrs	r3, r6
 8002d88:	432b      	orrs	r3, r5
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8002d8a:	4d10      	ldr	r5, [pc, #64]	; (8002dcc <TIM_OC1Init+0x6a>)
 8002d8c:	42a8      	cmp	r0, r5
 8002d8e:	d008      	beq.n	8002da2 <TIM_OC1Init+0x40>
 8002d90:	4d0f      	ldr	r5, [pc, #60]	; (8002dd0 <TIM_OC1Init+0x6e>)
 8002d92:	42a8      	cmp	r0, r5
 8002d94:	d005      	beq.n	8002da2 <TIM_OC1Init+0x40>
 8002d96:	4d0f      	ldr	r5, [pc, #60]	; (8002dd4 <TIM_OC1Init+0x72>)
 8002d98:	42a8      	cmp	r0, r5
 8002d9a:	d002      	beq.n	8002da2 <TIM_OC1Init+0x40>
 8002d9c:	4d0e      	ldr	r5, [pc, #56]	; (8002dd8 <TIM_OC1Init+0x76>)
 8002d9e:	42a8      	cmp	r0, r5
 8002da0:	d10d      	bne.n	8002dbe <TIM_OC1Init+0x5c>
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8002da2:	2508      	movs	r5, #8
 8002da4:	43ab      	bics	r3, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002da6:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002da8:	8a4e      	ldrh	r6, [r1, #18]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002daa:	432b      	orrs	r3, r5
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8002dac:	2504      	movs	r5, #4
 8002dae:	43ab      	bics	r3, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002db0:	888d      	ldrh	r5, [r1, #4]
 8002db2:	432b      	orrs	r3, r5
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8002db4:	4d09      	ldr	r5, [pc, #36]	; (8002ddc <TIM_OC1Init+0x7a>)
 8002db6:	4015      	ands	r5, r2
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002db8:	8a0a      	ldrh	r2, [r1, #16]
 8002dba:	4332      	orrs	r2, r6
 8002dbc:	432a      	orrs	r2, r5
  TIMx->CR2 = tmpcr2;
 8002dbe:	8082      	strh	r2, [r0, #4]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8002dc0:	688a      	ldr	r2, [r1, #8]
  TIMx->CCMR1 = tmpccmrx;
 8002dc2:	8304      	strh	r4, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8002dc4:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002dc6:	8403      	strh	r3, [r0, #32]
}
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	fffffcff 	.word	0xfffffcff

08002de0 <TIM_OC2Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8002de0:	2210      	movs	r2, #16
 8002de2:	8c03      	ldrh	r3, [r0, #32]
{
 8002de4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8002de6:	4393      	bics	r3, r2
 8002de8:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002dea:	8c03      	ldrh	r3, [r0, #32]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8002dec:	4d1b      	ldr	r5, [pc, #108]	; (8002e5c <TIM_OC2Init+0x7c>)
  tmpcr2 =  TIMx->CR2;
 8002dee:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002df0:	8b02      	ldrh	r2, [r0, #24]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002df2:	898e      	ldrh	r6, [r1, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8002df4:	402a      	ands	r2, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002df6:	880d      	ldrh	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
 8002df8:	b2a4      	uxth	r4, r4
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002dfa:	022d      	lsls	r5, r5, #8
 8002dfc:	432a      	orrs	r2, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8002dfe:	2520      	movs	r5, #32
 8002e00:	43ab      	bics	r3, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002e02:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002e04:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002e06:	4335      	orrs	r5, r6
 8002e08:	012d      	lsls	r5, r5, #4
  if((TIMx == TIM1) || (TIMx == TIM15))
 8002e0a:	4e15      	ldr	r6, [pc, #84]	; (8002e60 <TIM_OC2Init+0x80>)
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002e0c:	432b      	orrs	r3, r5
 8002e0e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM15))
 8002e10:	42b0      	cmp	r0, r6
 8002e12:	d002      	beq.n	8002e1a <TIM_OC2Init+0x3a>
 8002e14:	4d13      	ldr	r5, [pc, #76]	; (8002e64 <TIM_OC2Init+0x84>)
 8002e16:	42a8      	cmp	r0, r5
 8002e18:	d119      	bne.n	8002e4e <TIM_OC2Init+0x6e>
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8002e1a:	4d13      	ldr	r5, [pc, #76]	; (8002e68 <TIM_OC2Init+0x88>)
 8002e1c:	402c      	ands	r4, r5
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002e1e:	8a0d      	ldrh	r5, [r1, #16]
 8002e20:	00ad      	lsls	r5, r5, #2
 8002e22:	432c      	orrs	r4, r5
 8002e24:	b2a4      	uxth	r4, r4
    if (TIMx == TIM1)
 8002e26:	42b0      	cmp	r0, r6
 8002e28:	d111      	bne.n	8002e4e <TIM_OC2Init+0x6e>
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8002e2a:	2580      	movs	r5, #128	; 0x80
 8002e2c:	43ab      	bics	r3, r5
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002e2e:	89cd      	ldrh	r5, [r1, #14]
 8002e30:	012d      	lsls	r5, r5, #4
 8002e32:	432b      	orrs	r3, r5
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8002e34:	2540      	movs	r5, #64	; 0x40
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002e36:	b29b      	uxth	r3, r3
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8002e38:	43ab      	bics	r3, r5
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002e3a:	888d      	ldrh	r5, [r1, #4]
 8002e3c:	012d      	lsls	r5, r5, #4
 8002e3e:	432b      	orrs	r3, r5
      tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8002e40:	4d0a      	ldr	r5, [pc, #40]	; (8002e6c <TIM_OC2Init+0x8c>)
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002e42:	b29b      	uxth	r3, r3
      tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8002e44:	402c      	ands	r4, r5
      tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002e46:	8a4d      	ldrh	r5, [r1, #18]
 8002e48:	00ad      	lsls	r5, r5, #2
 8002e4a:	432c      	orrs	r4, r5
 8002e4c:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8002e4e:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e50:	8302      	strh	r2, [r0, #24]
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002e52:	688a      	ldr	r2, [r1, #8]
 8002e54:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002e56:	8403      	strh	r3, [r0, #32]
}
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	ffff8cff 	.word	0xffff8cff
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40014000 	.word	0x40014000
 8002e68:	fffffbff 	.word	0xfffffbff
 8002e6c:	fffff7ff 	.word	0xfffff7ff

08002e70 <TIM_OC3Init>:
{
 8002e70:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002e72:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8002e74:	8c03      	ldrh	r3, [r0, #32]
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <TIM_OC3Init+0x64>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e7c:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e7e:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002e80:	8b82      	ldrh	r2, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002e82:	898e      	ldrh	r6, [r1, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002e84:	43aa      	bics	r2, r5
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002e86:	880d      	ldrh	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
 8002e88:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002e8a:	432a      	orrs	r2, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002e8c:	4d12      	ldr	r5, [pc, #72]	; (8002ed8 <TIM_OC3Init+0x68>)
 8002e8e:	402b      	ands	r3, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002e90:	884d      	ldrh	r5, [r1, #2]
 8002e92:	4335      	orrs	r5, r6
 8002e94:	022d      	lsls	r5, r5, #8
 8002e96:	432b      	orrs	r3, r5
  if(TIMx == TIM1)
 8002e98:	4d10      	ldr	r5, [pc, #64]	; (8002edc <TIM_OC3Init+0x6c>)
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002e9a:	b29b      	uxth	r3, r3
  if(TIMx == TIM1)
 8002e9c:	42a8      	cmp	r0, r5
 8002e9e:	d112      	bne.n	8002ec6 <TIM_OC3Init+0x56>
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8002ea0:	4d0f      	ldr	r5, [pc, #60]	; (8002ee0 <TIM_OC3Init+0x70>)
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002ea2:	8a0e      	ldrh	r6, [r1, #16]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8002ea4:	402b      	ands	r3, r5
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002ea6:	89cd      	ldrh	r5, [r1, #14]
 8002ea8:	022d      	lsls	r5, r5, #8
 8002eaa:	432b      	orrs	r3, r5
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002eac:	4d0d      	ldr	r5, [pc, #52]	; (8002ee4 <TIM_OC3Init+0x74>)
 8002eae:	402b      	ands	r3, r5
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002eb0:	888d      	ldrh	r5, [r1, #4]
 8002eb2:	022d      	lsls	r5, r5, #8
 8002eb4:	432b      	orrs	r3, r5
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8002eb6:	4d0c      	ldr	r5, [pc, #48]	; (8002ee8 <TIM_OC3Init+0x78>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002eb8:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8002eba:	402c      	ands	r4, r5
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002ebc:	8a4d      	ldrh	r5, [r1, #18]
 8002ebe:	4335      	orrs	r5, r6
 8002ec0:	012d      	lsls	r5, r5, #4
 8002ec2:	432c      	orrs	r4, r5
 8002ec4:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8002ec6:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002ec8:	8382      	strh	r2, [r0, #28]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002eca:	688a      	ldr	r2, [r1, #8]
 8002ecc:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002ece:	8403      	strh	r3, [r0, #32]
}
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	fffffeff 	.word	0xfffffeff
 8002ed8:	fffffdff 	.word	0xfffffdff
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	fffff7ff 	.word	0xfffff7ff
 8002ee4:	0000fbff 	.word	0x0000fbff
 8002ee8:	ffffcfff 	.word	0xffffcfff

08002eec <TIM_OC4Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002eec:	8c03      	ldrh	r3, [r0, #32]
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <TIM_OC4Init+0x4c>)
{
 8002ef0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002ef6:	8c03      	ldrh	r3, [r0, #32]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8002ef8:	4a10      	ldr	r2, [pc, #64]	; (8002f3c <TIM_OC4Init+0x50>)
  tmpcr2 =  TIMx->CR2;
 8002efa:	8885      	ldrh	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002efc:	8b84      	ldrh	r4, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002efe:	898e      	ldrh	r6, [r1, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8002f00:	4014      	ands	r4, r2
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002f02:	880a      	ldrh	r2, [r1, #0]
  tmpcr2 =  TIMx->CR2;
 8002f04:	b2ad      	uxth	r5, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002f06:	0212      	lsls	r2, r2, #8
 8002f08:	4314      	orrs	r4, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <TIM_OC4Init+0x54>)
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002f0c:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8002f0e:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002f10:	884a      	ldrh	r2, [r1, #2]
 8002f12:	4332      	orrs	r2, r6
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	4313      	orrs	r3, r2
  if(TIMx == TIM1)
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <TIM_OC4Init+0x58>)
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002f1a:	b29b      	uxth	r3, r3
  if(TIMx == TIM1)
 8002f1c:	4290      	cmp	r0, r2
 8002f1e:	d105      	bne.n	8002f2c <TIM_OC4Init+0x40>
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8002f20:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <TIM_OC4Init+0x5c>)
 8002f22:	402a      	ands	r2, r5
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002f24:	8a0d      	ldrh	r5, [r1, #16]
 8002f26:	01ad      	lsls	r5, r5, #6
 8002f28:	4315      	orrs	r5, r2
 8002f2a:	b2ad      	uxth	r5, r5
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002f2c:	688a      	ldr	r2, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8002f2e:	8085      	strh	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f30:	8384      	strh	r4, [r0, #28]
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002f32:	6402      	str	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002f34:	8403      	strh	r3, [r0, #32]
}
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
 8002f38:	ffffefff 	.word	0xffffefff
 8002f3c:	ffff8cff 	.word	0xffff8cff
 8002f40:	ffffdfff 	.word	0xffffdfff
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	ffffbfff 	.word	0xffffbfff

08002f4c <TIM_OCStructInit>:
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002f50:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002f52:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 8002f54:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002f56:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002f58:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002f5a:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002f5c:	8243      	strh	r3, [r0, #18]
}
 8002f5e:	4770      	bx	lr

08002f60 <TIM_SelectOCxM>:
{
 8002f60:	b530      	push	{r4, r5, lr}
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002f62:	2501      	movs	r5, #1
 8002f64:	408d      	lsls	r5, r1
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002f66:	8c03      	ldrh	r3, [r0, #32]
  tmp += CCMR_OFFSET;
 8002f68:	0004      	movs	r4, r0
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002f6a:	43ab      	bics	r3, r5
 8002f6c:	8403      	strh	r3, [r0, #32]
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002f6e:	2308      	movs	r3, #8
 8002f70:	0008      	movs	r0, r1
  tmp += CCMR_OFFSET;
 8002f72:	3418      	adds	r4, #24
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002f74:	4398      	bics	r0, r3
 8002f76:	d109      	bne.n	8002f8c <TIM_SelectOCxM+0x2c>
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8002f78:	2070      	movs	r0, #112	; 0x70
    tmp += (TIM_Channel>>1);
 8002f7a:	0849      	lsrs	r1, r1, #1
 8002f7c:	1909      	adds	r1, r1, r4
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8002f7e:	680b      	ldr	r3, [r1, #0]
 8002f80:	4383      	bics	r3, r0
 8002f82:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002f84:	680b      	ldr	r3, [r1, #0]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002f86:	431a      	orrs	r2, r3
 8002f88:	600a      	str	r2, [r1, #0]
}
 8002f8a:	bd30      	pop	{r4, r5, pc}
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002f8c:	3904      	subs	r1, #4
 8002f8e:	b289      	uxth	r1, r1
 8002f90:	0849      	lsrs	r1, r1, #1
 8002f92:	1909      	adds	r1, r1, r4
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8002f94:	680b      	ldr	r3, [r1, #0]
 8002f96:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <TIM_SelectOCxM+0x44>)
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002f98:	0212      	lsls	r2, r2, #8
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8002f9a:	4003      	ands	r3, r0
 8002f9c:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002f9e:	680b      	ldr	r3, [r1, #0]
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	e7f0      	b.n	8002f86 <TIM_SelectOCxM+0x26>
 8002fa4:	ffff8fff 	.word	0xffff8fff

08002fa8 <TIM_SetCompare1>:
  TIMx->CCR1 = Compare1;
 8002fa8:	6341      	str	r1, [r0, #52]	; 0x34
}
 8002faa:	4770      	bx	lr

08002fac <TIM_SetCompare2>:
  TIMx->CCR2 = Compare2;
 8002fac:	6381      	str	r1, [r0, #56]	; 0x38
}
 8002fae:	4770      	bx	lr

08002fb0 <TIM_SetCompare3>:
  TIMx->CCR3 = Compare3;
 8002fb0:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_SetCompare4>:
  TIMx->CCR4 = Compare4;
 8002fb4:	6401      	str	r1, [r0, #64]	; 0x40
}
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_ForcedOC1Config>:
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8002fb8:	2270      	movs	r2, #112	; 0x70
  tmpccmr1 = TIMx->CCMR1;
 8002fba:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8002fbc:	4393      	bics	r3, r2
  tmpccmr1 |= TIM_ForcedAction;
 8002fbe:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8002fc0:	8301      	strh	r1, [r0, #24]
}
 8002fc2:	4770      	bx	lr

08002fc4 <TIM_ForcedOC2Config>:
  tmpccmr1 = TIMx->CCMR1;
 8002fc4:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8002fc6:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <TIM_ForcedOC2Config+0x10>)
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002fc8:	0209      	lsls	r1, r1, #8
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8002fca:	4013      	ands	r3, r2
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002fcc:	4319      	orrs	r1, r3
 8002fce:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 8002fd0:	8301      	strh	r1, [r0, #24]
}
 8002fd2:	4770      	bx	lr
 8002fd4:	ffff8fff 	.word	0xffff8fff

08002fd8 <TIM_ForcedOC3Config>:
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8002fd8:	2270      	movs	r2, #112	; 0x70
  tmpccmr2 = TIMx->CCMR2;
 8002fda:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8002fdc:	4393      	bics	r3, r2
  tmpccmr2 |= TIM_ForcedAction;
 8002fde:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 8002fe0:	8381      	strh	r1, [r0, #28]
}
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_ForcedOC4Config>:
  tmpccmr2 = TIMx->CCMR2;
 8002fe4:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8002fe6:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <TIM_ForcedOC4Config+0x10>)
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002fe8:	0209      	lsls	r1, r1, #8
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8002fea:	4013      	ands	r3, r2
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002fec:	4319      	orrs	r1, r3
 8002fee:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 8002ff0:	8381      	strh	r1, [r0, #28]
}
 8002ff2:	4770      	bx	lr
 8002ff4:	ffff8fff 	.word	0xffff8fff

08002ff8 <TIM_CCPreloadControl>:
{ 
 8002ff8:	2301      	movs	r3, #1
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002ffa:	8882      	ldrh	r2, [r0, #4]
  if (NewState != DISABLE)
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d002      	beq.n	8003006 <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003000:	4313      	orrs	r3, r2
 8003002:	8083      	strh	r3, [r0, #4]
}
 8003004:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8003006:	439a      	bics	r2, r3
 8003008:	8082      	strh	r2, [r0, #4]
}
 800300a:	e7fb      	b.n	8003004 <TIM_CCPreloadControl+0xc>

0800300c <TIM_OC1PreloadConfig>:
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800300c:	2208      	movs	r2, #8
  tmpccmr1 = TIMx->CCMR1;
 800300e:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8003010:	4393      	bics	r3, r2
  tmpccmr1 |= TIM_OCPreload;
 8003012:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8003014:	8301      	strh	r1, [r0, #24]
}
 8003016:	4770      	bx	lr

08003018 <TIM_OC2PreloadConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8003018:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 800301a:	4a03      	ldr	r2, [pc, #12]	; (8003028 <TIM_OC2PreloadConfig+0x10>)
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800301c:	0209      	lsls	r1, r1, #8
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 800301e:	4013      	ands	r3, r2
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8003020:	4319      	orrs	r1, r3
 8003022:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 8003024:	8301      	strh	r1, [r0, #24]
}
 8003026:	4770      	bx	lr
 8003028:	fffff7ff 	.word	0xfffff7ff

0800302c <TIM_OC3PreloadConfig>:
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 800302c:	2208      	movs	r2, #8
  tmpccmr2 = TIMx->CCMR2;
 800302e:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8003030:	4393      	bics	r3, r2
  tmpccmr2 |= TIM_OCPreload;
 8003032:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 8003034:	8381      	strh	r1, [r0, #28]
}
 8003036:	4770      	bx	lr

08003038 <TIM_OC4PreloadConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8003038:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800303a:	4a03      	ldr	r2, [pc, #12]	; (8003048 <TIM_OC4PreloadConfig+0x10>)
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800303c:	0209      	lsls	r1, r1, #8
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800303e:	4013      	ands	r3, r2
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8003040:	4319      	orrs	r1, r3
 8003042:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 8003044:	8381      	strh	r1, [r0, #28]
}
 8003046:	4770      	bx	lr
 8003048:	fffff7ff 	.word	0xfffff7ff

0800304c <TIM_OC1FastConfig>:
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 800304c:	2204      	movs	r2, #4
  tmpccmr1 = TIMx->CCMR1;
 800304e:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8003050:	4393      	bics	r3, r2
  tmpccmr1 |= TIM_OCFast;
 8003052:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8003054:	8301      	strh	r1, [r0, #24]
}
 8003056:	4770      	bx	lr

08003058 <TIM_OC2FastConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8003058:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 800305a:	4a03      	ldr	r2, [pc, #12]	; (8003068 <TIM_OC2FastConfig+0x10>)
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800305c:	0209      	lsls	r1, r1, #8
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 800305e:	4013      	ands	r3, r2
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8003060:	4319      	orrs	r1, r3
 8003062:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 8003064:	8301      	strh	r1, [r0, #24]
}
 8003066:	4770      	bx	lr
 8003068:	fffffbff 	.word	0xfffffbff

0800306c <TIM_OC3FastConfig>:
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 800306c:	2204      	movs	r2, #4
  tmpccmr2 = TIMx->CCMR2;
 800306e:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8003070:	4393      	bics	r3, r2
  tmpccmr2 |= TIM_OCFast;
 8003072:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 8003074:	8381      	strh	r1, [r0, #28]
}
 8003076:	4770      	bx	lr

08003078 <TIM_OC4FastConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8003078:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 800307a:	4a03      	ldr	r2, [pc, #12]	; (8003088 <TIM_OC4FastConfig+0x10>)
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800307c:	0209      	lsls	r1, r1, #8
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 800307e:	4013      	ands	r3, r2
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8003080:	4319      	orrs	r1, r3
 8003082:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 8003084:	8381      	strh	r1, [r0, #28]
}
 8003086:	4770      	bx	lr
 8003088:	fffffbff 	.word	0xfffffbff

0800308c <TIM_ClearOC1Ref>:
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 800308c:	2280      	movs	r2, #128	; 0x80
  tmpccmr1 = TIMx->CCMR1;
 800308e:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8003090:	4393      	bics	r3, r2
  tmpccmr1 |= TIM_OCClear;
 8003092:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8003094:	8301      	strh	r1, [r0, #24]
}
 8003096:	4770      	bx	lr

08003098 <TIM_ClearOC2Ref>:
  tmpccmr1 = TIMx->CCMR1;
 8003098:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800309a:	0209      	lsls	r1, r1, #8
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 800309c:	045b      	lsls	r3, r3, #17
 800309e:	0c5b      	lsrs	r3, r3, #17
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80030a0:	4319      	orrs	r1, r3
 80030a2:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 80030a4:	8301      	strh	r1, [r0, #24]
}
 80030a6:	4770      	bx	lr

080030a8 <TIM_ClearOC3Ref>:
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 80030a8:	2280      	movs	r2, #128	; 0x80
  tmpccmr2 = TIMx->CCMR2;
 80030aa:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 80030ac:	4393      	bics	r3, r2
  tmpccmr2 |= TIM_OCClear;
 80030ae:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 80030b0:	8381      	strh	r1, [r0, #28]
}
 80030b2:	4770      	bx	lr

080030b4 <TIM_ClearOC4Ref>:
  tmpccmr2 = TIMx->CCMR2;
 80030b4:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80030b6:	0209      	lsls	r1, r1, #8
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 80030b8:	045b      	lsls	r3, r3, #17
 80030ba:	0c5b      	lsrs	r3, r3, #17
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80030bc:	4319      	orrs	r1, r3
 80030be:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 80030c0:	8381      	strh	r1, [r0, #28]
}
 80030c2:	4770      	bx	lr

080030c4 <TIM_OC1PolarityConfig>:
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 80030c4:	2202      	movs	r2, #2
  tmpccer = TIMx->CCER;
 80030c6:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 80030c8:	4393      	bics	r3, r2
  tmpccer |= TIM_OCPolarity;
 80030ca:	4319      	orrs	r1, r3
  TIMx->CCER = tmpccer;
 80030cc:	8401      	strh	r1, [r0, #32]
}
 80030ce:	4770      	bx	lr

080030d0 <TIM_OC1NPolarityConfig>:
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 80030d0:	2208      	movs	r2, #8
  tmpccer = TIMx->CCER;
 80030d2:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 80030d4:	4393      	bics	r3, r2
  tmpccer |= TIM_OCNPolarity;
 80030d6:	4319      	orrs	r1, r3
  TIMx->CCER = tmpccer;
 80030d8:	8401      	strh	r1, [r0, #32]
}
 80030da:	4770      	bx	lr

080030dc <TIM_OC2PolarityConfig>:
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 80030dc:	2220      	movs	r2, #32
  tmpccer = TIMx->CCER;
 80030de:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80030e0:	0109      	lsls	r1, r1, #4
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 80030e2:	4393      	bics	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80030e4:	4319      	orrs	r1, r3
 80030e6:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 80030e8:	8401      	strh	r1, [r0, #32]
}
 80030ea:	4770      	bx	lr

080030ec <TIM_OC2NPolarityConfig>:
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 80030ec:	2280      	movs	r2, #128	; 0x80
  tmpccer = TIMx->CCER;
 80030ee:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80030f0:	0109      	lsls	r1, r1, #4
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 80030f2:	4393      	bics	r3, r2
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80030f4:	4319      	orrs	r1, r3
 80030f6:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 80030f8:	8401      	strh	r1, [r0, #32]
}
 80030fa:	4770      	bx	lr

080030fc <TIM_OC3PolarityConfig>:
  tmpccer = TIMx->CCER;
 80030fc:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 80030fe:	4a03      	ldr	r2, [pc, #12]	; (800310c <TIM_OC3PolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003100:	0209      	lsls	r1, r1, #8
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8003102:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003104:	4319      	orrs	r1, r3
 8003106:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 8003108:	8401      	strh	r1, [r0, #32]
}
 800310a:	4770      	bx	lr
 800310c:	fffffdff 	.word	0xfffffdff

08003110 <TIM_OC3NPolarityConfig>:
  tmpccer = TIMx->CCER;
 8003110:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8003112:	4a03      	ldr	r2, [pc, #12]	; (8003120 <TIM_OC3NPolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8003114:	0209      	lsls	r1, r1, #8
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8003116:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8003118:	4319      	orrs	r1, r3
 800311a:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 800311c:	8401      	strh	r1, [r0, #32]
}
 800311e:	4770      	bx	lr
 8003120:	fffff7ff 	.word	0xfffff7ff

08003124 <TIM_OC4PolarityConfig>:
  tmpccer = TIMx->CCER;
 8003124:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8003126:	4a03      	ldr	r2, [pc, #12]	; (8003134 <TIM_OC4PolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8003128:	0309      	lsls	r1, r1, #12
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 800312a:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800312c:	4319      	orrs	r1, r3
 800312e:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 8003130:	8401      	strh	r1, [r0, #32]
}
 8003132:	4770      	bx	lr
 8003134:	ffffdfff 	.word	0xffffdfff

08003138 <TIM_SelectOCREFClear>:
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8003138:	2208      	movs	r2, #8
 800313a:	8903      	ldrh	r3, [r0, #8]
 800313c:	4393      	bics	r3, r2
 800313e:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8003140:	8903      	ldrh	r3, [r0, #8]
 8003142:	4319      	orrs	r1, r3
 8003144:	8101      	strh	r1, [r0, #8]
}
 8003146:	4770      	bx	lr

08003148 <TIM_CCxCmd>:
{
 8003148:	b510      	push	{r4, lr}
  tmp = CCER_CCE_SET << TIM_Channel;
 800314a:	2401      	movs	r4, #1
 800314c:	408c      	lsls	r4, r1
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800314e:	408a      	lsls	r2, r1
  TIMx->CCER &= (uint16_t)~ tmp;
 8003150:	8c03      	ldrh	r3, [r0, #32]
 8003152:	43a3      	bics	r3, r4
 8003154:	8403      	strh	r3, [r0, #32]
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003156:	8c03      	ldrh	r3, [r0, #32]
 8003158:	431a      	orrs	r2, r3
 800315a:	b292      	uxth	r2, r2
 800315c:	8402      	strh	r2, [r0, #32]
}
 800315e:	bd10      	pop	{r4, pc}

08003160 <TIM_CCxNCmd>:
{
 8003160:	b510      	push	{r4, lr}
  tmp = CCER_CCNE_SET << TIM_Channel;
 8003162:	2404      	movs	r4, #4
 8003164:	408c      	lsls	r4, r1
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003166:	408a      	lsls	r2, r1
  TIMx->CCER &= (uint16_t) ~tmp;
 8003168:	8c03      	ldrh	r3, [r0, #32]
 800316a:	43a3      	bics	r3, r4
 800316c:	8403      	strh	r3, [r0, #32]
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800316e:	8c03      	ldrh	r3, [r0, #32]
 8003170:	431a      	orrs	r2, r3
 8003172:	b292      	uxth	r2, r2
 8003174:	8402      	strh	r2, [r0, #32]
}
 8003176:	bd10      	pop	{r4, pc}

08003178 <TIM_SelectCOM>:
{
 8003178:	2304      	movs	r3, #4
    TIMx->CR2 |= TIM_CR2_CCUS;
 800317a:	8882      	ldrh	r2, [r0, #4]
  if (NewState != DISABLE)
 800317c:	2900      	cmp	r1, #0
 800317e:	d002      	beq.n	8003186 <TIM_SelectCOM+0xe>
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003180:	4313      	orrs	r3, r2
 8003182:	8083      	strh	r3, [r0, #4]
}
 8003184:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8003186:	439a      	bics	r2, r3
 8003188:	8082      	strh	r2, [r0, #4]
}
 800318a:	e7fb      	b.n	8003184 <TIM_SelectCOM+0xc>

0800318c <TIM_ICStructInit>:
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800318c:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800318e:	2201      	movs	r2, #1
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003190:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8003192:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003194:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8003196:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8003198:	8103      	strh	r3, [r0, #8]
}
 800319a:	4770      	bx	lr

0800319c <TIM_GetCapture1>:
  return TIMx->CCR1;
 800319c:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800319e:	4770      	bx	lr

080031a0 <TIM_GetCapture2>:
  return TIMx->CCR2;
 80031a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80031a2:	4770      	bx	lr

080031a4 <TIM_GetCapture3>:
  return TIMx->CCR3;
 80031a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80031a6:	4770      	bx	lr

080031a8 <TIM_GetCapture4>:
  return TIMx->CCR4;
 80031a8:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80031aa:	4770      	bx	lr

080031ac <TIM_SetIC1Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80031ac:	220c      	movs	r2, #12
 80031ae:	8b03      	ldrh	r3, [r0, #24]
 80031b0:	4393      	bics	r3, r2
 80031b2:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= TIM_ICPSC;
 80031b4:	8b03      	ldrh	r3, [r0, #24]
 80031b6:	4319      	orrs	r1, r3
 80031b8:	8301      	strh	r1, [r0, #24]
}
 80031ba:	4770      	bx	lr

080031bc <TIM_SetIC2Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80031bc:	8b03      	ldrh	r3, [r0, #24]
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <TIM_SetIC2Prescaler+0x14>)
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80031c0:	0209      	lsls	r1, r1, #8
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80031c2:	4013      	ands	r3, r2
 80031c4:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80031c6:	8b03      	ldrh	r3, [r0, #24]
 80031c8:	4319      	orrs	r1, r3
 80031ca:	b289      	uxth	r1, r1
 80031cc:	8301      	strh	r1, [r0, #24]
}
 80031ce:	4770      	bx	lr
 80031d0:	fffff3ff 	.word	0xfffff3ff

080031d4 <TIM_PWMIConfig>:
{
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	000c      	movs	r4, r1
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80031d8:	88a2      	ldrh	r2, [r4, #4]
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80031da:	8849      	ldrh	r1, [r1, #2]
    icoppositeselection = TIM_ICSelection_DirectTI;
 80031dc:	1e56      	subs	r6, r2, #1
    icoppositepolarity = TIM_ICPolarity_Rising;
 80031de:	424f      	negs	r7, r1
 80031e0:	414f      	adcs	r7, r1
    icoppositeselection = TIM_ICSelection_DirectTI;
 80031e2:	4273      	negs	r3, r6
 80031e4:	415e      	adcs	r6, r3
{
 80031e6:	0005      	movs	r5, r0
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80031e8:	8820      	ldrh	r0, [r4, #0]
    icoppositepolarity = TIM_ICPolarity_Rising;
 80031ea:	007f      	lsls	r7, r7, #1
    icoppositeselection = TIM_ICSelection_DirectTI;
 80031ec:	3601      	adds	r6, #1
 80031ee:	8923      	ldrh	r3, [r4, #8]
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d111      	bne.n	8003218 <TIM_PWMIConfig+0x44>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80031f4:	0028      	movs	r0, r5
 80031f6:	f7ff fc61 	bl	8002abc <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80031fa:	88e1      	ldrh	r1, [r4, #6]
 80031fc:	0028      	movs	r0, r5
 80031fe:	f7ff ffd5 	bl	80031ac <TIM_SetIC1Prescaler>
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003202:	0039      	movs	r1, r7
 8003204:	0028      	movs	r0, r5
 8003206:	8923      	ldrh	r3, [r4, #8]
 8003208:	0032      	movs	r2, r6
 800320a:	f7ff fc6b 	bl	8002ae4 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800320e:	88e1      	ldrh	r1, [r4, #6]
 8003210:	0028      	movs	r0, r5
 8003212:	f7ff ffd3 	bl	80031bc <TIM_SetIC2Prescaler>
}
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003218:	0028      	movs	r0, r5
 800321a:	f7ff fc63 	bl	8002ae4 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800321e:	88e1      	ldrh	r1, [r4, #6]
 8003220:	0028      	movs	r0, r5
 8003222:	f7ff ffcb 	bl	80031bc <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003226:	0039      	movs	r1, r7
 8003228:	0028      	movs	r0, r5
 800322a:	8923      	ldrh	r3, [r4, #8]
 800322c:	0032      	movs	r2, r6
 800322e:	f7ff fc45 	bl	8002abc <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003232:	88e1      	ldrh	r1, [r4, #6]
 8003234:	0028      	movs	r0, r5
 8003236:	f7ff ffb9 	bl	80031ac <TIM_SetIC1Prescaler>
}
 800323a:	e7ec      	b.n	8003216 <TIM_PWMIConfig+0x42>

0800323c <TIM_SetIC3Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800323c:	220c      	movs	r2, #12
 800323e:	8b83      	ldrh	r3, [r0, #28]
 8003240:	4393      	bics	r3, r2
 8003242:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= TIM_ICPSC;
 8003244:	8b83      	ldrh	r3, [r0, #28]
 8003246:	4319      	orrs	r1, r3
 8003248:	8381      	strh	r1, [r0, #28]
}
 800324a:	4770      	bx	lr

0800324c <TIM_SetIC4Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 800324c:	8b83      	ldrh	r3, [r0, #28]
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <TIM_SetIC4Prescaler+0x14>)
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003250:	0209      	lsls	r1, r1, #8
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8003252:	4013      	ands	r3, r2
 8003254:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003256:	8b83      	ldrh	r3, [r0, #28]
 8003258:	4319      	orrs	r1, r3
 800325a:	b289      	uxth	r1, r1
 800325c:	8381      	strh	r1, [r0, #28]
}
 800325e:	4770      	bx	lr
 8003260:	fffff3ff 	.word	0xfffff3ff

08003264 <TIM_ICInit>:
{
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	0004      	movs	r4, r0
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003268:	8808      	ldrh	r0, [r1, #0]
{
 800326a:	000d      	movs	r5, r1
 800326c:	890b      	ldrh	r3, [r1, #8]
 800326e:	888a      	ldrh	r2, [r1, #4]
 8003270:	8849      	ldrh	r1, [r1, #2]
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003272:	2800      	cmp	r0, #0
 8003274:	d107      	bne.n	8003286 <TIM_ICInit+0x22>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003276:	0020      	movs	r0, r4
 8003278:	f7ff fc20 	bl	8002abc <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800327c:	88e9      	ldrh	r1, [r5, #6]
 800327e:	0020      	movs	r0, r4
 8003280:	f7ff ff94 	bl	80031ac <TIM_SetIC1Prescaler>
}
 8003284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8003286:	2804      	cmp	r0, #4
 8003288:	d107      	bne.n	800329a <TIM_ICInit+0x36>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800328a:	0020      	movs	r0, r4
 800328c:	f7ff fc2a 	bl	8002ae4 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003290:	88e9      	ldrh	r1, [r5, #6]
 8003292:	0020      	movs	r0, r4
 8003294:	f7ff ff92 	bl	80031bc <TIM_SetIC2Prescaler>
 8003298:	e7f4      	b.n	8003284 <TIM_ICInit+0x20>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800329a:	2808      	cmp	r0, #8
 800329c:	d11a      	bne.n	80032d4 <TIM_ICInit+0x70>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800329e:	27f3      	movs	r7, #243	; 0xf3
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 80032a0:	8c20      	ldrh	r0, [r4, #32]
 80032a2:	4e1a      	ldr	r6, [pc, #104]	; (800330c <TIM_ICInit+0xa8>)
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80032a4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 80032a6:	4030      	ands	r0, r6
 80032a8:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032aa:	8ba0      	ldrh	r0, [r4, #28]
  tmpccer = TIMx->CCER;
 80032ac:	8c26      	ldrh	r6, [r4, #32]
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 80032ae:	43b8      	bics	r0, r7
 80032b0:	4302      	orrs	r2, r0
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80032b2:	4313      	orrs	r3, r2
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <TIM_ICInit+0xac>)
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80032b6:	0209      	lsls	r1, r1, #8
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032b8:	4016      	ands	r6, r2
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	0052      	lsls	r2, r2, #1
 80032be:	4332      	orrs	r2, r6
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 80032c0:	4311      	orrs	r1, r2
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80032c2:	b29b      	uxth	r3, r3
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 80032c4:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032c6:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer;
 80032c8:	8421      	strh	r1, [r4, #32]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80032ca:	88e9      	ldrh	r1, [r5, #6]
 80032cc:	0020      	movs	r0, r4
 80032ce:	f7ff ffb5 	bl	800323c <TIM_SetIC3Prescaler>
 80032d2:	e7d7      	b.n	8003284 <TIM_ICInit+0x20>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80032d4:	8c20      	ldrh	r0, [r4, #32]
 80032d6:	4e0f      	ldr	r6, [pc, #60]	; (8003314 <TIM_ICInit+0xb0>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80032d8:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80032da:	4030      	ands	r0, r6
 80032dc:	8420      	strh	r0, [r4, #32]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 80032de:	031b      	lsls	r3, r3, #12
  tmpccmr2 = TIMx->CCMR2;
 80032e0:	8ba7      	ldrh	r7, [r4, #28]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 80032e2:	4313      	orrs	r3, r2
  tmpccer = TIMx->CCER;
 80032e4:	8c20      	ldrh	r0, [r4, #32]
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <TIM_ICInit+0xb4>)
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80032e8:	4e0c      	ldr	r6, [pc, #48]	; (800331c <TIM_ICInit+0xb8>)
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80032ea:	4002      	ands	r2, r0
 80032ec:	2080      	movs	r0, #128	; 0x80
 80032ee:	0140      	lsls	r0, r0, #5
 80032f0:	4310      	orrs	r0, r2
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80032f2:	403e      	ands	r6, r7
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80032f4:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 80032f6:	4333      	orrs	r3, r6
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80032f8:	4301      	orrs	r1, r0
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 80032fa:	b29b      	uxth	r3, r3
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80032fc:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032fe:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer;
 8003300:	8421      	strh	r1, [r4, #32]
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003302:	88e9      	ldrh	r1, [r5, #6]
 8003304:	0020      	movs	r0, r4
 8003306:	f7ff ffa1 	bl	800324c <TIM_SetIC4Prescaler>
}
 800330a:	e7bb      	b.n	8003284 <TIM_ICInit+0x20>
 800330c:	fffffeff 	.word	0xfffffeff
 8003310:	fffff5ff 	.word	0xfffff5ff
 8003314:	ffffefff 	.word	0xffffefff
 8003318:	00005fff 	.word	0x00005fff
 800331c:	00000cff 	.word	0x00000cff

08003320 <TIM_GenerateEvent>:
  TIMx->EGR = TIM_EventSource;
 8003320:	8281      	strh	r1, [r0, #20]
}
 8003322:	4770      	bx	lr

08003324 <TIM_GetFlagStatus>:
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003324:	8a00      	ldrh	r0, [r0, #16]
 8003326:	4008      	ands	r0, r1
 8003328:	1e41      	subs	r1, r0, #1
 800332a:	4188      	sbcs	r0, r1
  return bitstatus;
 800332c:	b2c0      	uxtb	r0, r0
}
 800332e:	4770      	bx	lr

08003330 <TIM_ClearFlag>:
 8003330:	43c9      	mvns	r1, r1
 8003332:	b289      	uxth	r1, r1
 8003334:	8201      	strh	r1, [r0, #16]
 8003336:	4770      	bx	lr

08003338 <TIM_GetITStatus>:
  itstatus = TIMx->SR & TIM_IT;
 8003338:	8a02      	ldrh	r2, [r0, #16]
  itenable = TIMx->DIER & TIM_IT;
 800333a:	8983      	ldrh	r3, [r0, #12]
 800333c:	2000      	movs	r0, #0
 800333e:	b29b      	uxth	r3, r3
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003340:	4211      	tst	r1, r2
 8003342:	d003      	beq.n	800334c <TIM_GetITStatus+0x14>
 8003344:	4019      	ands	r1, r3
 8003346:	1e48      	subs	r0, r1, #1
 8003348:	4181      	sbcs	r1, r0
 800334a:	b2c8      	uxtb	r0, r1
}
 800334c:	4770      	bx	lr

0800334e <TIM_ClearITPendingBit>:
  TIMx->SR = (uint16_t)~TIM_IT;
 800334e:	43c9      	mvns	r1, r1
 8003350:	b289      	uxth	r1, r1
 8003352:	8201      	strh	r1, [r0, #16]
}
 8003354:	4770      	bx	lr

08003356 <TIM_DMAConfig>:
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003356:	4311      	orrs	r1, r2
 8003358:	3048      	adds	r0, #72	; 0x48
 800335a:	8001      	strh	r1, [r0, #0]
}
 800335c:	4770      	bx	lr

0800335e <TIM_DMACmd>:
    TIMx->DIER |= TIM_DMASource; 
 800335e:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8003360:	2a00      	cmp	r2, #0
 8003362:	d002      	beq.n	800336a <TIM_DMACmd+0xc>
    TIMx->DIER |= TIM_DMASource; 
 8003364:	4319      	orrs	r1, r3
 8003366:	8181      	strh	r1, [r0, #12]
}
 8003368:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800336a:	438b      	bics	r3, r1
 800336c:	8183      	strh	r3, [r0, #12]
}
 800336e:	e7fb      	b.n	8003368 <TIM_DMACmd+0xa>

08003370 <TIM_ITConfig>:
 8003370:	b510      	push	{r4, lr}
 8003372:	f7ff fff4 	bl	800335e <TIM_DMACmd>
 8003376:	bd10      	pop	{r4, pc}

08003378 <TIM_SelectCCDMA>:
{
 8003378:	2308      	movs	r3, #8
    TIMx->CR2 |= TIM_CR2_CCDS;
 800337a:	8882      	ldrh	r2, [r0, #4]
  if (NewState != DISABLE)
 800337c:	2900      	cmp	r1, #0
 800337e:	d002      	beq.n	8003386 <TIM_SelectCCDMA+0xe>
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003380:	4313      	orrs	r3, r2
 8003382:	8083      	strh	r3, [r0, #4]
}
 8003384:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8003386:	439a      	bics	r2, r3
 8003388:	8082      	strh	r2, [r0, #4]
}
 800338a:	e7fb      	b.n	8003384 <TIM_SelectCCDMA+0xc>

0800338c <TIM_InternalClockConfig>:
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800338c:	2207      	movs	r2, #7
 800338e:	8903      	ldrh	r3, [r0, #8]
 8003390:	4393      	bics	r3, r2
 8003392:	8103      	strh	r3, [r0, #8]
}
 8003394:	4770      	bx	lr

08003396 <TIM_ITRxExternalClockConfig>:
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8003396:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003398:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800339a:	4393      	bics	r3, r2
  tmpsmcr |= TIM_InputTriggerSource;
 800339c:	4319      	orrs	r1, r3
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800339e:	2307      	movs	r3, #7
  TIMx->SMCR = tmpsmcr;
 80033a0:	8101      	strh	r1, [r0, #8]
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80033a2:	8902      	ldrh	r2, [r0, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	8103      	strh	r3, [r0, #8]
}
 80033a8:	4770      	bx	lr

080033aa <TIM_TIxExternalClockConfig>:
{
 80033aa:	b570      	push	{r4, r5, r6, lr}
 80033ac:	000d      	movs	r5, r1
 80033ae:	0004      	movs	r4, r0
 80033b0:	0011      	movs	r1, r2
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80033b2:	2201      	movs	r2, #1
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80033b4:	2d60      	cmp	r5, #96	; 0x60
 80033b6:	d10b      	bne.n	80033d0 <TIM_TIxExternalClockConfig+0x26>
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80033b8:	f7ff fb94 	bl	8002ae4 <TI2_Config>
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80033bc:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80033be:	8923      	ldrh	r3, [r4, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80033c0:	4393      	bics	r3, r2
  tmpsmcr |= TIM_InputTriggerSource;
 80033c2:	431d      	orrs	r5, r3
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80033c4:	2307      	movs	r3, #7
  TIMx->SMCR = tmpsmcr;
 80033c6:	8125      	strh	r5, [r4, #8]
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80033c8:	8922      	ldrh	r2, [r4, #8]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	8123      	strh	r3, [r4, #8]
}
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80033d0:	f7ff fb74 	bl	8002abc <TI1_Config>
 80033d4:	e7f2      	b.n	80033bc <TIM_TIxExternalClockConfig+0x12>

080033d6 <TIM_SelectInputTrigger>:
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80033d6:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80033d8:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80033da:	4393      	bics	r3, r2
  tmpsmcr |= TIM_InputTriggerSource;
 80033dc:	4319      	orrs	r1, r3
  TIMx->SMCR = tmpsmcr;
 80033de:	8101      	strh	r1, [r0, #8]
}
 80033e0:	4770      	bx	lr

080033e2 <TIM_SelectOutputTrigger>:
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 80033e2:	2270      	movs	r2, #112	; 0x70
 80033e4:	8883      	ldrh	r3, [r0, #4]
 80033e6:	4393      	bics	r3, r2
 80033e8:	8083      	strh	r3, [r0, #4]
  TIMx->CR2 |=  TIM_TRGOSource;
 80033ea:	8883      	ldrh	r3, [r0, #4]
 80033ec:	4319      	orrs	r1, r3
 80033ee:	8081      	strh	r1, [r0, #4]
}
 80033f0:	4770      	bx	lr

080033f2 <TIM_SelectSlaveMode>:
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 80033f2:	2207      	movs	r2, #7
 80033f4:	8903      	ldrh	r3, [r0, #8]
 80033f6:	4393      	bics	r3, r2
 80033f8:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |= TIM_SlaveMode;
 80033fa:	8903      	ldrh	r3, [r0, #8]
 80033fc:	4319      	orrs	r1, r3
 80033fe:	8101      	strh	r1, [r0, #8]
}
 8003400:	4770      	bx	lr

08003402 <TIM_SelectMasterSlaveMode>:
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	8903      	ldrh	r3, [r0, #8]
 8003406:	4393      	bics	r3, r2
 8003408:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800340a:	8903      	ldrh	r3, [r0, #8]
 800340c:	4319      	orrs	r1, r3
 800340e:	8101      	strh	r1, [r0, #8]
}
 8003410:	4770      	bx	lr

08003412 <TIM_ETRConfig>:
{
 8003412:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8003414:	8904      	ldrh	r4, [r0, #8]
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003416:	430a      	orrs	r2, r1
 8003418:	021b      	lsls	r3, r3, #8
  tmpsmcr &= SMCR_ETR_MASK;
 800341a:	b2e4      	uxtb	r4, r4
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800341c:	4313      	orrs	r3, r2
 800341e:	4323      	orrs	r3, r4
 8003420:	b29b      	uxth	r3, r3
  TIMx->SMCR = tmpsmcr;
 8003422:	8103      	strh	r3, [r0, #8]
}
 8003424:	bd10      	pop	{r4, pc}

08003426 <TIM_ETRClockMode1Config>:
{
 8003426:	b510      	push	{r4, lr}
 8003428:	0004      	movs	r4, r0
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800342a:	f7ff fff2 	bl	8003412 <TIM_ETRConfig>
 800342e:	2377      	movs	r3, #119	; 0x77
  tmpsmcr = TIMx->SMCR;
 8003430:	8922      	ldrh	r2, [r4, #8]
}
 8003432:	439a      	bics	r2, r3
  tmpsmcr |= TIM_TS_ETRF;
 8003434:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8003436:	8123      	strh	r3, [r4, #8]
}
 8003438:	bd10      	pop	{r4, pc}

0800343a <TIM_ETRClockMode2Config>:
{
 800343a:	b510      	push	{r4, lr}
 800343c:	0004      	movs	r4, r0
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800343e:	f7ff ffe8 	bl	8003412 <TIM_ETRConfig>
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	8922      	ldrh	r2, [r4, #8]
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4313      	orrs	r3, r2
 800344a:	8123      	strh	r3, [r4, #8]
}
 800344c:	bd10      	pop	{r4, pc}

0800344e <TIM_EncoderInterfaceConfig>:
{
 800344e:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8003450:	2707      	movs	r7, #7
  tmpsmcr = TIMx->SMCR;
 8003452:	8906      	ldrh	r6, [r0, #8]
  tmpccmr1 = TIMx->CCMR1;
 8003454:	8b05      	ldrh	r5, [r0, #24]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8003456:	43be      	bics	r6, r7
  tmpsmcr |= TIM_EncoderMode;
 8003458:	4331      	orrs	r1, r6
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800345a:	4e08      	ldr	r6, [pc, #32]	; (800347c <TIM_EncoderInterfaceConfig+0x2e>)
  tmpccer = TIMx->CCER;
 800345c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800345e:	4035      	ands	r5, r6
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003460:	2602      	movs	r6, #2
 8003462:	36ff      	adds	r6, #255	; 0xff
 8003464:	4335      	orrs	r5, r6
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003466:	011b      	lsls	r3, r3, #4
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003468:	3e57      	subs	r6, #87	; 0x57
 800346a:	43b4      	bics	r4, r6
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800346c:	431a      	orrs	r2, r3
 800346e:	4322      	orrs	r2, r4
 8003470:	b292      	uxth	r2, r2
  TIMx->SMCR = tmpsmcr;
 8003472:	8101      	strh	r1, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 8003474:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8003476:	8402      	strh	r2, [r0, #32]
}
 8003478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	fffffcfc 	.word	0xfffffcfc

08003480 <TIM_SelectHallSensor>:
{
 8003480:	2380      	movs	r3, #128	; 0x80
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003482:	8882      	ldrh	r2, [r0, #4]
  if (NewState != DISABLE)
 8003484:	2900      	cmp	r1, #0
 8003486:	d002      	beq.n	800348e <TIM_SelectHallSensor+0xe>
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003488:	4313      	orrs	r3, r2
 800348a:	8083      	strh	r3, [r0, #4]
}
 800348c:	4770      	bx	lr
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 800348e:	439a      	bics	r2, r3
 8003490:	8082      	strh	r2, [r0, #4]
}
 8003492:	e7fb      	b.n	800348c <TIM_SelectHallSensor+0xc>

08003494 <TIM_RemapConfig>:
  TIMx->OR =  TIM_Remap;
 8003494:	3050      	adds	r0, #80	; 0x50
 8003496:	8001      	strh	r1, [r0, #0]
}
 8003498:	4770      	bx	lr
 800349a:	46c0      	nop			; (mov r8, r8)

0800349c <USART_DeInit>:
void USART_DeInit(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <USART_DeInit+0x3c>)
{
 800349e:	b510      	push	{r4, lr}
  if (USARTx == USART1)
 80034a0:	4298      	cmp	r0, r3
 80034a2:	d10a      	bne.n	80034ba <USART_DeInit+0x1e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80034a4:	2080      	movs	r0, #128	; 0x80
 80034a6:	2101      	movs	r1, #1
 80034a8:	01c0      	lsls	r0, r0, #7
 80034aa:	f7fe fbf9 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80034ae:	2080      	movs	r0, #128	; 0x80
 80034b0:	2100      	movs	r1, #0
 80034b2:	01c0      	lsls	r0, r0, #7
 80034b4:	f7fe fbf4 	bl	8001ca0 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    }
  }
}
 80034b8:	bd10      	pop	{r4, pc}
    if  (USARTx == USART2)
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <USART_DeInit+0x40>)
 80034bc:	4298      	cmp	r0, r3
 80034be:	d1fb      	bne.n	80034b8 <USART_DeInit+0x1c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80034c0:	2080      	movs	r0, #128	; 0x80
 80034c2:	2101      	movs	r1, #1
 80034c4:	0280      	lsls	r0, r0, #10
 80034c6:	f7fe fbf7 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80034ca:	2080      	movs	r0, #128	; 0x80
 80034cc:	2100      	movs	r1, #0
 80034ce:	0280      	lsls	r0, r0, #10
 80034d0:	f7fe fbf2 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
}
 80034d4:	e7f0      	b.n	80034b8 <USART_DeInit+0x1c>
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40004400 	.word	0x40004400

080034e0 <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80034e0:	2201      	movs	r2, #1
{
 80034e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e4:	000d      	movs	r5, r1
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80034e6:	6803      	ldr	r3, [r0, #0]
{
 80034e8:	b089      	sub	sp, #36	; 0x24
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80034ea:	4393      	bics	r3, r2
 80034ec:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80034ee:	6843      	ldr	r3, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80034f0:	4a1e      	ldr	r2, [pc, #120]	; (800356c <USART_Init+0x8c>)
{
 80034f2:	0004      	movs	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80034f4:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80034f6:	688a      	ldr	r2, [r1, #8]
 80034f8:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80034fa:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80034fc:	6803      	ldr	r3, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80034fe:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <USART_Init+0x90>)
 8003500:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003502:	684b      	ldr	r3, [r1, #4]
 8003504:	68c9      	ldr	r1, [r1, #12]
 8003506:	430b      	orrs	r3, r1
 8003508:	6929      	ldr	r1, [r5, #16]
 800350a:	430b      	orrs	r3, r1
 800350c:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 800350e:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8003510:	6883      	ldr	r3, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8003512:	4a18      	ldr	r2, [pc, #96]	; (8003574 <USART_Init+0x94>)
 8003514:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8003516:	696a      	ldr	r2, [r5, #20]
 8003518:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 800351a:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800351c:	a801      	add	r0, sp, #4
 800351e:	f7fe faf3 	bl	8001b08 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <USART_Init+0x98>)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8003524:	9f07      	ldr	r7, [sp, #28]
  if (USARTx == USART1)
 8003526:	429c      	cmp	r4, r3
 8003528:	d000      	beq.n	800352c <USART_Init+0x4c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 800352a:	9f03      	ldr	r7, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	682e      	ldr	r6, [r5, #0]
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	d500      	bpl.n	8003536 <USART_Init+0x56>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8003534:	007f      	lsls	r7, r7, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8003536:	0031      	movs	r1, r6
 8003538:	0038      	movs	r0, r7
 800353a:	f000 fc4b 	bl	8003dd4 <__udivsi3>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 800353e:	0031      	movs	r1, r6
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8003540:	0005      	movs	r5, r0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8003542:	0038      	movs	r0, r7
 8003544:	f000 fccc 	bl	8003ee0 <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 8003548:	2300      	movs	r3, #0
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 800354a:	0876      	lsrs	r6, r6, #1
    divider++;
 800354c:	42b1      	cmp	r1, r6
 800354e:	415b      	adcs	r3, r3
 8003550:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	d504      	bpl.n	8003562 <USART_Init+0x82>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <USART_Init+0x9c>)
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800355a:	072a      	lsls	r2, r5, #28
 800355c:	0f52      	lsrs	r2, r2, #29
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800355e:	401d      	ands	r5, r3
 8003560:	4315      	orrs	r5, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8003562:	b2ad      	uxth	r5, r5
 8003564:	81a5      	strh	r5, [r4, #12]
}
 8003566:	b009      	add	sp, #36	; 0x24
 8003568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	ffffcfff 	.word	0xffffcfff
 8003570:	ffffe9f3 	.word	0xffffe9f3
 8003574:	fffffcff 	.word	0xfffffcff
 8003578:	40013800 	.word	0x40013800
 800357c:	0000fff0 	.word	0x0000fff0

08003580 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8003580:	2396      	movs	r3, #150	; 0x96
 8003582:	019b      	lsls	r3, r3, #6
 8003584:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003586:	220c      	movs	r2, #12
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8003588:	2300      	movs	r3, #0
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800358a:	6102      	str	r2, [r0, #16]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800358c:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800358e:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8003590:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8003592:	6143      	str	r3, [r0, #20]
}
 8003594:	4770      	bx	lr

08003596 <USART_ClockInit>:
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003596:	6843      	ldr	r3, [r0, #4]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8003598:	4a06      	ldr	r2, [pc, #24]	; (80035b4 <USART_ClockInit+0x1e>)
{
 800359a:	b510      	push	{r4, lr}
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800359c:	401a      	ands	r2, r3
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800359e:	684c      	ldr	r4, [r1, #4]
 80035a0:	680b      	ldr	r3, [r1, #0]
 80035a2:	4323      	orrs	r3, r4
 80035a4:	688c      	ldr	r4, [r1, #8]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80035a6:	68c9      	ldr	r1, [r1, #12]
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80035a8:	4323      	orrs	r3, r4
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80035aa:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80035ac:	4313      	orrs	r3, r2
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80035ae:	6043      	str	r3, [r0, #4]
}
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	fffff0ff 	.word	0xfffff0ff

080035b8 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80035b8:	2300      	movs	r3, #0
 80035ba:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80035bc:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80035be:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80035c0:	60c3      	str	r3, [r0, #12]
}
 80035c2:	4770      	bx	lr

080035c4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80035c4:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80035c6:	6802      	ldr	r2, [r0, #0]
  if (NewState != DISABLE)
 80035c8:	2900      	cmp	r1, #0
 80035ca:	d002      	beq.n	80035d2 <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
 80035cc:	4313      	orrs	r3, r2
 80035ce:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80035d0:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80035d2:	439a      	bics	r2, r3
 80035d4:	6002      	str	r2, [r0, #0]
}
 80035d6:	e7fb      	b.n	80035d0 <USART_Cmd+0xc>

080035d8 <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 80035d8:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 80035da:	2a00      	cmp	r2, #0
 80035dc:	d002      	beq.n	80035e4 <USART_DirectionModeCmd+0xc>
    USARTx->CR1 |= USART_DirectionMode;
 80035de:	4319      	orrs	r1, r3
 80035e0:	6001      	str	r1, [r0, #0]
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
  }
}
 80035e2:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 80035e4:	438b      	bics	r3, r1
 80035e6:	6003      	str	r3, [r0, #0]
}
 80035e8:	e7fb      	b.n	80035e2 <USART_DirectionModeCmd+0xa>

080035ea <USART_OverSampling8Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80035ea:	2900      	cmp	r1, #0
 80035ec:	d005      	beq.n	80035fa <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	6802      	ldr	r2, [r0, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 80035f6:	6003      	str	r3, [r0, #0]
  }
}  
 80035f8:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	4a01      	ldr	r2, [pc, #4]	; (8003604 <USART_OverSampling8Cmd+0x1a>)
 80035fe:	4013      	ands	r3, r2
 8003600:	e7f9      	b.n	80035f6 <USART_OverSampling8Cmd+0xc>
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	ffff7fff 	.word	0xffff7fff

08003608 <USART_OneBitMethodCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003608:	2900      	cmp	r1, #0
 800360a:	d005      	beq.n	8003618 <USART_OneBitMethodCmd+0x10>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	6882      	ldr	r2, [r0, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8003614:	6083      	str	r3, [r0, #8]
  }
}
 8003616:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8003618:	6883      	ldr	r3, [r0, #8]
 800361a:	4a01      	ldr	r2, [pc, #4]	; (8003620 <USART_OneBitMethodCmd+0x18>)
 800361c:	4013      	ands	r3, r2
 800361e:	e7f9      	b.n	8003614 <USART_OneBitMethodCmd+0xc>
 8003620:	fffff7ff 	.word	0xfffff7ff

08003624 <USART_MSBFirstCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003624:	2900      	cmp	r1, #0
 8003626:	d005      	beq.n	8003634 <USART_MSBFirstCmd+0x10>
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	6842      	ldr	r2, [r0, #4]
 800362c:	031b      	lsls	r3, r3, #12
 800362e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8003630:	6043      	str	r3, [r0, #4]
  }
}
 8003632:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8003634:	6843      	ldr	r3, [r0, #4]
 8003636:	4a01      	ldr	r2, [pc, #4]	; (800363c <USART_MSBFirstCmd+0x18>)
 8003638:	4013      	ands	r3, r2
 800363a:	e7f9      	b.n	8003630 <USART_MSBFirstCmd+0xc>
 800363c:	fff7ffff 	.word	0xfff7ffff

08003640 <USART_DataInvCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003640:	2900      	cmp	r1, #0
 8003642:	d005      	beq.n	8003650 <USART_DataInvCmd+0x10>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	6842      	ldr	r2, [r0, #4]
 8003648:	02db      	lsls	r3, r3, #11
 800364a:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 800364c:	6043      	str	r3, [r0, #4]
  }
}
 800364e:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8003650:	6843      	ldr	r3, [r0, #4]
 8003652:	4a01      	ldr	r2, [pc, #4]	; (8003658 <USART_DataInvCmd+0x18>)
 8003654:	4013      	ands	r3, r2
 8003656:	e7f9      	b.n	800364c <USART_DataInvCmd+0xc>
 8003658:	fffbffff 	.word	0xfffbffff

0800365c <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 800365c:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 800365e:	2a00      	cmp	r2, #0
 8003660:	d002      	beq.n	8003668 <USART_InvPinCmd+0xc>
    USARTx->CR2 |= USART_InvPin;
 8003662:	4319      	orrs	r1, r3
 8003664:	6041      	str	r1, [r0, #4]
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
  }
}
 8003666:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8003668:	438b      	bics	r3, r1
 800366a:	6043      	str	r3, [r0, #4]
}
 800366c:	e7fb      	b.n	8003666 <USART_InvPinCmd+0xa>

0800366e <USART_SWAPPinCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800366e:	2900      	cmp	r1, #0
 8003670:	d005      	beq.n	800367e <USART_SWAPPinCmd+0x10>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	6842      	ldr	r2, [r0, #4]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 800367a:	6043      	str	r3, [r0, #4]
  }
}
 800367c:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 800367e:	6843      	ldr	r3, [r0, #4]
 8003680:	4a01      	ldr	r2, [pc, #4]	; (8003688 <USART_SWAPPinCmd+0x1a>)
 8003682:	4013      	ands	r3, r2
 8003684:	e7f9      	b.n	800367a <USART_SWAPPinCmd+0xc>
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	ffff7fff 	.word	0xffff7fff

0800368c <USART_ReceiverTimeOutCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800368c:	2900      	cmp	r1, #0
 800368e:	d005      	beq.n	800369c <USART_ReceiverTimeOutCmd+0x10>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	6842      	ldr	r2, [r0, #4]
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8003698:	6043      	str	r3, [r0, #4]
  }
}
 800369a:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 800369c:	6843      	ldr	r3, [r0, #4]
 800369e:	4a01      	ldr	r2, [pc, #4]	; (80036a4 <USART_ReceiverTimeOutCmd+0x18>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	e7f9      	b.n	8003698 <USART_ReceiverTimeOutCmd+0xc>
 80036a4:	ff7fffff 	.word	0xff7fffff

080036a8 <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 80036a8:	6943      	ldr	r3, [r0, #20]
 80036aa:	0e1b      	lsrs	r3, r3, #24
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 80036b0:	6943      	ldr	r3, [r0, #20]
 80036b2:	4319      	orrs	r1, r3
 80036b4:	6141      	str	r1, [r0, #20]
}
 80036b6:	4770      	bx	lr

080036b8 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	8a03      	ldrh	r3, [r0, #16]
 80036bc:	4393      	bics	r3, r2
 80036be:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80036c0:	8a03      	ldrh	r3, [r0, #16]
 80036c2:	4319      	orrs	r1, r3
 80036c4:	8201      	strh	r1, [r0, #16]
}
 80036c6:	4770      	bx	lr

080036c8 <USART_STOPModeCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called when USART clock is set to HSI or LSE. 
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80036c8:	2302      	movs	r3, #2
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 80036ca:	6802      	ldr	r2, [r0, #0]
  if (NewState != DISABLE)
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d002      	beq.n	80036d6 <USART_STOPModeCmd+0xe>
    USARTx->CR1 |= USART_CR1_UESM;
 80036d0:	4313      	orrs	r3, r2
 80036d2:	6003      	str	r3, [r0, #0]
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
  }
}
 80036d4:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 80036d6:	439a      	bics	r2, r3
 80036d8:	6002      	str	r2, [r0, #0]
}
 80036da:	e7fb      	b.n	80036d4 <USART_STOPModeCmd+0xc>

080036dc <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 80036dc:	6883      	ldr	r3, [r0, #8]
 80036de:	4a03      	ldr	r2, [pc, #12]	; (80036ec <USART_StopModeWakeUpSourceConfig+0x10>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 80036e4:	6883      	ldr	r3, [r0, #8]
 80036e6:	4319      	orrs	r1, r3
 80036e8:	6081      	str	r1, [r0, #8]
}
 80036ea:	4770      	bx	lr
 80036ec:	ffcfffff 	.word	0xffcfffff

080036f0 <USART_AutoBaudRateCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80036f0:	2900      	cmp	r1, #0
 80036f2:	d005      	beq.n	8003700 <USART_AutoBaudRateCmd+0x10>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	6842      	ldr	r2, [r0, #4]
 80036f8:	035b      	lsls	r3, r3, #13
 80036fa:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 80036fc:	6043      	str	r3, [r0, #4]
  }
}
 80036fe:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8003700:	6843      	ldr	r3, [r0, #4]
 8003702:	4a01      	ldr	r2, [pc, #4]	; (8003708 <USART_AutoBaudRateCmd+0x18>)
 8003704:	4013      	ands	r3, r2
 8003706:	e7f9      	b.n	80036fc <USART_AutoBaudRateCmd+0xc>
 8003708:	ffefffff 	.word	0xffefffff

0800370c <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 800370c:	6843      	ldr	r3, [r0, #4]
 800370e:	4a03      	ldr	r2, [pc, #12]	; (800371c <USART_AutoBaudRateConfig+0x10>)
 8003710:	4013      	ands	r3, r2
 8003712:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8003714:	6843      	ldr	r3, [r0, #4]
 8003716:	4319      	orrs	r1, r3
 8003718:	6041      	str	r1, [r0, #4]
}
 800371a:	4770      	bx	lr
 800371c:	ff9fffff 	.word	0xff9fffff

08003720 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8003720:	05c9      	lsls	r1, r1, #23
 8003722:	0dc9      	lsrs	r1, r1, #23
 8003724:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8003726:	4770      	bx	lr

08003728 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8003728:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 800372a:	05c0      	lsls	r0, r0, #23
 800372c:	0dc0      	lsrs	r0, r0, #23
}
 800372e:	4770      	bx	lr

08003730 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8003730:	6843      	ldr	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8003732:	0609      	lsls	r1, r1, #24
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 800373a:	6843      	ldr	r3, [r0, #4]
 800373c:	4319      	orrs	r1, r3
 800373e:	6041      	str	r1, [r0, #4]
}
 8003740:	4770      	bx	lr

08003742 <USART_MuteModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8003742:	2900      	cmp	r1, #0
 8003744:	d005      	beq.n	8003752 <USART_MuteModeCmd+0x10>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	6802      	ldr	r2, [r0, #0]
 800374a:	019b      	lsls	r3, r3, #6
 800374c:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 800374e:	6003      	str	r3, [r0, #0]
  }
}
 8003750:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8003752:	6803      	ldr	r3, [r0, #0]
 8003754:	4a01      	ldr	r2, [pc, #4]	; (800375c <USART_MuteModeCmd+0x1a>)
 8003756:	4013      	ands	r3, r2
 8003758:	e7f9      	b.n	800374e <USART_MuteModeCmd+0xc>
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	ffffdfff 	.word	0xffffdfff

08003760 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8003760:	6803      	ldr	r3, [r0, #0]
 8003762:	4a03      	ldr	r2, [pc, #12]	; (8003770 <USART_MuteModeWakeUpConfig+0x10>)
 8003764:	4013      	ands	r3, r2
 8003766:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 8003768:	6803      	ldr	r3, [r0, #0]
 800376a:	4319      	orrs	r1, r3
 800376c:	6001      	str	r1, [r0, #0]
}
 800376e:	4770      	bx	lr
 8003770:	fffff7ff 	.word	0xfffff7ff

08003774 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8003774:	2210      	movs	r2, #16
 8003776:	6843      	ldr	r3, [r0, #4]
 8003778:	4393      	bics	r3, r2
 800377a:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 800377c:	6843      	ldr	r3, [r0, #4]
 800377e:	4319      	orrs	r1, r3
 8003780:	6041      	str	r1, [r0, #4]
}
 8003782:	4770      	bx	lr

08003784 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8003784:	2220      	movs	r2, #32
 8003786:	6843      	ldr	r3, [r0, #4]
 8003788:	4393      	bics	r3, r2
 800378a:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800378c:	6843      	ldr	r3, [r0, #4]
 800378e:	4319      	orrs	r1, r3
 8003790:	6041      	str	r1, [r0, #4]
}
 8003792:	4770      	bx	lr

08003794 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003794:	2900      	cmp	r1, #0
 8003796:	d005      	beq.n	80037a4 <USART_LINCmd+0x10>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	6842      	ldr	r2, [r0, #4]
 800379c:	01db      	lsls	r3, r3, #7
 800379e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 80037a0:	6043      	str	r3, [r0, #4]
  }
}
 80037a2:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 80037a4:	6843      	ldr	r3, [r0, #4]
 80037a6:	4a01      	ldr	r2, [pc, #4]	; (80037ac <USART_LINCmd+0x18>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	e7f9      	b.n	80037a0 <USART_LINCmd+0xc>
 80037ac:	ffffbfff 	.word	0xffffbfff

080037b0 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80037b0:	2308      	movs	r3, #8
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80037b2:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d002      	beq.n	80037be <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= USART_CR3_HDSEL;
 80037b8:	4313      	orrs	r3, r2
 80037ba:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
  }
}
 80037bc:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 80037be:	439a      	bics	r2, r3
 80037c0:	6082      	str	r2, [r0, #8]
}
 80037c2:	e7fb      	b.n	80037bc <USART_HalfDuplexCmd+0xc>

080037c4 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80037c4:	8a03      	ldrh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80037c6:	0209      	lsls	r1, r1, #8
  USARTx->GTPR &= USART_GTPR_PSC;
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	8203      	strh	r3, [r0, #16]
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80037cc:	8a03      	ldrh	r3, [r0, #16]
 80037ce:	4319      	orrs	r1, r3
 80037d0:	8201      	strh	r1, [r0, #16]
}
 80037d2:	4770      	bx	lr

080037d4 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80037d4:	2320      	movs	r3, #32
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80037d6:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 80037d8:	2900      	cmp	r1, #0
 80037da:	d002      	beq.n	80037e2 <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= USART_CR3_SCEN;
 80037dc:	4313      	orrs	r3, r2
 80037de:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
  }
}
 80037e0:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 80037e2:	439a      	bics	r2, r3
 80037e4:	6082      	str	r2, [r0, #8]
}
 80037e6:	e7fb      	b.n	80037e0 <USART_SmartCardCmd+0xc>

080037e8 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80037e8:	2310      	movs	r3, #16
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80037ea:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 80037ec:	2900      	cmp	r1, #0
 80037ee:	d002      	beq.n	80037f6 <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= USART_CR3_NACK;
 80037f0:	4313      	orrs	r3, r2
 80037f2:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
  }
}
 80037f4:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 80037f6:	439a      	bics	r2, r3
 80037f8:	6082      	str	r2, [r0, #8]
}
 80037fa:	e7fb      	b.n	80037f4 <USART_SmartCardNACKCmd+0xc>

080037fc <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 80037fc:	6883      	ldr	r3, [r0, #8]
 80037fe:	4a04      	ldr	r2, [pc, #16]	; (8003810 <USART_SetAutoRetryCount+0x14>)
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8003800:	0449      	lsls	r1, r1, #17
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8003802:	4013      	ands	r3, r2
 8003804:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8003806:	6883      	ldr	r3, [r0, #8]
 8003808:	4319      	orrs	r1, r3
 800380a:	6081      	str	r1, [r0, #8]
}
 800380c:	4770      	bx	lr
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	fff1ffff 	.word	0xfff1ffff

08003814 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8003814:	6943      	ldr	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8003816:	0609      	lsls	r1, r1, #24
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	6143      	str	r3, [r0, #20]
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 800381e:	6943      	ldr	r3, [r0, #20]
 8003820:	4319      	orrs	r1, r3
 8003822:	6141      	str	r1, [r0, #20]
}
 8003824:	4770      	bx	lr

08003826 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8003826:	2204      	movs	r2, #4
 8003828:	6883      	ldr	r3, [r0, #8]
 800382a:	4393      	bics	r3, r2
 800382c:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 800382e:	6883      	ldr	r3, [r0, #8]
 8003830:	4319      	orrs	r1, r3
 8003832:	6081      	str	r1, [r0, #8]
}
 8003834:	4770      	bx	lr

08003836 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003836:	2302      	movs	r3, #2
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8003838:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 800383a:	2900      	cmp	r1, #0
 800383c:	d002      	beq.n	8003844 <USART_IrDACmd+0xe>
    USARTx->CR3 |= USART_CR3_IREN;
 800383e:	4313      	orrs	r3, r2
 8003840:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
  }
}
 8003842:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8003844:	439a      	bics	r2, r3
 8003846:	6082      	str	r2, [r0, #8]
}
 8003848:	e7fb      	b.n	8003842 <USART_IrDACmd+0xc>

0800384a <USART_DECmd>:
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800384a:	2900      	cmp	r1, #0
 800384c:	d005      	beq.n	800385a <USART_DECmd+0x10>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	6882      	ldr	r2, [r0, #8]
 8003852:	01db      	lsls	r3, r3, #7
 8003854:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8003856:	6083      	str	r3, [r0, #8]
  }
}
 8003858:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 800385a:	6883      	ldr	r3, [r0, #8]
 800385c:	4a01      	ldr	r2, [pc, #4]	; (8003864 <USART_DECmd+0x1a>)
 800385e:	4013      	ands	r3, r2
 8003860:	e7f9      	b.n	8003856 <USART_DECmd+0xc>
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	ffffbfff 	.word	0xffffbfff

08003868 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8003868:	6883      	ldr	r3, [r0, #8]
 800386a:	4a03      	ldr	r2, [pc, #12]	; (8003878 <USART_DEPolarityConfig+0x10>)
 800386c:	4013      	ands	r3, r2
 800386e:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8003870:	6883      	ldr	r3, [r0, #8]
 8003872:	4319      	orrs	r1, r3
 8003874:	6081      	str	r1, [r0, #8]
}
 8003876:	4770      	bx	lr
 8003878:	ffff7fff 	.word	0xffff7fff

0800387c <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 800387c:	6803      	ldr	r3, [r0, #0]
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <USART_SetDEAssertionTime+0x14>)
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8003880:	0549      	lsls	r1, r1, #21
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8003882:	4013      	ands	r3, r2
 8003884:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8003886:	6803      	ldr	r3, [r0, #0]
 8003888:	4319      	orrs	r1, r3
 800388a:	6001      	str	r1, [r0, #0]
}
 800388c:	4770      	bx	lr
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	fc1fffff 	.word	0xfc1fffff

08003894 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8003894:	6803      	ldr	r3, [r0, #0]
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <USART_SetDEDeassertionTime+0x14>)
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8003898:	0409      	lsls	r1, r1, #16
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 800389a:	4013      	ands	r3, r2
 800389c:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 800389e:	6803      	ldr	r3, [r0, #0]
 80038a0:	4319      	orrs	r1, r3
 80038a2:	6001      	str	r1, [r0, #0]
}
 80038a4:	4770      	bx	lr
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	ffe0ffff 	.word	0xffe0ffff

080038ac <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80038ac:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	d002      	beq.n	80038b8 <USART_DMACmd+0xc>
    USARTx->CR3 |= USART_DMAReq;
 80038b2:	4319      	orrs	r1, r3
 80038b4:	6081      	str	r1, [r0, #8]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
  }
}
 80038b6:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 80038b8:	438b      	bics	r3, r1
 80038ba:	6083      	str	r3, [r0, #8]
}
 80038bc:	e7fb      	b.n	80038b6 <USART_DMACmd+0xa>

080038be <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 80038be:	6883      	ldr	r3, [r0, #8]
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <USART_DMAReceptionErrorConfig+0x12>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 80038c6:	6883      	ldr	r3, [r0, #8]
 80038c8:	4319      	orrs	r1, r3
 80038ca:	6081      	str	r1, [r0, #8]
}
 80038cc:	4770      	bx	lr
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	ffffdfff 	.word	0xffffdfff

080038d4 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80038d4:	2301      	movs	r3, #1
{
 80038d6:	b510      	push	{r4, lr}
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80038d8:	b28c      	uxth	r4, r1
  itpos = USART_IT & IT_MASK;
 80038da:	b2c9      	uxtb	r1, r1
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80038dc:	0a24      	lsrs	r4, r4, #8
  itmask = (((uint32_t)0x01) << itpos);
 80038de:	408b      	lsls	r3, r1
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 80038e0:	2c02      	cmp	r4, #2
 80038e2:	d106      	bne.n	80038f2 <USART_ITConfig+0x1e>
  {
    usartxbase += 0x04;
 80038e4:	3004      	adds	r0, #4
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80038e6:	2a00      	cmp	r2, #0
 80038e8:	d007      	beq.n	80038fa <USART_ITConfig+0x26>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80038ea:	6802      	ldr	r2, [r0, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80038f0:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80038f2:	2c03      	cmp	r4, #3
 80038f4:	d1f7      	bne.n	80038e6 <USART_ITConfig+0x12>
    usartxbase += 0x08;
 80038f6:	3008      	adds	r0, #8
 80038f8:	e7f5      	b.n	80038e6 <USART_ITConfig+0x12>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80038fa:	6802      	ldr	r2, [r0, #0]
 80038fc:	439a      	bics	r2, r3
 80038fe:	6002      	str	r2, [r0, #0]
}
 8003900:	e7f6      	b.n	80038f0 <USART_ITConfig+0x1c>

08003902 <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8003902:	8b03      	ldrh	r3, [r0, #24]
  if (NewState != DISABLE)
 8003904:	2a00      	cmp	r2, #0
 8003906:	d003      	beq.n	8003910 <USART_RequestCmd+0xe>
      USARTx->RQR |= USART_Request;
 8003908:	4319      	orrs	r1, r3
 800390a:	b289      	uxth	r1, r1
 800390c:	8301      	strh	r1, [r0, #24]
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
  }
}
 800390e:	4770      	bx	lr
    USARTx->RQR &= (uint32_t)~USART_Request;
 8003910:	438b      	bics	r3, r1
 8003912:	8303      	strh	r3, [r0, #24]
}
 8003914:	e7fb      	b.n	800390e <USART_RequestCmd+0xc>

08003916 <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8003916:	6883      	ldr	r3, [r0, #8]
 8003918:	4a03      	ldr	r2, [pc, #12]	; (8003928 <USART_OverrunDetectionConfig+0x12>)
 800391a:	4013      	ands	r3, r2
 800391c:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 800391e:	6883      	ldr	r3, [r0, #8]
 8003920:	4319      	orrs	r1, r3
 8003922:	6081      	str	r1, [r0, #8]
}
 8003924:	4770      	bx	lr
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	ffffefff 	.word	0xffffefff

0800392c <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800392c:	69c0      	ldr	r0, [r0, #28]
 800392e:	4008      	ands	r0, r1
 8003930:	1e41      	subs	r1, r0, #1
 8003932:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8003934:	b2c0      	uxtb	r0, r0
}
 8003936:	4770      	bx	lr

08003938 <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8003938:	6201      	str	r1, [r0, #32]
}
 800393a:	4770      	bx	lr

0800393c <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800393c:	2301      	movs	r3, #1
{
 800393e:	b510      	push	{r4, lr}
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8003940:	b28a      	uxth	r2, r1
  itmask = USART_IT & IT_MASK;
 8003942:	b2cc      	uxtb	r4, r1
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8003944:	0a12      	lsrs	r2, r2, #8
  itmask = (uint32_t)0x01 << itmask;
 8003946:	40a3      	lsls	r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003948:	2a01      	cmp	r2, #1
 800394a:	d10d      	bne.n	8003968 <USART_GetITStatus+0x2c>
  {
    itmask &= USARTx->CR1;
 800394c:	6802      	ldr	r2, [r0, #0]
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800394e:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 8003950:	69c2      	ldr	r2, [r0, #28]
 8003952:	2000      	movs	r0, #0
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003954:	4283      	cmp	r3, r0
 8003956:	d006      	beq.n	8003966 <USART_GetITStatus+0x2a>
  bitpos = USART_IT >> 0x10;
 8003958:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 800395a:	3001      	adds	r0, #1
 800395c:	4088      	lsls	r0, r1
  bitpos &= USARTx->ISR;
 800395e:	4010      	ands	r0, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003960:	1e43      	subs	r3, r0, #1
 8003962:	4198      	sbcs	r0, r3
 8003964:	b2c0      	uxtb	r0, r0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8003966:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003968:	2a02      	cmp	r2, #2
 800396a:	d101      	bne.n	8003970 <USART_GetITStatus+0x34>
    itmask &= USARTx->CR2;
 800396c:	6842      	ldr	r2, [r0, #4]
 800396e:	e7ee      	b.n	800394e <USART_GetITStatus+0x12>
    itmask &= USARTx->CR3;
 8003970:	6882      	ldr	r2, [r0, #8]
 8003972:	e7ec      	b.n	800394e <USART_GetITStatus+0x12>

08003974 <USART_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8003974:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x10;
 8003976:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8003978:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 800397a:	6203      	str	r3, [r0, #32]
}
 800397c:	4770      	bx	lr
 800397e:	46c0      	nop			; (mov r8, r8)

08003980 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8003980:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8003982:	2480      	movs	r4, #128	; 0x80
 8003984:	0124      	lsls	r4, r4, #4
 8003986:	0020      	movs	r0, r4
 8003988:	2101      	movs	r1, #1
 800398a:	f7fe f995 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800398e:	2100      	movs	r1, #0
 8003990:	0020      	movs	r0, r4
 8003992:	f7fe f991 	bl	8001cb8 <RCC_APB1PeriphResetCmd>
}
 8003996:	bd10      	pop	{r4, pc}

08003998 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8003998:	4a03      	ldr	r2, [pc, #12]	; (80039a8 <WWDG_SetPrescaler+0x10>)
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <WWDG_SetPrescaler+0x14>)
 800399c:	6853      	ldr	r3, [r2, #4]
 800399e:	400b      	ands	r3, r1
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80039a0:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80039a2:	6050      	str	r0, [r2, #4]
}
 80039a4:	4770      	bx	lr
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	40002c00 	.word	0x40002c00
 80039ac:	fffffe7f 	.word	0xfffffe7f

080039b0 <WWDG_SetWindowValue>:
  *          This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 80039b0:	2300      	movs	r3, #0

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80039b2:	217f      	movs	r1, #127	; 0x7f
{
 80039b4:	b082      	sub	sp, #8
  tmpreg = WWDG->CFR & CFR_W_MASK;
 80039b6:	4a06      	ldr	r2, [pc, #24]	; (80039d0 <WWDG_SetWindowValue+0x20>)
  __IO uint32_t tmpreg = 0;
 80039b8:	9301      	str	r3, [sp, #4]
  tmpreg = WWDG->CFR & CFR_W_MASK;
 80039ba:	6853      	ldr	r3, [r2, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 80039bc:	4008      	ands	r0, r1
  tmpreg = WWDG->CFR & CFR_W_MASK;
 80039be:	438b      	bics	r3, r1
 80039c0:	9301      	str	r3, [sp, #4]
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 80039c2:	9b01      	ldr	r3, [sp, #4]
 80039c4:	4318      	orrs	r0, r3
 80039c6:	9001      	str	r0, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 80039c8:	9b01      	ldr	r3, [sp, #4]
 80039ca:	6053      	str	r3, [r2, #4]
}
 80039cc:	b002      	add	sp, #8
 80039ce:	4770      	bx	lr
 80039d0:	40002c00 	.word	0x40002c00

080039d4 <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  WWDG->CFR |= WWDG_CFR_EWI;
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	4a03      	ldr	r2, [pc, #12]	; (80039e4 <WWDG_EnableIT+0x10>)
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	6851      	ldr	r1, [r2, #4]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6053      	str	r3, [r2, #4]
}
 80039e0:	4770      	bx	lr
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	40002c00 	.word	0x40002c00

080039e8 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 80039e8:	237f      	movs	r3, #127	; 0x7f
 80039ea:	4018      	ands	r0, r3
 80039ec:	4b01      	ldr	r3, [pc, #4]	; (80039f4 <WWDG_SetCounter+0xc>)
 80039ee:	6018      	str	r0, [r3, #0]
}
 80039f0:	4770      	bx	lr
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	40002c00 	.word	0x40002c00

080039f8 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	4318      	orrs	r0, r3
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <WWDG_Enable+0xc>)
 80039fe:	6018      	str	r0, [r3, #0]
}
 8003a00:	4770      	bx	lr
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40002c00 	.word	0x40002c00

08003a08 <WWDG_GetFlagStatus>:
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <WWDG_GetFlagStatus+0xc>)
 8003a0a:	6898      	ldr	r0, [r3, #8]
 8003a0c:	1e43      	subs	r3, r0, #1
 8003a0e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8003a10:	b2c0      	uxtb	r0, r0
}
 8003a12:	4770      	bx	lr
 8003a14:	40002c00 	.word	0x40002c00

08003a18 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <WWDG_ClearFlag+0x8>)
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	4770      	bx	lr
 8003a20:	40002c00 	.word	0x40002c00

08003a24 <NMI_Handler>:
 8003a24:	4770      	bx	lr

08003a26 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003a26:	e7fe      	b.n	8003a26 <HardFault_Handler>

08003a28 <SVC_Handler>:
 8003a28:	4770      	bx	lr

08003a2a <PendSV_Handler>:
 8003a2a:	4770      	bx	lr

08003a2c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
}
 8003a2c:	4770      	bx	lr
	...

08003a30 <u_do_tx>:
*              and sends it to the hardware. Provides common code for first
*              byte transmission (before transmit interrupt is enabled) and
*              successive byte transmission (from transmit interrupt).
*******************************************************************************/
static void u_do_tx (uint8_t chan)
{
 8003a30:	b570      	push	{r4, r5, r6, lr}
    USART_TypeDef* tmp_USARTx;

    switch(chan)
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d01c      	beq.n	8003a70 <u_do_tx+0x40>
 8003a36:	2801      	cmp	r0, #1
 8003a38:	d119      	bne.n	8003a6e <u_do_tx+0x3e>
    {
        case 0:
            tmp_USARTx = USART1;
            break;
        case 1:
            tmp_USARTx = USART2;
 8003a3a:	4c0e      	ldr	r4, [pc, #56]	; (8003a74 <u_do_tx+0x44>)
        default:
	   return;
            break;
    }

    uart_chan[chan].tx_count--;      // Decrement tx buffer byte count
 8003a3c:	221c      	movs	r2, #28
 8003a3e:	0013      	movs	r3, r2
 8003a40:	4343      	muls	r3, r0
 8003a42:	4d0d      	ldr	r5, [pc, #52]	; (8003a78 <u_do_tx+0x48>)
 8003a44:	18eb      	adds	r3, r5, r3
 8003a46:	8a19      	ldrh	r1, [r3, #16]
    uart_chan[chan].tx_out++;        // Increment index
    if ((uart_chan[chan].tx_out) >= (uart_chan[chan].tx_size))
 8003a48:	8a5e      	ldrh	r6, [r3, #18]
    uart_chan[chan].tx_count--;      // Decrement tx buffer byte count
 8003a4a:	3901      	subs	r1, #1
 8003a4c:	8219      	strh	r1, [r3, #16]
    uart_chan[chan].tx_out++;        // Increment index
 8003a4e:	89d9      	ldrh	r1, [r3, #14]
 8003a50:	3101      	adds	r1, #1
 8003a52:	b289      	uxth	r1, r1
 8003a54:	81d9      	strh	r1, [r3, #14]
    if ((uart_chan[chan].tx_out) >= (uart_chan[chan].tx_size))
 8003a56:	428e      	cmp	r6, r1
 8003a58:	d801      	bhi.n	8003a5e <u_do_tx+0x2e>
    {
       uart_chan[chan].tx_out = 0; // Wrap index
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	81d9      	strh	r1, [r3, #14]
    }

    // Write to hardware transmit register
    USART_SendData(tmp_USARTx,uart_chan[chan].tx_buf[uart_chan[chan].tx_out]);
 8003a5e:	4342      	muls	r2, r0
 8003a60:	18aa      	adds	r2, r5, r2
 8003a62:	89d3      	ldrh	r3, [r2, #14]
 8003a64:	6952      	ldr	r2, [r2, #20]
 8003a66:	0020      	movs	r0, r4
 8003a68:	5cd1      	ldrb	r1, [r2, r3]
 8003a6a:	f7ff fe59 	bl	8003720 <USART_SendData>

    //if(chan == UART_3G_CHANNEL)
        //DEBUG_PRINT1( DEBUG_MEDIUM, "%c\r\n", uart_chan[chan].tx_buf[uart_chan[chan].tx_out]);
}
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
            tmp_USARTx = USART1;
 8003a70:	4c02      	ldr	r4, [pc, #8]	; (8003a7c <u_do_tx+0x4c>)
 8003a72:	e7e3      	b.n	8003a3c <u_do_tx+0xc>
 8003a74:	40004400 	.word	0x40004400
 8003a78:	20000448 	.word	0x20000448
 8003a7c:	40013800 	.word	0x40013800

08003a80 <Uart_InitIO>:
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	0004      	movs	r4, r0
 8003a84:	b088      	sub	sp, #32
    switch(chan)
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d003      	beq.n	8003a92 <Uart_InitIO+0x12>
 8003a8a:	2801      	cmp	r0, #1
 8003a8c:	d034      	beq.n	8003af8 <Uart_InitIO+0x78>
}
 8003a8e:	b008      	add	sp, #32
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003a92:	2380      	movs	r3, #128	; 0x80
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003a94:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	9300      	str	r3, [sp, #0]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003a9a:	2602      	movs	r6, #2
 8003a9c:	466b      	mov	r3, sp
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003a9e:	4669      	mov	r1, sp
 8003aa0:	05c0      	lsls	r0, r0, #23
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003aa2:	711e      	strb	r6, [r3, #4]
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003aa4:	f7fd fb50 	bl	8001148 <GPIO_Init>
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003aa8:	2380      	movs	r3, #128	; 0x80
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003aaa:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003aac:	009b      	lsls	r3, r3, #2
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003aae:	2501      	movs	r5, #1
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003ab0:	9300      	str	r3, [sp, #0]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003ab2:	466b      	mov	r3, sp
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003ab4:	4669      	mov	r1, sp
 8003ab6:	05c0      	lsls	r0, r0, #23
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003ab8:	715d      	strb	r5, [r3, #5]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003aba:	711e      	strb	r6, [r3, #4]
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003abc:	f7fd fb44 	bl	8001148 <GPIO_Init>
		USART_InitStructure.USART_BaudRate = 115200;
 8003ac0:	23e1      	movs	r3, #225	; 0xe1
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	9302      	str	r3, [sp, #8]
		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003ac6:	230c      	movs	r3, #12
		USART_Init( USART1, &USART_InitStructure );
 8003ac8:	a902      	add	r1, sp, #8
 8003aca:	4823      	ldr	r0, [pc, #140]	; (8003b58 <Uart_InitIO+0xd8>)
		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003acc:	9306      	str	r3, [sp, #24]
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003ace:	9403      	str	r4, [sp, #12]
		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003ad0:	9404      	str	r4, [sp, #16]
		USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003ad2:	9405      	str	r4, [sp, #20]
		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003ad4:	9407      	str	r4, [sp, #28]
		USART_Init( USART1, &USART_InitStructure );
 8003ad6:	f7ff fd03 	bl	80034e0 <USART_Init>
		USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003ada:	002a      	movs	r2, r5
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <Uart_InitIO+0xdc>)
 8003ade:	481e      	ldr	r0, [pc, #120]	; (8003b58 <Uart_InitIO+0xd8>)
 8003ae0:	f7ff fef8 	bl	80038d4 <USART_ITConfig>
		USART_ITConfig(USART1, USART_IT_TC, DISABLE);
 8003ae4:	491e      	ldr	r1, [pc, #120]	; (8003b60 <Uart_InitIO+0xe0>)
 8003ae6:	481c      	ldr	r0, [pc, #112]	; (8003b58 <Uart_InitIO+0xd8>)
 8003ae8:	0022      	movs	r2, r4
 8003aea:	f7ff fef3 	bl	80038d4 <USART_ITConfig>
		USART_Cmd(USART1, ENABLE);
 8003aee:	0029      	movs	r1, r5
 8003af0:	4819      	ldr	r0, [pc, #100]	; (8003b58 <Uart_InitIO+0xd8>)
		USART_Cmd(USART2, ENABLE);
 8003af2:	f7ff fd67 	bl	80035c4 <USART_Cmd>
}
 8003af6:	e7ca      	b.n	8003a8e <Uart_InitIO+0xe>
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8003af8:	2308      	movs	r3, #8
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003afa:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003afc:	2502      	movs	r5, #2
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8003afe:	9300      	str	r3, [sp, #0]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003b00:	466b      	mov	r3, sp
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003b02:	4669      	mov	r1, sp
 8003b04:	05c0      	lsls	r0, r0, #23
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003b06:	711d      	strb	r5, [r3, #4]
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003b08:	f7fd fb1e 	bl	8001148 <GPIO_Init>
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8003b0c:	2304      	movs	r3, #4
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003b0e:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8003b10:	9300      	str	r3, [sp, #0]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003b12:	466b      	mov	r3, sp
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003b14:	4669      	mov	r1, sp
 8003b16:	05c0      	lsls	r0, r0, #23
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003b18:	711d      	strb	r5, [r3, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003b1a:	715c      	strb	r4, [r3, #5]
		GPIO_Init( GPIOA, &GPIO_InitStructure );
 8003b1c:	f7fd fb14 	bl	8001148 <GPIO_Init>
		USART_InitStructure.USART_BaudRate = 9600;
 8003b20:	2396      	movs	r3, #150	; 0x96
 8003b22:	019b      	lsls	r3, r3, #6
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003b24:	2500      	movs	r5, #0
		USART_InitStructure.USART_BaudRate = 9600;
 8003b26:	9302      	str	r3, [sp, #8]
		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003b28:	230c      	movs	r3, #12
		USART_Init( USART2, &USART_InitStructure );
 8003b2a:	a902      	add	r1, sp, #8
 8003b2c:	480d      	ldr	r0, [pc, #52]	; (8003b64 <Uart_InitIO+0xe4>)
		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003b2e:	9306      	str	r3, [sp, #24]
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003b30:	9503      	str	r5, [sp, #12]
		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003b32:	9504      	str	r5, [sp, #16]
		USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003b34:	9505      	str	r5, [sp, #20]
		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003b36:	9507      	str	r5, [sp, #28]
		USART_Init( USART2, &USART_InitStructure );
 8003b38:	f7ff fcd2 	bl	80034e0 <USART_Init>
		USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8003b3c:	0022      	movs	r2, r4
 8003b3e:	4907      	ldr	r1, [pc, #28]	; (8003b5c <Uart_InitIO+0xdc>)
 8003b40:	4808      	ldr	r0, [pc, #32]	; (8003b64 <Uart_InitIO+0xe4>)
 8003b42:	f7ff fec7 	bl	80038d4 <USART_ITConfig>
		USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 8003b46:	4906      	ldr	r1, [pc, #24]	; (8003b60 <Uart_InitIO+0xe0>)
 8003b48:	4806      	ldr	r0, [pc, #24]	; (8003b64 <Uart_InitIO+0xe4>)
 8003b4a:	002a      	movs	r2, r5
 8003b4c:	f7ff fec2 	bl	80038d4 <USART_ITConfig>
		USART_Cmd(USART2, ENABLE);
 8003b50:	0021      	movs	r1, r4
 8003b52:	4804      	ldr	r0, [pc, #16]	; (8003b64 <Uart_InitIO+0xe4>)
 8003b54:	e7cd      	b.n	8003af2 <Uart_InitIO+0x72>
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	00050105 	.word	0x00050105
 8003b60:	00060106 	.word	0x00060106
 8003b64:	40004400 	.word	0x40004400

08003b68 <UART_ReConfig>:
}
 8003b68:	4770      	bx	lr

08003b6a <Uart_Initialize>:
{
 8003b6a:	b510      	push	{r4, lr}
   if (chan >= UART_NUM_CHANNELS) return;  // Invalid channel!
 8003b6c:	2801      	cmp	r0, #1
 8003b6e:	d818      	bhi.n	8003ba2 <Uart_Initialize+0x38>
   uart_chan[chan].rx_count = 0;    // Clear rx byte counter
 8003b70:	241c      	movs	r4, #28
 8003b72:	2200      	movs	r2, #0
 8003b74:	4344      	muls	r4, r0
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <Uart_Initialize+0x4a>)
 8003b78:	1919      	adds	r1, r3, r4
 8003b7a:	808a      	strh	r2, [r1, #4]
   uart_chan[chan].rx_out = 0;      // Clear rx buffer output before read index
 8003b7c:	804a      	strh	r2, [r1, #2]
   uart_chan[chan].tx_count = 0;    // Clear tx byte counter
 8003b7e:	820a      	strh	r2, [r1, #16]
   uart_chan[chan].tx_in = 0;       // Clear tx buffer input before write index
 8003b80:	818a      	strh	r2, [r1, #12]
   uart_chan[chan].tx_out = 0;      // Clear tx buffer output before read index
 8003b82:	81ca      	strh	r2, [r1, #14]
   uart_chan[chan].tx_progress = false;   // Clear tx in progress flag
 8003b84:	760a      	strb	r2, [r1, #24]
 8003b86:	2180      	movs	r1, #128	; 0x80
   uart_chan[chan].rx_in = 0;       // Clear rx buffer input before write index
 8003b88:	52e2      	strh	r2, [r4, r3]
 8003b8a:	0049      	lsls	r1, r1, #1
   switch (chan)
 8003b8c:	2801      	cmp	r0, #1
 8003b8e:	d009      	beq.n	8003ba4 <Uart_Initialize+0x3a>
         uart_chan[chan].rx_buf = uart0_rx_buf;
 8003b90:	4809      	ldr	r0, [pc, #36]	; (8003bb8 <Uart_Initialize+0x4e>)
         uart_chan[chan].rx_size = UART0_RX_BUF_SIZE;
 8003b92:	80d9      	strh	r1, [r3, #6]
         uart_chan[chan].rx_buf = uart0_rx_buf;
 8003b94:	6098      	str	r0, [r3, #8]
         uart_chan[chan].tx_buf = uart0_tx_buf;
 8003b96:	4809      	ldr	r0, [pc, #36]	; (8003bbc <Uart_Initialize+0x52>)
         uart_chan[chan].tx_size = UART0_TX_BUF_SIZE;
 8003b98:	8259      	strh	r1, [r3, #18]
         uart_chan[chan].tx_buf = uart0_tx_buf;
 8003b9a:	6158      	str	r0, [r3, #20]
         Uart_InitIO(0);
 8003b9c:	0010      	movs	r0, r2
         Uart_InitIO(1);
 8003b9e:	f7ff ff6f 	bl	8003a80 <Uart_InitIO>
}
 8003ba2:	bd10      	pop	{r4, pc}
         uart_chan[chan].rx_buf = uart1_rx_buf;
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <Uart_Initialize+0x56>)
         uart_chan[chan].rx_size = UART1_RX_BUF_SIZE;
 8003ba6:	8459      	strh	r1, [r3, #34]	; 0x22
         uart_chan[chan].rx_buf = uart1_rx_buf;
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
         uart_chan[chan].tx_buf = uart1_tx_buf;
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <Uart_Initialize+0x5a>)
         uart_chan[chan].tx_size = UART1_TX_BUF_SIZE;
 8003bac:	85d9      	strh	r1, [r3, #46]	; 0x2e
         uart_chan[chan].tx_buf = uart1_tx_buf;
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
 8003bb0:	e7f5      	b.n	8003b9e <Uart_Initialize+0x34>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	20000448 	.word	0x20000448
 8003bb8:	20000044 	.word	0x20000044
 8003bbc:	20000144 	.word	0x20000144
 8003bc0:	20000244 	.word	0x20000244
 8003bc4:	20000344 	.word	0x20000344

08003bc8 <Uart_Get_Char>:
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	0006      	movs	r6, r0
        return false; // Invalid channel!
 8003bcc:	2000      	movs	r0, #0
    if (chan >= UART_NUM_CHANNELS) 
 8003bce:	2e01      	cmp	r6, #1
 8003bd0:	d81a      	bhi.n	8003c08 <Uart_Get_Char+0x40>
    if (!ptr) 
 8003bd2:	4281      	cmp	r1, r0
 8003bd4:	d018      	beq.n	8003c08 <Uart_Get_Char+0x40>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd6:	b672      	cpsid	i
    if(uart_chan[chan].rx_in != uart_chan[chan].rx_out)// Rx buffer not empty
 8003bd8:	251c      	movs	r5, #28
 8003bda:	4375      	muls	r5, r6
 8003bdc:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <Uart_Get_Char+0x44>)
 8003bde:	1954      	adds	r4, r2, r5
 8003be0:	8863      	ldrh	r3, [r4, #2]
 8003be2:	5aad      	ldrh	r5, [r5, r2]
 8003be4:	429d      	cmp	r5, r3
 8003be6:	d00e      	beq.n	8003c06 <Uart_Get_Char+0x3e>
        uart_chan[chan].rx_out++;     // Increment rx buffe output index
 8003be8:	3301      	adds	r3, #1
        if ((uart_chan[chan].rx_out) >= (uart_chan[chan].rx_size))
 8003bea:	88e5      	ldrh	r5, [r4, #6]
        uart_chan[chan].rx_out++;     // Increment rx buffe output index
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	8063      	strh	r3, [r4, #2]
        if ((uart_chan[chan].rx_out) >= (uart_chan[chan].rx_size))
 8003bf0:	429d      	cmp	r5, r3
 8003bf2:	d800      	bhi.n	8003bf6 <Uart_Get_Char+0x2e>
            uart_chan[chan].rx_out = 0; // Wrap index
 8003bf4:	8060      	strh	r0, [r4, #2]
        *ptr = uart_chan[chan].rx_buf[uart_chan[chan].rx_out]; // Store read data
 8003bf6:	201c      	movs	r0, #28
 8003bf8:	4346      	muls	r6, r0
 8003bfa:	1992      	adds	r2, r2, r6
 8003bfc:	8853      	ldrh	r3, [r2, #2]
 8003bfe:	6892      	ldr	r2, [r2, #8]
        ret = true;
 8003c00:	381b      	subs	r0, #27
        *ptr = uart_chan[chan].rx_buf[uart_chan[chan].rx_out]; // Store read data
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c06:	b662      	cpsie	i
}
 8003c08:	bd70      	pop	{r4, r5, r6, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	20000448 	.word	0x20000448

08003c10 <Uart_Put_Char>:
{
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	0004      	movs	r4, r0
   	return false; // Invalid channel!
 8003c14:	2600      	movs	r6, #0
   if (chan >= UART_NUM_CHANNELS) 
 8003c16:	2801      	cmp	r0, #1
 8003c18:	d829      	bhi.n	8003c6e <Uart_Put_Char+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003c1a:	b672      	cpsid	i
   if (uart_chan[chan].tx_count < (uart_chan[chan].tx_size))
 8003c1c:	231c      	movs	r3, #28
 8003c1e:	4363      	muls	r3, r4
 8003c20:	4817      	ldr	r0, [pc, #92]	; (8003c80 <Uart_Put_Char+0x70>)
 8003c22:	18c3      	adds	r3, r0, r3
 8003c24:	8a1a      	ldrh	r2, [r3, #16]
 8003c26:	8a5d      	ldrh	r5, [r3, #18]
 8003c28:	42aa      	cmp	r2, r5
 8003c2a:	d20e      	bcs.n	8003c4a <Uart_Put_Char+0x3a>
      uart_chan[chan].tx_count++;   // Increment tx buffer byte count
 8003c2c:	3201      	adds	r2, #1
 8003c2e:	821a      	strh	r2, [r3, #16]
      uart_chan[chan].tx_in++;      // Increment tx buffer input index
 8003c30:	899a      	ldrh	r2, [r3, #12]
 8003c32:	3201      	adds	r2, #1
 8003c34:	b292      	uxth	r2, r2
      if ((uart_chan[chan].tx_in) >= (uart_chan[chan].tx_size))
 8003c36:	4295      	cmp	r5, r2
 8003c38:	d91b      	bls.n	8003c72 <Uart_Put_Char+0x62>
      uart_chan[chan].tx_in++;      // Increment tx buffer input index
 8003c3a:	819a      	strh	r2, [r3, #12]
      uart_chan[chan].tx_buf[uart_chan[chan].tx_in] = data; // Copy byte to tx buffer
 8003c3c:	231c      	movs	r3, #28
      ret = true;
 8003c3e:	2601      	movs	r6, #1
      uart_chan[chan].tx_buf[uart_chan[chan].tx_in] = data; // Copy byte to tx buffer
 8003c40:	4363      	muls	r3, r4
 8003c42:	18c3      	adds	r3, r0, r3
 8003c44:	899a      	ldrh	r2, [r3, #12]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	5499      	strb	r1, [r3, r2]
   if (false == uart_chan[chan].tx_progress) // Send first byte. Interrupts do the rest.
 8003c4a:	251c      	movs	r5, #28
 8003c4c:	4365      	muls	r5, r4
 8003c4e:	1945      	adds	r5, r0, r5
 8003c50:	7e2b      	ldrb	r3, [r5, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <Uart_Put_Char+0x5c>
      u_do_tx(chan);          // Send to hardware
 8003c56:	0020      	movs	r0, r4
 8003c58:	f7ff feea 	bl	8003a30 <u_do_tx>
      uart_chan[chan].tx_progress = true;    // Flag tx in progress
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	762a      	strb	r2, [r5, #24]
      switch(chan)
 8003c60:	4294      	cmp	r4, r2
 8003c62:	d008      	beq.n	8003c76 <Uart_Put_Char+0x66>
            USART_ITConfig(USART1, USART_IT_TC, ENABLE);
 8003c64:	4907      	ldr	r1, [pc, #28]	; (8003c84 <Uart_Put_Char+0x74>)
 8003c66:	4808      	ldr	r0, [pc, #32]	; (8003c88 <Uart_Put_Char+0x78>)
            USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8003c68:	f7ff fe34 	bl	80038d4 <USART_ITConfig>
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6c:	b662      	cpsie	i
}
 8003c6e:	0030      	movs	r0, r6
 8003c70:	bd70      	pop	{r4, r5, r6, pc}
         uart_chan[chan].tx_in = 0; // Wrap index
 8003c72:	819e      	strh	r6, [r3, #12]
 8003c74:	e7e2      	b.n	8003c3c <Uart_Put_Char+0x2c>
            USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8003c76:	0022      	movs	r2, r4
 8003c78:	4902      	ldr	r1, [pc, #8]	; (8003c84 <Uart_Put_Char+0x74>)
 8003c7a:	4804      	ldr	r0, [pc, #16]	; (8003c8c <Uart_Put_Char+0x7c>)
 8003c7c:	e7f4      	b.n	8003c68 <Uart_Put_Char+0x58>
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	20000448 	.word	0x20000448
 8003c84:	00060106 	.word	0x00060106
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40004400 	.word	0x40004400

08003c90 <UART_TX_ISR>:
*  Parameters: Channel
*     Returns: None
* Description: UART transmit Interrupt Service Routine
*******************************************************************************/
void UART_TX_ISR(uint8_t chan)      
{
 8003c90:	b510      	push	{r4, lr}
    USART_TypeDef* tmp_USARTx;

    switch(chan)
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d00d      	beq.n	8003cb2 <UART_TX_ISR+0x22>
 8003c96:	2801      	cmp	r0, #1
 8003c98:	d10a      	bne.n	8003cb0 <UART_TX_ISR+0x20>
    {
        case 0:
            tmp_USARTx = USART1;
            break;
        case 1:
            tmp_USARTx = USART2;
 8003c9a:	4c0a      	ldr	r4, [pc, #40]	; (8003cc4 <UART_TX_ISR+0x34>)
        default:
	   return;
            break;
    }

    if (uart_chan[chan].tx_in != uart_chan[chan].tx_out) // Any bytes to send?
 8003c9c:	221c      	movs	r2, #28
 8003c9e:	4342      	muls	r2, r0
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <UART_TX_ISR+0x38>)
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	8999      	ldrh	r1, [r3, #12]
 8003ca6:	89da      	ldrh	r2, [r3, #14]
 8003ca8:	4291      	cmp	r1, r2
 8003caa:	d004      	beq.n	8003cb6 <UART_TX_ISR+0x26>
    {
        u_do_tx(chan);       // Send to hardware
 8003cac:	f7ff fec0 	bl	8003a30 <u_do_tx>
    else
    {
        uart_chan[chan].tx_progress = false;     // Disable transmit
        USART_ITConfig(tmp_USARTx, USART_IT_TC, DISABLE);
    }
}
 8003cb0:	bd10      	pop	{r4, pc}
            tmp_USARTx = USART1;
 8003cb2:	4c06      	ldr	r4, [pc, #24]	; (8003ccc <UART_TX_ISR+0x3c>)
 8003cb4:	e7f2      	b.n	8003c9c <UART_TX_ISR+0xc>
        uart_chan[chan].tx_progress = false;     // Disable transmit
 8003cb6:	2200      	movs	r2, #0
        USART_ITConfig(tmp_USARTx, USART_IT_TC, DISABLE);
 8003cb8:	4905      	ldr	r1, [pc, #20]	; (8003cd0 <UART_TX_ISR+0x40>)
        uart_chan[chan].tx_progress = false;     // Disable transmit
 8003cba:	761a      	strb	r2, [r3, #24]
        USART_ITConfig(tmp_USARTx, USART_IT_TC, DISABLE);
 8003cbc:	0020      	movs	r0, r4
 8003cbe:	f7ff fe09 	bl	80038d4 <USART_ITConfig>
 8003cc2:	e7f5      	b.n	8003cb0 <UART_TX_ISR+0x20>
 8003cc4:	40004400 	.word	0x40004400
 8003cc8:	20000448 	.word	0x20000448
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	00060106 	.word	0x00060106

08003cd4 <UART_RX_ISR>:
*  Parameters: Channel
*     Returns: None
* Description: UART recieve Interrupt Service Routine
*******************************************************************************/
void UART_RX_ISR(uint8_t chan)
{
 8003cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t data;
    volatile uint8_t err;
    USART_TypeDef* tmp_USARTx;

    if (chan >= UART_NUM_CHANNELS)
 8003cd6:	2801      	cmp	r0, #1
 8003cd8:	d823      	bhi.n	8003d22 <UART_RX_ISR+0x4e>
        return;  // Invalid channel!

    switch(chan)
 8003cda:	d023      	beq.n	8003d24 <UART_RX_ISR+0x50>
    {
        case 0:
            tmp_USARTx = USART1;
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <UART_RX_ISR+0x54>)
            break;
        default:
            break;
    }

    err = tmp_USARTx->ISR;
 8003cde:	4669      	mov	r1, sp
 8003ce0:	69da      	ldr	r2, [r3, #28]

    /* Read one byte from the receive data register */
    data = (uint16_t)(tmp_USARTx->RDR & (uint16_t)0x01FF);
 8003ce2:	1d8c      	adds	r4, r1, #6
    err = tmp_USARTx->ISR;
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	71ca      	strb	r2, [r1, #7]
    data = (uint16_t)(tmp_USARTx->RDR & (uint16_t)0x01FF);
 8003ce8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	7023      	strb	r3, [r4, #0]

    if(0==((UART_ERR_FRAME | UART_ERR_PARITY)&err))
 8003cee:	2303      	movs	r3, #3
 8003cf0:	79ce      	ldrb	r6, [r1, #7]
 8003cf2:	401e      	ands	r6, r3
 8003cf4:	d115      	bne.n	8003d22 <UART_RX_ISR+0x4e>
    {
        //uart_chan[chan].rx_count++;
        uart_chan[chan].rx_in++;
 8003cf6:	221c      	movs	r2, #28
 8003cf8:	0015      	movs	r5, r2
 8003cfa:	4345      	muls	r5, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <UART_RX_ISR+0x58>)
 8003cfe:	5ae9      	ldrh	r1, [r5, r3]
        if ((uart_chan[chan].rx_in) >= (uart_chan[chan].rx_size))
 8003d00:	195f      	adds	r7, r3, r5
        uart_chan[chan].rx_in++;
 8003d02:	3101      	adds	r1, #1
 8003d04:	b289      	uxth	r1, r1
 8003d06:	52e9      	strh	r1, [r5, r3]
        if ((uart_chan[chan].rx_in) >= (uart_chan[chan].rx_size))
 8003d08:	88ff      	ldrh	r7, [r7, #6]
 8003d0a:	428f      	cmp	r7, r1
 8003d0c:	d800      	bhi.n	8003d10 <UART_RX_ISR+0x3c>
        {
            uart_chan[chan].rx_in = 0; // Wrap index
 8003d0e:	52ee      	strh	r6, [r5, r3]
        }
        if(uart_chan[chan].rx_in != uart_chan[chan].rx_out)
 8003d10:	4350      	muls	r0, r2
 8003d12:	5a1a      	ldrh	r2, [r3, r0]
 8003d14:	181b      	adds	r3, r3, r0
 8003d16:	8859      	ldrh	r1, [r3, #2]
 8003d18:	4291      	cmp	r1, r2
 8003d1a:	d002      	beq.n	8003d22 <UART_RX_ISR+0x4e>
        {
            uart_chan[chan].rx_buf[uart_chan[chan].rx_in] = data; // Copy data to receive buffer
 8003d1c:	7821      	ldrb	r1, [r4, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	5499      	strb	r1, [r3, r2]
    {

    }
    //if(chan == UART_KLINE_CHANNEL)
        //DEBUG_PRINT1( DEBUG_MEDIUM, "%c\r\n", uart_chan[chan].rx_buf[uart_chan[chan].rx_in]);
}
 8003d22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            tmp_USARTx = USART2;
 8003d24:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <UART_RX_ISR+0x5c>)
 8003d26:	e7da      	b.n	8003cde <UART_RX_ISR+0xa>
 8003d28:	40013800 	.word	0x40013800
 8003d2c:	20000448 	.word	0x20000448
 8003d30:	40004400 	.word	0x40004400

08003d34 <UART_ERR_ISR>:
void UART_ERR_ISR(uint8_t chan)
{

    USART_TypeDef* tmp_USARTx;

    switch(chan)
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d00a      	beq.n	8003d4e <UART_ERR_ISR+0x1a>
 8003d38:	2801      	cmp	r0, #1
 8003d3a:	d107      	bne.n	8003d4c <UART_ERR_ISR+0x18>
    {
        case 0:
            tmp_USARTx = USART1;
            break;
        case 1:
            tmp_USARTx = USART2;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <UART_ERR_ISR+0x20>)
	    return;
            break;
    }

    //clear error
    err = tmp_USARTx->ISR;
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	4905      	ldr	r1, [pc, #20]	; (8003d58 <UART_ERR_ISR+0x24>)
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	700a      	strb	r2, [r1, #0]
    data = (uint16_t)(tmp_USARTx->RDR & (uint16_t)0x01FF);
 8003d46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	704b      	strb	r3, [r1, #1]
}
 8003d4c:	4770      	bx	lr
            tmp_USARTx = USART1;
 8003d4e:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <UART_ERR_ISR+0x28>)
 8003d50:	e7f5      	b.n	8003d3e <UART_ERR_ISR+0xa>
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	40004400 	.word	0x40004400
 8003d58:	20000444 	.word	0x20000444
 8003d5c:	40013800 	.word	0x40013800

08003d60 <UART_Transmit>:
*               transmit is successfully sent/buffered. If not, task should sleep to allow
*               Tx buffer to allow room for byte to be buffered.
*              Tx Buffer size should be configured accordingly
*******************************************************************************/
extern uint8_t UART_Transmit(uint8_t channel, const uint8_t* tx_buf, uint8_t bytes)
{
 8003d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d62:	0007      	movs	r7, r0
 8003d64:	000e      	movs	r6, r1
    uint8_t ret = 0;
    int i;

    for (i=0; i < bytes; i++)
 8003d66:	000d      	movs	r5, r1
    uint8_t ret = 0;
 8003d68:	2400      	movs	r4, #0
{
 8003d6a:	9201      	str	r2, [sp, #4]
    for (i=0; i < bytes; i++)
 8003d6c:	9a01      	ldr	r2, [sp, #4]
 8003d6e:	1bab      	subs	r3, r5, r6
 8003d70:	429a      	cmp	r2, r3
 8003d72:	dc01      	bgt.n	8003d78 <UART_Transmit+0x18>
            ret++;
        }
    }

    return (ret);
}
 8003d74:	0020      	movs	r0, r4
 8003d76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if ( Uart_Put_Char(channel, *(tx_buf + i)) )
 8003d78:	7829      	ldrb	r1, [r5, #0]
 8003d7a:	0038      	movs	r0, r7
 8003d7c:	f7ff ff48 	bl	8003c10 <Uart_Put_Char>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d001      	beq.n	8003d88 <UART_Transmit+0x28>
            ret++;
 8003d84:	3401      	adds	r4, #1
 8003d86:	b2e4      	uxtb	r4, r4
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7ef      	b.n	8003d6c <UART_Transmit+0xc>

08003d8c <UART_Rx_Empty>:
*     Returns: Nothing
* Description: Reconfigures UART channel's pins to be I/O input (disables UART function)
*******************************************************************************/
bool UART_Rx_Empty (uint8_t chan)
{
    return ((0 ==uart_chan[chan].rx_count)&& (uart_chan[chan].rx_in == uart_chan[chan].rx_out));
 8003d8c:	231c      	movs	r3, #28
 8003d8e:	4343      	muls	r3, r0
 8003d90:	2000      	movs	r0, #0
 8003d92:	4906      	ldr	r1, [pc, #24]	; (8003dac <UART_Rx_Empty+0x20>)
{
 8003d94:	b510      	push	{r4, lr}
    return ((0 ==uart_chan[chan].rx_count)&& (uart_chan[chan].rx_in == uart_chan[chan].rx_out));
 8003d96:	18ca      	adds	r2, r1, r3
 8003d98:	8894      	ldrh	r4, [r2, #4]
 8003d9a:	4284      	cmp	r4, r0
 8003d9c:	d105      	bne.n	8003daa <UART_Rx_Empty+0x1e>
 8003d9e:	5a58      	ldrh	r0, [r3, r1]
 8003da0:	8853      	ldrh	r3, [r2, #2]
 8003da2:	1ac0      	subs	r0, r0, r3
 8003da4:	4243      	negs	r3, r0
 8003da6:	4158      	adcs	r0, r3
 8003da8:	b2c0      	uxtb	r0, r0
}
 8003daa:	bd10      	pop	{r4, pc}
 8003dac:	20000448 	.word	0x20000448

08003db0 <UART_Reset_Buf>:
*  Returns: None
*  Description: Intialize the specified uart device
*******************************************************************************/
void UART_Reset_Buf(uint8_t chan)
{
    if (chan >= UART_NUM_CHANNELS)
 8003db0:	2801      	cmp	r0, #1
 8003db2:	d80b      	bhi.n	8003dcc <UART_Reset_Buf+0x1c>
        return;  // Invalid channel!

    if (NULL != &uart_chan[chan]) 
    {
        uart_chan[chan].rx_count = 0; // Clear rx byte counter
 8003db4:	231c      	movs	r3, #28
 8003db6:	4358      	muls	r0, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	4905      	ldr	r1, [pc, #20]	; (8003dd0 <UART_Reset_Buf+0x20>)
 8003dbc:	180a      	adds	r2, r1, r0
 8003dbe:	8093      	strh	r3, [r2, #4]
        uart_chan[chan].rx_in = 0;    // Increment before write index
 8003dc0:	5243      	strh	r3, [r0, r1]
        uart_chan[chan].rx_out = 0;   // Increment before read index
 8003dc2:	8053      	strh	r3, [r2, #2]

        uart_chan[chan].tx_count = 0; // Clear tx byte counter 
 8003dc4:	8213      	strh	r3, [r2, #16]
        uart_chan[chan].tx_in = 0;    // Clear tx buffer input before write index
 8003dc6:	8193      	strh	r3, [r2, #12]
        uart_chan[chan].tx_out = 0;   // Clear tx buffer output before read index
 8003dc8:	81d3      	strh	r3, [r2, #14]
        uart_chan[chan].tx_progress = false;   // Clear tx in progress flag
 8003dca:	7613      	strb	r3, [r2, #24]
    }
}
 8003dcc:	4770      	bx	lr
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000448 	.word	0x20000448

08003dd4 <__udivsi3>:
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	0843      	lsrs	r3, r0, #1
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	d374      	bcc.n	8003ec6 <__udivsi3+0xf2>
 8003ddc:	0903      	lsrs	r3, r0, #4
 8003dde:	428b      	cmp	r3, r1
 8003de0:	d35f      	bcc.n	8003ea2 <__udivsi3+0xce>
 8003de2:	0a03      	lsrs	r3, r0, #8
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d344      	bcc.n	8003e72 <__udivsi3+0x9e>
 8003de8:	0b03      	lsrs	r3, r0, #12
 8003dea:	428b      	cmp	r3, r1
 8003dec:	d328      	bcc.n	8003e40 <__udivsi3+0x6c>
 8003dee:	0c03      	lsrs	r3, r0, #16
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d30d      	bcc.n	8003e10 <__udivsi3+0x3c>
 8003df4:	22ff      	movs	r2, #255	; 0xff
 8003df6:	0209      	lsls	r1, r1, #8
 8003df8:	ba12      	rev	r2, r2
 8003dfa:	0c03      	lsrs	r3, r0, #16
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d302      	bcc.n	8003e06 <__udivsi3+0x32>
 8003e00:	1212      	asrs	r2, r2, #8
 8003e02:	0209      	lsls	r1, r1, #8
 8003e04:	d065      	beq.n	8003ed2 <__udivsi3+0xfe>
 8003e06:	0b03      	lsrs	r3, r0, #12
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d319      	bcc.n	8003e40 <__udivsi3+0x6c>
 8003e0c:	e000      	b.n	8003e10 <__udivsi3+0x3c>
 8003e0e:	0a09      	lsrs	r1, r1, #8
 8003e10:	0bc3      	lsrs	r3, r0, #15
 8003e12:	428b      	cmp	r3, r1
 8003e14:	d301      	bcc.n	8003e1a <__udivsi3+0x46>
 8003e16:	03cb      	lsls	r3, r1, #15
 8003e18:	1ac0      	subs	r0, r0, r3
 8003e1a:	4152      	adcs	r2, r2
 8003e1c:	0b83      	lsrs	r3, r0, #14
 8003e1e:	428b      	cmp	r3, r1
 8003e20:	d301      	bcc.n	8003e26 <__udivsi3+0x52>
 8003e22:	038b      	lsls	r3, r1, #14
 8003e24:	1ac0      	subs	r0, r0, r3
 8003e26:	4152      	adcs	r2, r2
 8003e28:	0b43      	lsrs	r3, r0, #13
 8003e2a:	428b      	cmp	r3, r1
 8003e2c:	d301      	bcc.n	8003e32 <__udivsi3+0x5e>
 8003e2e:	034b      	lsls	r3, r1, #13
 8003e30:	1ac0      	subs	r0, r0, r3
 8003e32:	4152      	adcs	r2, r2
 8003e34:	0b03      	lsrs	r3, r0, #12
 8003e36:	428b      	cmp	r3, r1
 8003e38:	d301      	bcc.n	8003e3e <__udivsi3+0x6a>
 8003e3a:	030b      	lsls	r3, r1, #12
 8003e3c:	1ac0      	subs	r0, r0, r3
 8003e3e:	4152      	adcs	r2, r2
 8003e40:	0ac3      	lsrs	r3, r0, #11
 8003e42:	428b      	cmp	r3, r1
 8003e44:	d301      	bcc.n	8003e4a <__udivsi3+0x76>
 8003e46:	02cb      	lsls	r3, r1, #11
 8003e48:	1ac0      	subs	r0, r0, r3
 8003e4a:	4152      	adcs	r2, r2
 8003e4c:	0a83      	lsrs	r3, r0, #10
 8003e4e:	428b      	cmp	r3, r1
 8003e50:	d301      	bcc.n	8003e56 <__udivsi3+0x82>
 8003e52:	028b      	lsls	r3, r1, #10
 8003e54:	1ac0      	subs	r0, r0, r3
 8003e56:	4152      	adcs	r2, r2
 8003e58:	0a43      	lsrs	r3, r0, #9
 8003e5a:	428b      	cmp	r3, r1
 8003e5c:	d301      	bcc.n	8003e62 <__udivsi3+0x8e>
 8003e5e:	024b      	lsls	r3, r1, #9
 8003e60:	1ac0      	subs	r0, r0, r3
 8003e62:	4152      	adcs	r2, r2
 8003e64:	0a03      	lsrs	r3, r0, #8
 8003e66:	428b      	cmp	r3, r1
 8003e68:	d301      	bcc.n	8003e6e <__udivsi3+0x9a>
 8003e6a:	020b      	lsls	r3, r1, #8
 8003e6c:	1ac0      	subs	r0, r0, r3
 8003e6e:	4152      	adcs	r2, r2
 8003e70:	d2cd      	bcs.n	8003e0e <__udivsi3+0x3a>
 8003e72:	09c3      	lsrs	r3, r0, #7
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d301      	bcc.n	8003e7c <__udivsi3+0xa8>
 8003e78:	01cb      	lsls	r3, r1, #7
 8003e7a:	1ac0      	subs	r0, r0, r3
 8003e7c:	4152      	adcs	r2, r2
 8003e7e:	0983      	lsrs	r3, r0, #6
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d301      	bcc.n	8003e88 <__udivsi3+0xb4>
 8003e84:	018b      	lsls	r3, r1, #6
 8003e86:	1ac0      	subs	r0, r0, r3
 8003e88:	4152      	adcs	r2, r2
 8003e8a:	0943      	lsrs	r3, r0, #5
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	d301      	bcc.n	8003e94 <__udivsi3+0xc0>
 8003e90:	014b      	lsls	r3, r1, #5
 8003e92:	1ac0      	subs	r0, r0, r3
 8003e94:	4152      	adcs	r2, r2
 8003e96:	0903      	lsrs	r3, r0, #4
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d301      	bcc.n	8003ea0 <__udivsi3+0xcc>
 8003e9c:	010b      	lsls	r3, r1, #4
 8003e9e:	1ac0      	subs	r0, r0, r3
 8003ea0:	4152      	adcs	r2, r2
 8003ea2:	08c3      	lsrs	r3, r0, #3
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	d301      	bcc.n	8003eac <__udivsi3+0xd8>
 8003ea8:	00cb      	lsls	r3, r1, #3
 8003eaa:	1ac0      	subs	r0, r0, r3
 8003eac:	4152      	adcs	r2, r2
 8003eae:	0883      	lsrs	r3, r0, #2
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	d301      	bcc.n	8003eb8 <__udivsi3+0xe4>
 8003eb4:	008b      	lsls	r3, r1, #2
 8003eb6:	1ac0      	subs	r0, r0, r3
 8003eb8:	4152      	adcs	r2, r2
 8003eba:	0843      	lsrs	r3, r0, #1
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	d301      	bcc.n	8003ec4 <__udivsi3+0xf0>
 8003ec0:	004b      	lsls	r3, r1, #1
 8003ec2:	1ac0      	subs	r0, r0, r3
 8003ec4:	4152      	adcs	r2, r2
 8003ec6:	1a41      	subs	r1, r0, r1
 8003ec8:	d200      	bcs.n	8003ecc <__udivsi3+0xf8>
 8003eca:	4601      	mov	r1, r0
 8003ecc:	4152      	adcs	r2, r2
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4770      	bx	lr
 8003ed2:	e7ff      	b.n	8003ed4 <__udivsi3+0x100>
 8003ed4:	b501      	push	{r0, lr}
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f000 f806 	bl	8003ee8 <__aeabi_idiv0>
 8003edc:	bd02      	pop	{r1, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)

08003ee0 <__aeabi_uidivmod>:
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	d0f7      	beq.n	8003ed4 <__udivsi3+0x100>
 8003ee4:	e776      	b.n	8003dd4 <__udivsi3>
 8003ee6:	4770      	bx	lr

08003ee8 <__aeabi_idiv0>:
 8003ee8:	4770      	bx	lr
 8003eea:	46c0      	nop			; (mov r8, r8)

08003eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eec:	480d      	ldr	r0, [pc, #52]	; (8003f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ef0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ef2:	e003      	b.n	8003efc <LoopCopyDataInit>

08003ef4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003ef6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ef8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003efa:	3104      	adds	r1, #4

08003efc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003efc:	480b      	ldr	r0, [pc, #44]	; (8003f2c <LoopForever+0xa>)
  ldr r3, =_edata
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <LoopForever+0xe>)
  adds r2, r0, r1
 8003f00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f04:	d3f6      	bcc.n	8003ef4 <CopyDataInit>
  ldr r2, =_sbss
 8003f06:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <LoopForever+0x12>)
  b LoopFillZerobss
 8003f08:	e002      	b.n	8003f10 <LoopFillZerobss>

08003f0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8003f0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f0e:	3204      	adds	r2, #4

08003f10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <LoopForever+0x16>)
  cmp r2, r3
 8003f12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f14:	d3f9      	bcc.n	8003f0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f16:	f7fc f903 	bl	8000120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f1a:	f000 f811 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f1e:	f000 f80e 	bl	8003f3e <main>

08003f22 <LoopForever>:
  
LoopForever:
    b LoopForever
 8003f22:	e7fe      	b.n	8003f22 <LoopForever>
  ldr   r0, =_estack
 8003f24:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8003f28:	08003fac 	.word	0x08003fac
  ldr r0, =_sdata
 8003f2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f30:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8003f34:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8003f38:	20000480 	.word	0x20000480

08003f3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f3c:	e7fe      	b.n	8003f3c <ADC1_COMP_IRQHandler>

08003f3e <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8003f3e:	e7fe      	b.n	8003f3e <main>

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	2600      	movs	r6, #0
 8003f44:	4d0c      	ldr	r5, [pc, #48]	; (8003f78 <__libc_init_array+0x38>)
 8003f46:	4c0d      	ldr	r4, [pc, #52]	; (8003f7c <__libc_init_array+0x3c>)
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	2600      	movs	r6, #0
 8003f52:	f000 f81b 	bl	8003f8c <_init>
 8003f56:	4d0a      	ldr	r5, [pc, #40]	; (8003f80 <__libc_init_array+0x40>)
 8003f58:	4c0a      	ldr	r4, [pc, #40]	; (8003f84 <__libc_init_array+0x44>)
 8003f5a:	1b64      	subs	r4, r4, r5
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	42a6      	cmp	r6, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	00b3      	lsls	r3, r6, #2
 8003f66:	58eb      	ldr	r3, [r5, r3]
 8003f68:	4798      	blx	r3
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	00b3      	lsls	r3, r6, #2
 8003f70:	58eb      	ldr	r3, [r5, r3]
 8003f72:	4798      	blx	r3
 8003f74:	3601      	adds	r6, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	08003fa4 	.word	0x08003fa4
 8003f7c:	08003fa4 	.word	0x08003fa4
 8003f80:	08003fa4 	.word	0x08003fa4
 8003f84:	08003fa8 	.word	0x08003fa8

08003f88 <__EH_FRAME_BEGIN__>:
 8003f88:	00000000                                ....

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
